{
	"info": {
		"_postman_id": "d703ae1b-f925-4612-be78-6bdb5a1d8f86",
		"name": "API_Test_Comcate_v2",
		"description": "Revamp the API tests from V1 for Comcate.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Admin Panel",
			"item": [
				{
					"name": "Admin Login",
					"item": [
						{
							"name": "Comcate Admin Login- Missing Email",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f4729161-0aba-4d18-85de-1eab9709aa3f",
										"type": "text/javascript",
										"exec": [
											"var responseJson = JSON.parse(responseBody);",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error Message shows missing email\", function () {",
											"    pm.expect(responseJson.message == \"Invalid request. Missing required property: email\").to.be.true;",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"username\":\"support@comcate.com\",\n\t\"password\":\"test@123\"\n}"
								},
								"url": {
									"raw": "http://{{env}}/admin/login",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"admin",
										"login"
									]
								},
								"description": "Login to the server and fetch the token into env variables"
							},
							"response": []
						},
						{
							"name": "Comcate Admin Login- Missing field",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "39bea4e4-b42b-47cc-bfb3-d16594eb81eb",
										"type": "text/javascript",
										"exec": [
											"var responseJson = JSON.parse(responseBody);",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error Message shows missing password\", function () {",
											"    pm.expect(responseJson.message == \"Invalid request. Missing required property: password\").to.be.true;",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"username\":\"support@comcate.com\"\n\t\n}"
								},
								"url": {
									"raw": "http://{{env}}/admin/login",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"admin",
										"login"
									]
								},
								"description": "Login to the server and fetch the token into env variables"
							},
							"response": []
						},
						{
							"name": "Comcate Admin Login - Invalid Email",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e1c2e5cb-8e58-4229-936e-dd3a0c7c05b0",
										"type": "text/javascript",
										"exec": [
											"var responseJson = JSON.parse(responseBody);",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error Message shows invalid email text\", function () {",
											"    pm.expect(responseJson.message == \"Invalid argument email. Object didn't pass validation for format email: @comcate.com\").to.be.true;",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"email\":\"@comcate.com\",\n\t\"password\":\"test@123\"\n}"
								},
								"url": {
									"raw": "http://{{env}}/admin/login",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"admin",
										"login"
									]
								},
								"description": "Login to the server and fetch the token into env variables"
							},
							"response": []
						},
						{
							"name": "Comcate Admin Login - Invalid Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8e921c9f-a70b-49f2-a721-426463c234f7",
										"type": "text/javascript",
										"exec": [
											"var responseJson = JSON.parse(responseBody);",
											"",
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Error Message shows password mismatch\", function () {",
											"    pm.expect(responseJson.message == \"Password did not match.\").to.be.true;",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"email\":\"support@comcate.com\",\n\t\"password\":\"123\"\n}"
								},
								"url": {
									"raw": "http://{{env}}/admin/login",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"admin",
										"login"
									]
								},
								"description": "Login to the server and fetch the token into env variables"
							},
							"response": []
						},
						{
							"name": "Comcate Admin Login - Valid Values",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dee55f02-f871-4e22-b27f-209c2a2c9ddf",
										"type": "text/javascript",
										"exec": [
											"var responseJson = JSON.parse(responseBody);",
											"",
											"pm.environment.set(\"auth_token\",\"Bearer \"+responseJson.token);",
											"",
											"console.log(\"auth_token : \"+pm.environment.get(\"auth_token\"));",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Token is not null\", function () {",
											"    pm.expect(responseJson.token!== null).to.be.true;",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"email\":\"support@comcate.com\",\n\t\"password\":\"test@123\"\n}"
								},
								"url": {
									"raw": "http://{{env}}/admin/login",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"admin",
										"login"
									]
								},
								"description": "Login to the server and fetch the token into env variables"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "System Icons",
					"item": [
						{
							"name": "Add System Icon - Animal",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "59c3967e-e3a0-4eb6-be05-8513928277d0",
										"exec": [
											"var responseJson = JSON.parse(responseBody);",
											"",
											"pm.test(\"Status code validation\", function () {",
											"    if(responseCode.code === 409){",
											"        pm.expect(responseJson.message).to.eql(\"System icon exists already.\");",
											"    }else{",
											"        pm.response.to.have.status(201);",
											"        postman.setEnvironmentVariable(\"iconId\",responseJson.id);",
											"        pm.expect(responseJson.id).to.not.eql(null);",
											"        var assetDomain = pm.environment.get(\"asset-domain\")",
											"        pm.expect(responseJson.fileUrl).to.eql(\"https://\"+assetDomain+\"/agency_0/system_icon/animal.png\");",
											"        pm.expect(responseJson.isAvailableForUse).to.eql(true);",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"fileUrl\":\"https://{{asset-domain}}/agency_0/staging/system_icon/animal.png\"\n}"
								},
								"url": {
									"raw": "http://{{env}}/admin/system-icons",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"admin",
										"system-icons"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add System Icon - Vehicle",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "863fde04-1a53-44d6-8f72-b06b13be148a",
										"exec": [
											"var responseJson = JSON.parse(responseBody);",
											"",
											"pm.test(\"Status code validation\", function () {",
											"    if(responseCode.code === 409){",
											"        pm.expect(responseJson.message).to.eql(\"System icon exists already.\");",
											"    }else{",
											"        pm.response.to.have.status(201);",
											"        postman.setEnvironmentVariable(\"iconId\",responseJson.id);",
											"        pm.expect(responseJson.id).to.not.eql(null);",
											"        var assetDomain = pm.environment.get(\"asset-domain\")",
											"        pm.expect(responseJson.fileUrl).to.eql(\"https://\"+assetDomain+\"/agency_0/system_icon/vehicle.png\");",
											"        pm.expect(responseJson.isAvailableForUse).to.eql(true);",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"fileUrl\":\"https://{{asset-domain}}/agency_0/staging/system_icon/vehicle.png\"\n}"
								},
								"url": {
									"raw": "http://{{env}}/admin/system-icons",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"admin",
										"system-icons"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add System Icon - Others",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f63df8c7-31f9-4370-adca-2c4bab288464",
										"exec": [
											"var responseJson = JSON.parse(responseBody);",
											"",
											"pm.test(\"Status code validation\", function () {",
											"    if(responseCode.code === 409){",
											"        pm.expect(responseJson.message).to.eql(\"System icon exists already.\");",
											"    }else{",
											"        pm.response.to.have.status(201);",
											"        postman.setEnvironmentVariable(\"iconId\",responseJson.id);",
											"        pm.expect(responseJson.id).to.not.eql(null);",
											"        var assetDomain = pm.environment.get(\"asset-domain\")",
											"        pm.expect(responseJson.fileUrl).to.eql(\"https://\"+assetDomain+\"/agency_0/system_icon/others.png\");",
											"        pm.expect(responseJson.isAvailableForUse).to.eql(true);",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"fileUrl\":\"https://{{asset-domain}}/agency_0/staging/system_icon/others.png\"\n}"
								},
								"url": {
									"raw": "http://{{env}}/admin/system-icons",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"admin",
										"system-icons"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add System Icon - Light",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0e6470e8-c2ab-4e55-84b2-47e3f26ca9af",
										"exec": [
											"var responseJson = JSON.parse(responseBody);",
											"",
											"pm.test(\"Status code validation\", function () {",
											"    if(responseCode.code === 409){",
											"        pm.expect(responseJson.message).to.eql(\"System icon exists already.\");",
											"    }else{",
											"        pm.response.to.have.status(201);",
											"        postman.setEnvironmentVariable(\"iconId\",responseJson.id);",
											"        pm.expect(responseJson.id).to.not.eql(null);",
											"        var assetDomain = pm.environment.get(\"asset-domain\")",
											"        pm.expect(responseJson.fileUrl).to.eql(\"https://\"+assetDomain+\"/agency_0/system_icon/light.png\");",
											"        pm.expect(responseJson.isAvailableForUse).to.eql(true);",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"fileUrl\":\"https://{{asset-domain}}/agency_0/staging/system_icon/light.png\"\n}"
								},
								"url": {
									"raw": "http://{{env}}/admin/system-icons",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"admin",
										"system-icons"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add System Icon - Grafitti",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd973628-a9f8-4ec8-b43d-d44c70b85156",
										"exec": [
											"var responseJson = JSON.parse(responseBody);",
											"",
											"pm.test(\"Status code validation\", function () {",
											"    if(responseCode.code === 409){",
											"        pm.expect(responseJson.message).to.eql(\"System icon exists already.\");",
											"    }else{",
											"        ",
											"        pm.response.to.have.status(201);",
											"        postman.setEnvironmentVariable(\"iconId\",responseJson.id);",
											"        pm.expect(responseJson.id).to.not.eql(null);",
											"        var assetDomain = pm.environment.get(\"asset-domain\")",
											"        pm.expect(responseJson.fileUrl).to.eql(\"https://\"+assetDomain+\"/agency_0/system_icon/graffiti.png\");",
											"        pm.expect(responseJson.isAvailableForUse).to.eql(true);",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"fileUrl\":\"https://{{asset-domain}}/agency_0/staging/system_icon/graffiti.png\"\n}"
								},
								"url": {
									"raw": "http://{{env}}/admin/system-icons",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"admin",
										"system-icons"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add System Icon - General",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ac65accb-4098-40b2-9d7a-72516bf59313",
										"exec": [
											"var responseJson = JSON.parse(responseBody);",
											"",
											"pm.test(\"Status code validation\", function () {",
											"    if(responseCode.code === 409){",
											"        pm.expect(responseJson.message).to.eql(\"System icon exists already.\");",
											"    }else{",
											"        pm.response.to.have.status(201);",
											"        postman.setEnvironmentVariable(\"iconId\",responseJson.id);",
											"        pm.expect(responseJson.id).to.not.eql(null); ",
											"        var assetDomain = pm.environment.get(\"asset-domain\")",
											"        pm.expect(responseJson.fileUrl).to.eql(\"https://\"+assetDomain+\"/agency_0/system_icon/general.png\");",
											"        pm.expect(responseJson.isAvailableForUse).to.eql(true);",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"fileUrl\":\"https://{{asset-domain}}/agency_0/staging/system_icon/general.png\"\n}"
								},
								"url": {
									"raw": "http://{{env}}/admin/system-icons",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"admin",
										"system-icons"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all System Icons",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6f4606f5-ab19-4905-b471-dcaee0d28937",
										"type": "text/javascript",
										"exec": [
											"var responseJson = JSON.parse(responseBody);",
											"",
											"pm.test(\"Status code validation\", function () {",
											"        pm.response.to.have.status(200);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{env}}/admin/system-icons",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"admin",
										"system-icons"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get available system icons",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d2116322-1406-4c62-a01c-dc75fcc5f1a5",
										"type": "text/javascript",
										"exec": [
											"var responseJson = JSON.parse(responseBody);",
											"",
											"pm.test(\"Status code validation\", function () {",
											"        pm.response.to.have.status(200);",
											"});",
											"",
											"var schema ={",
											"  \"definitions\": {},",
											"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
											"  \"$id\": \"http://example.com/root.json\",",
											"  \"type\": \"array\",",
											"  \"items\": {",
											"    \"$id\": \"#/items\",",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"      \"id\",",
											"      \"fileUrl\",",
											"      \"isAvailableForUse\"",
											"    ],",
											"    \"properties\": {",
											"      \"id\": {",
											"        \"$id\": \"#/items/properties/id\",",
											"        \"type\": \"integer\"",
											"      },",
											"      \"fileUrl\": {",
											"        \"$id\": \"#/items/properties/fileUrl\",",
											"        \"type\": \"string\",",
											"        \"pattern\": \"^(.*)$\"",
											"      },",
											"      \"isAvailableForUse\": {",
											"        \"$id\": \"#/items/properties/isAvailableForUse\",",
											"        \"type\": \"boolean\"",
											"      }",
											"    }",
											"  }",
											"};",
											"",
											"",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;",
											"  ",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{env}}/admin/available-system-icons",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"admin",
										"available-system-icons"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Violation Types",
					"item": [
						{
							"name": "Create a System Violation Type - More than max length",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3d5704e4-1aca-4146-b170-d1b410b23f34",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([400]);",
											"});",
											"",
											"pm.test(\"Response must be Valid and have a Body\", function () {",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Label is not accepted\", function(){",
											"pm.expect(jsonData.message).to.equal(\"Invalid argument label. String is too long (68 chars), maximum 10\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"label\": \"Fire label with more than max length of 10 chars which is not needed\",\n  \"iconId\": 5,\n  \"isAvailableForActivation\": true,\n  \"isCustom\": true\n}"
								},
								"url": {
									"raw": "http://{{env}}/admin/system-xerce-violation-types",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"admin",
										"system-xerce-violation-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a System Violation  - Custom",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0ceabdea-ea85-4e78-a1f9-5345ebd6c9c1",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
											"});",
											"",
											"pm.test(\"Response must be Valid and have a Body\", function () {",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"",
											"var schema = {",
											"  \"definitions\": {},",
											"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
											"  \"$id\": \"http://example.com/root.json\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"id\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"label\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"iconUrl\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"isAvailableForActivation\": {",
											"      \"type\": \"boolean\"",
											"    },",
											"    \"isCustom\": {",
											"      \"type\": \"boolean\"",
											"    },",
											"    \"associatedEntitySectionName\": {",
											"      \"type\": \"null\"",
											"    }",
											"  }",
											"}",
											"",
											"",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
											"  ",
											"});",
											"",
											"pm.test('Available for Activation true', function() {",
											"  pm.expect(jsonData.isAvailableForActivation).to.equal(true);",
											"});",
											"",
											"",
											"pm.test('Validate if custom', function() {",
											"  pm.expect(jsonData.isCustom).to.equal(true);",
											"});",
											"",
											"pm.test('Validate id not null', function() {",
											"  pm.expect(jsonData.id).to.not.equal(null);",
											"});",
											"",
											"pm.test('Validate Label is correct', function() {",
											"  pm.expect(jsonData.label).to.equal(\"Fire\");",
											"});",
											"",
											"pm.environment.set(\"custom_vt_icon_id\", jsonData.id);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"label\": \"Fire\",\n  \"iconId\": 4,\n  \"isAvailableForActivation\": true,\n  \"isCustom\": true\n}"
								},
								"url": {
									"raw": "http://{{env}}/admin/system-xerce-violation-types",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"admin",
										"system-xerce-violation-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a System Violation - System",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0ceabdea-ea85-4e78-a1f9-5345ebd6c9c1",
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.environment.set(\"system_vt_icon_id\", jsonData.id);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
											"});",
											"",
											"pm.test(\"Response must be Valid and have a Body\", function () {",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"",
											"var schema = {",
											"  \"definitions\": {},",
											"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
											"  \"$id\": \"http://example.com/root.json\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"id\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"label\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"iconUrl\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"isAvailableForActivation\": {",
											"      \"type\": \"boolean\"",
											"    },",
											"    \"isCustom\": {",
											"      \"type\": \"boolean\"",
											"    },",
											"    \"associatedEntitySectionName\": {",
											"      \"type\": \"null\"",
											"    }",
											"  }",
											"}",
											"",
											"",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
											"  ",
											"});",
											"",
											"pm.test('Available for Activation true', function() {",
											"  pm.expect(jsonData.isAvailableForActivation).to.equal(true);",
											"});",
											"",
											"",
											"pm.test('Validate if custom', function() {",
											"  pm.expect(jsonData.isCustom).to.equal(false);",
											"});",
											"",
											"pm.test('Validate id not null', function() {",
											"  pm.expect(jsonData.id).to.not.equal(null);",
											"});",
											"",
											"pm.test('Validate Label is correct', function() {",
											"  pm.expect(jsonData.label).to.equal(\"Nuisanse\");",
											"});",
											"",
											"pm.environment.set(\"system_vt_icon_id\", jsonData.id);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"label\": \"Nuisanse\",\n  \"iconId\": 5,\n  \"isAvailableForActivation\": true,\n  \"isCustom\": false\n}"
								},
								"url": {
									"raw": "http://{{env}}/admin/system-xerce-violation-types",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"admin",
										"system-xerce-violation-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a System Violation Type - Duplicate Label",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "99255882-3011-4aba-8c36-5e5a5306ce3e",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 409\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([409]);",
											"});",
											"",
											"pm.test(\"Response must be Valid and have a Body\", function () {",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"",
											"pm.test('Error for duplicate', function() {",
											"  pm.expect(jsonData.message).to.equal(\"Violation type exists already.\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"label\": \"Animal\",\n  \"iconId\": 6,\n  \"isAvailableForActivation\": true,\n  \"isCustom\": true\n}"
								},
								"url": {
									"raw": "http://{{env}}/admin/system-xerce-violation-types",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"admin",
										"system-xerce-violation-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a System Violation Type - No icon found",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3962f703-8eaf-486c-92ed-f1d80909502d",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([400]);",
											"});",
											"",
											"pm.test(\"Response must be Valid and have a Body\", function () {",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Icon not found', function() {",
											"  pm.expect(jsonData.message).to.equal(\"No such system icon found\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"label\": \"Water\",\n  \"iconId\": 7,\n  \"isAvailableForActivation\": true,\n  \"isCustom\": true\n}"
								},
								"url": {
									"raw": "http://{{env}}/admin/system-xerce-violation-types",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"admin",
										"system-xerce-violation-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a System Violation Type - Icon not available",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bc957e02-c8f5-45f0-bd4e-6d95023d1c8d",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([400]);",
											"});",
											"",
											"pm.test(\"Response must be Valid and have a Body\", function () {",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Icon not found', function() {",
											"  pm.expect(jsonData.message).to.equal(\"Violation icon is already in use\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"label\": \"Nuisance\",\n  \"iconId\": 3,\n  \"isAvailableForActivation\": true,\n  \"isCustom\": true\n}"
								},
								"url": {
									"raw": "http://{{env}}/admin/system-xerce-violation-types",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"admin",
										"system-xerce-violation-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a System Violation Type - No Activation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "011c5996-2a57-40ff-a87c-1cad267ae5cb",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([400]);",
											"});",
											"",
											"pm.test(\"Response must be Valid and have a Body\", function () {",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"",
											"var schema = {",
											"  \"definitions\": {},",
											"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
											"  \"$id\": \"http://example.com/root.json\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"id\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"label\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"iconUrl\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"isAvailableForActivation\": {",
											"      \"type\": \"boolean\"",
											"    },",
											"    \"isCustom\": {",
											"      \"type\": \"boolean\"",
											"    },",
											"    \"associatedEntitySectionName\": {",
											"      \"type\": \"null\"",
											"    }",
											"  }",
											"}",
											"",
											"",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
											"  ",
											"});",
											"",
											"",
											"pm.test('Error message is thrown for not available for activation', function() {",
											"  pm.expect(jsonData.message).to.include(\"Violation Type should be Available for Activation\");",
											"  ",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"label\": \"PNuisance\",\n  \"iconId\": 6,\n  \"isAvailableForActivation\": false,\n  \"isCustom\": true\n}"
								},
								"url": {
									"raw": "http://{{env}}/admin/system-xerce-violation-types",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"admin",
										"system-xerce-violation-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all violation types",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c946c0c5-682f-4390-8a1f-7b99a497bdfe",
										"type": "text/javascript",
										"exec": [
											"var schema = {",
											"  \"definitions\": {},",
											"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
											"  \"$id\": \"http://example.com/root.json\",",
											"  \"type\": \"array\",",
											"  \"items\": {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"      \"id\": {",
											"        \"type\": \"integer\"",
											"      },",
											"      \"label\": {",
											"        \"type\": \"string\"",
											"      },",
											"      \"iconUrl\": {",
											"        \"type\": \"string\"",
											"      },",
											"      \"isAvailableForActivation\": {",
											"        \"type\": \"boolean\"",
											"      },",
											"      \"isCustom\": {",
											"        \"type\": \"boolean\"",
											"      },",
											"      \"associatedEntitySectionName\": {",
											"        ",
											"      }",
											"    }",
											"  }",
											"}",
											";",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
											"",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{env}}/admin/system-xerce-violation-types",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"admin",
										"system-xerce-violation-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all violation types - Check default associated entities",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "19558f6e-c817-4579-8343-4f8a9211fc15",
										"exec": [
											"var schema = {",
											"  \"definitions\": {},",
											"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
											"  \"$id\": \"http://example.com/root.json\",",
											"  \"type\": \"array\",",
											"  \"items\": {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"      \"id\": {",
											"        \"type\": \"integer\"",
											"      },",
											"      \"label\": {",
											"        \"type\": \"string\"",
											"      },",
											"      \"iconUrl\": {",
											"        \"type\": \"string\"",
											"      },",
											"      \"isAvailableForActivation\": {",
											"        \"type\": \"boolean\"",
											"      },",
											"      \"isCustom\": {",
											"        \"type\": \"boolean\"",
											"      },",
											"      \"associatedEntitySectionName\": {",
											"        ",
											"      }",
											"    }",
											"  }",
											"}",
											";",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
											"",
											"});",
											"",
											"var numberDefaultAssociatedEntities = 0;",
											"",
											"for(i=0;i<jsonData.length;i++){",
											"    if(jsonData[i].associatedEntitySectionName === \"Animal\" || jsonData[i].associatedEntitySectionName === \"Vehicle\"){",
											"        numberDefaultAssociatedEntities++;",
											"    }",
											"}",
											"",
											"console.log(`numberDefaultAssociatedEntities      ${numberDefaultAssociatedEntities}`)",
											"",
											"pm.test(\"Animal and Vehicle have entities by default\", function(){",
											"    pm.expect(numberDefaultAssociatedEntities === 2);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{env}}/admin/system-xerce-violation-types",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"admin",
										"system-xerce-violation-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit Custom Violation Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "06d7d2a4-c4c6-4686-980f-e38d1a9404ad",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"var schema = {",
											"  \"definitions\": {},",
											"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
											"  \"$id\": \"http://example.com/root.json\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"id\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"label\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"iconUrl\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"isAvailableForActivation\": {",
											"      \"type\": \"boolean\"",
											"    },",
											"    \"isCustom\": {",
											"      \"type\": \"boolean\"",
											"    },",
											"    \"associatedEntitySectionName\": {",
											"      \"type\": \"null\"",
											"    }",
											"  }",
											"}",
											"",
											"",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
											"  ",
											"});",
											"",
											"",
											"pm.test(\"Label is modified\", function(){",
											"    pm.expect(jsonData.label).to.equal(\"FireTwo\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"label\": \"FireTwo\",\n  \"iconId\": 4\n}"
								},
								"url": {
									"raw": "http://{{env}}/admin/system-xerce-violation-types/{{custom_vt_icon_id}}",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"admin",
										"system-xerce-violation-types",
										"{{custom_vt_icon_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit Custom Violation Type - Change Icon",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fc9b799a-0c5d-477b-a5c2-07cf518c75f7",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Icon not accepted\", function(){",
											"    pm.expect(jsonData.message).to.equal(\"Violation icon is already in use\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"label\": \"FireTwo\",\n  \"iconId\": 1\n}"
								},
								"url": {
									"raw": "http://{{env}}/admin/system-xerce-violation-types/{{custom_vt_icon_id}}",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"admin",
										"system-xerce-violation-types",
										"{{custom_vt_icon_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit System Violation Type - Change icon(Negative)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "67560039-ae28-4bfe-978b-3c910e58285a",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"var schema = {",
											"\"type\": \"object\",",
											"  \"properties\": {",
											"    \"id\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"label\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"iconUrl\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"isAvailableForActivation\": {",
											"      \"type\": \"boolean\"",
											"    },",
											"    \"isCustom\": {",
											"      \"type\": \"boolean\"",
											"    },",
											"    \"associatedEntitySectionName\": {",
											"      \"type\": \"string\"",
											"    }",
											"  }",
											"}",
											"",
											"",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
											"  ",
											"});",
											"",
											"console.log(tv4.error);",
											"",
											"",
											"pm.test(\"Label is modified\", function(){",
											"    pm.expect(jsonData.label).to.equal(\"Animal C\");",
											"});",
											"",
											"pm.test(\"icon is unchanged\", function(){",
											"    pm.expect(jsonData.iconUrl).to.equal(\"https://cyberdyne-dev.s3.amazonaws.com/agency_0/system_icon/animal.png\");",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"label\": \"Animal C\",\n  \"iconId\": 5\n}"
								},
								"url": {
									"raw": "http://{{env}}/admin/system-xerce-violation-types/{{animal_icon_id}}",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"admin",
										"system-xerce-violation-types",
										"{{animal_icon_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit System Violation Type - More than max length",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d834630a-d832-47ca-97cc-eb06f4915715",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([400]);",
											"});",
											"",
											"",
											"var schema = {",
											"  \"definitions\": {},",
											"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
											"  \"$id\": \"http://example.com/root.json\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"id\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"label\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"iconUrl\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"isAvailableForActivation\": {",
											"      \"type\": \"boolean\"",
											"    },",
											"    \"isCustom\": {",
											"      \"type\": \"boolean\"",
											"    },",
											"    \"associatedEntitySectionName\": {",
											"      \"type\": \"null\"",
											"    }",
											"  }",
											"}",
											"",
											"",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
											"  ",
											"});",
											"",
											"",
											"pm.test(\"Label is not accepted\", function(){",
											"    pm.expect(jsonData.message).to.equal(\"Invalid argument label. String is too long (53 chars), maximum 10\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"label\": \"Fire Violation label which is more than 50 charecters\",\n  \"iconId\": 4\n}"
								},
								"url": {
									"raw": "http://{{env}}/admin/system-xerce-violation-types/{{custom_vt_icon_id}}",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"admin",
										"system-xerce-violation-types",
										"{{custom_vt_icon_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit Custom Violation - Make it a System VT",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cb902161-740f-4227-84bf-4a5be16003f4",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"var schema = {",
											"  \"definitions\": {},",
											"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
											"  \"$id\": \"http://example.com/root.json\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"id\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"label\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"iconUrl\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"isAvailableForActivation\": {",
											"      \"type\": \"boolean\"",
											"    },",
											"    \"isCustom\": {",
											"      \"type\": \"boolean\"",
											"    },",
											"    \"associatedEntitySectionName\": {",
											"      \"type\": \"null\"",
											"    }",
											"  }",
											"}",
											"",
											"",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
											"  ",
											"});",
											"",
											"",
											"pm.test(\"Label is modified\", function(){",
											"    pm.expect(jsonData.label).to.equal(\"FireTwo\");",
											"});",
											"",
											"pm.test(\"isCustom not affected\", function(){",
											"    pm.expect(jsonData.isCustom).to.equal(true);",
											"});",
											"",
											"pm.test(\"isAvailableForActivation not affected\", function(){",
											"    pm.expect(jsonData.isAvailableForActivation).to.equal(true);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"label\": \"FireTwo\",\n  \"iconId\": 4,\n  \"isCustom\": false,\n  \"isAvailableForActivation\":false\n}"
								},
								"url": {
									"raw": "http://{{env}}/admin/system-xerce-violation-types/{{custom_vt_icon_id}}",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"admin",
										"system-xerce-violation-types",
										"{{custom_vt_icon_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Custom Violation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "48680083-97af-43b9-90a6-2729200d70ac",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"var schema = {",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"id\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"label\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"iconUrl\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"isAvailableForActivation\": {",
											"      \"type\": \"boolean\"",
											"    },",
											"    \"isCustom\": {",
											"      \"type\": \"boolean\"",
											"    },",
											"    \"associatedEntitySectionName\": {",
											"      \"type\": \"null\"",
											"    }",
											"  }",
											"};",
											"",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
											"  ",
											"});",
											"",
											"pm.test('Validate Label is correct', function() {",
											"  pm.expect(jsonData.label).to.equal(\"FireTwo\");",
											"});",
											"",
											"pm.test('Validate iconUrl is correct', function() {",
											"  pm.expect(jsonData.iconUrl).to.equal(\"https://cyberdyne-dev.s3.amazonaws.com/agency_0/system_icon/others.png\");",
											"});",
											"",
											"pm.test(\"isCustom\", function(){",
											"    pm.expect(jsonData.isCustom).to.equal(true);",
											"});",
											"",
											"pm.test(\"isAvailableForActivation\", function(){",
											"    pm.expect(jsonData.isAvailableForActivation).to.equal(true);",
											"});",
											"",
											"pm.test(\"associatedEntitySectionName\", function(){",
											"    pm.expect(jsonData.associatedEntitySectionName).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{env}}/admin/system-xerce-violation-types/{{custom_vt_icon_id}}",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"admin",
										"system-xerce-violation-types",
										"{{custom_vt_icon_id}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "System Entities",
					"item": [
						{
							"name": "Create System Entity",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a90c9c44-90c1-410e-a5f5-a5a257d8c025",
										"type": "text/javascript",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"",
											"",
											"var schema = {",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"id\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"label\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"systemXerceViolationType\": {",
											"      \"type\": \"object\",",
											"      \"properties\": {",
											"        \"id\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"name\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"label\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"iconUrl\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"isAvailableForActivation\": {",
											"          \"type\": \"boolean\"",
											"        },",
											"        \"isCustom\": {",
											"          \"type\": \"boolean\"",
											"        },",
											"        \"associatedEntitySectionName\": {",
											"          \"type\": \"string\"",
											"        }",
											"      }",
											"    },",
											"    \"systemXerceEntityFields\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"          \"id\": {",
											"            \"type\": \"integer\"",
											"          },",
											"          \"systemXerceEntitySectionId\": {",
											"            \"type\": \"integer\"",
											"          },",
											"          \"label\": {",
											"            \"type\": \"string\"",
											"          },",
											"          \"type\": {",
											"            \"type\": \"string\"",
											"          },",
											"          \"options\": {",
											"            \"type\": \"array\",",
											"            \"items\": {",
											"              \"type\": \"string\"",
											"            }",
											"          },",
											"          \"isActive\": {",
											"            \"type\": \"boolean\"",
											"          },",
											"          \"isMergeField\": {",
											"            \"type\": \"boolean\"",
											"          },",
											"          \"isIncludedInEntityName\": {",
											"            \"type\": \"boolean\"",
											"          },",
											"          \"sequence\": {",
											"            \"type\": \"integer\"",
											"          }",
											"        }",
											"      }",
											"    }",
											"  }",
											"};",
											"",
											"",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
											"  ",
											"});",
											"",
											"pm.environment.set(\"custom_entity_id\",jsonData.id);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"label\": \"New Entity\",\n  \"systemXerceEntityFields\": [\n    {\n      \"label\": \"Street\",\n      \"type\": \"TEXT\",\n      \"options\": [\n        \"One\"\n      ],\n      \"isActive\": true,\n      \"isMergeField\": true,\n      \"isIncludedInEntityName\": true,\n      \"sequence\": 1\n    }\n  ],\n  \"systemXerceViolationTypeId\": 3\n}"
								},
								"url": {
									"raw": "http://{{env}}/admin/system-xerce-entity-sections",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"admin",
										"system-xerce-entity-sections"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all Entities",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "10d9cb81-f2c4-4315-a724-2ba4166c4a83",
										"type": "text/javascript",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"",
											"",
											"var schema = {",
											"  \"type\": \"array\",",
											"  \"properties\": {",
											"    \"id\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"label\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"systemXerceViolationType\": {",
											"      \"type\": \"object\",",
											"      \"properties\": {",
											"        \"id\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"name\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"label\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"iconUrl\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"isAvailableForActivation\": {",
											"          \"type\": \"boolean\"",
											"        },",
											"        \"isCustom\": {",
											"          \"type\": \"boolean\"",
											"        },",
											"        \"associatedEntitySectionName\": {",
											"          \"type\": \"string\"",
											"        }",
											"      }",
											"    },",
											"    \"systemXerceEntityFields\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"          \"id\": {",
											"            \"type\": \"integer\"",
											"          },",
											"          \"systemXerceEntitySectionId\": {",
											"            \"type\": \"integer\"",
											"          },",
											"          \"label\": {",
											"            \"type\": \"string\"",
											"          },",
											"          \"type\": {",
											"            \"type\": \"string\"",
											"          },",
											"          \"options\": {",
											"            \"type\": \"array\",",
											"            \"items\": {",
											"              \"type\": \"string\"",
											"            }",
											"          },",
											"          \"isActive\": {",
											"            \"type\": \"boolean\"",
											"          },",
											"          \"isMergeField\": {",
											"            \"type\": \"boolean\"",
											"          },",
											"          \"isIncludedInEntityName\": {",
											"            \"type\": \"boolean\"",
											"          },",
											"          \"sequence\": {",
											"            \"type\": \"integer\"",
											"          }",
											"        }",
											"      }",
											"    }",
											"  }",
											"};",
											"",
											"",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
											"  ",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{env}}/admin/system-xerce-entity-sections",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"admin",
										"system-xerce-entity-sections"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7b92723b-e789-4e10-a4fb-3bf350d02143",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c6a9fb56-4002-4a62-af76-fce32ca70132",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Create Agency",
					"item": [
						{
							"name": "Create Agency - Valid values",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "da5858e5-b8eb-4b98-af78-932218de8ce6",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "055b6956-092a-4faa-a830-6efb7e02652a",
										"type": "text/javascript",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"",
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
											"});",
											"",
											"var responseSchema = {",
											"  \"type\": \"object\",",
											"  \"required\": [",
											"    \"id\",",
											"    \"name\",",
											"    \"websiteURL\",",
											"    \"agencyTimezone\",",
											"    \"whitelistURL\",",
											"    \"email\",",
											"    \"streetAddress\",",
											"    \"city\",",
											"    \"state\",",
											"    \"zip\",",
											"    \"xerce\"",
											"  ],",
											"  \"properties\": {",
											"    \"id\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"name\": {",
											"      \"type\": \"string\",",
											"      \"pattern\": \"\"",
											"    },",
											"    \"websiteURL\": {",
											"      \"type\": \"string\",",
											"    },",
											"    \"agencyTimezone\": {",
											"      \"type\": \"string\",",
											"    },",
											"    \"whitelistURL\": {",
											"      \"type\": \"string\",",
											"    },",
											"    \"email\": {",
											"      \"type\": \"string\",",
											"    },",
											"    \"streetAddress\": {",
											"      \"type\": \"string\",",
											"    },",
											"    \"city\": {",
											"      \"type\": \"string\",",
											"    },",
											"    \"state\": {",
											"      \"type\": \"string\",",
											"    },",
											"    \"zip\": {",
											"      \"type\": \"string\",",
											"    },",
											"    \"xerce\": {",
											"      \"type\": \"object\",",
											"      \"required\": [",
											"        \"id\",",
											"        \"name\",",
											"        \"isActive\",",
											"        \"caseNumberPrefix\",",
											"        \"isCaseNumberYearIncluded\",",
											"        \"caseNumberInitialization\",",
											"        \"isCaseNumberResettable\",",
											"        \"feeReceiptNumberPrefix\",",
											"        \"isFeeReceiptNumberYearIncluded\",",
											"        \"feeReceiptNumberInitialization\",",
											"        \"isFeeReceiptNumberResettable\",",
											"        \"allowCDBG\",",
											"        \"allowFeeTracking\",",
											"        \"allowTimeTracking\",",
											"        \"violationTypes\"",
											"      ],",
											"      \"properties\": {",
											"        \"id\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"name\": {",
											"          \"type\": \"string\",",
											"          ",
											"        },",
											"        \"isActive\": {",
											"          \"type\": \"boolean\"",
											"        },",
											"        \"caseNumberPrefix\": {",
											"          \"type\": \"string\",",
											"          ",
											"        },",
											"        \"isCaseNumberYearIncluded\": {",
											"          \"type\": \"boolean\"",
											"        },",
											"        \"caseNumberInitialization\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"isCaseNumberResettable\": {",
											"          \"type\": \"boolean\"",
											"        },",
											"        \"feeReceiptNumberPrefix\": {",
											"          \"type\": \"string\",",
											"          \"pattern\": \"\"",
											"        },",
											"        \"isFeeReceiptNumberYearIncluded\": {",
											"          \"type\": \"boolean\"",
											"        },",
											"        \"feeReceiptNumberInitialization\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"isFeeReceiptNumberResettable\": {",
											"          \"type\": \"boolean\"",
											"        },",
											"        \"allowCDBG\": {",
											"          \"type\": \"boolean\"",
											"        },",
											"        \"allowFeeTracking\": {",
											"          \"type\": \"boolean\"",
											"        },",
											"        \"allowTimeTracking\": {",
											"          \"type\": \"boolean\"",
											"        },",
											"        \"violationTypes\": {",
											"          \"type\": \"array\",",
											"          \"items\": {",
											"            \"type\": \"object\",",
											"            \"required\": [",
											"              \"id\",",
											"              \"isActive\",",
											"              \"label\",",
											"              ",
											"            ],",
											"            \"properties\": {",
											"              \"id\": {",
											"                \"type\": \"integer\"",
											"              },",
											"              \"isActive\": {",
											"                \"type\": \"boolean\"",
											"              },",
											"              \"label\": {",
											"                \"type\": \"string\",",
											"                \"pattern\": \"\"",
											"              },",
											"            }",
											"          }",
											"        }",
											"      }",
											"    }",
											"  }",
											"};",
											"",
											"pm.test('Response Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, responseSchema)).to.be.true;",
											"});",
											"console.log(\"Validation Status: \", tv4.error);",
											"",
											"pm.test('Agency ID is not null', function(){",
											"    pm.expect(jsonData.id!==null).to.be.true;",
											"});",
											"",
											"pm.test('Name is correct', function(){",
											"    pm.expect(jsonData.name ===",
											"    \"Agency of Hawaii\").to.be.true;",
											"});",
											"",
											"pm.test('WebsiteURL is correct', function(){",
											"    pm.expect(jsonData.websiteURL ===",
											"    \"aoh.com\").to.be.true;",
											"});",
											"",
											"pm.test('Timezone is correct', function(){",
											"    pm.expect(jsonData.agencyTimezone ===",
											"    \"PST\").to.be.true;",
											"});",
											"",
											"pm.test('whitelisted URL is correct', function(){",
											"    pm.expect(jsonData.whitelistURL ===",
											"    \"aoh.com\").to.be.true;",
											"});",
											"",
											"pm.test('email is correct', function(){",
											"    pm.expect(jsonData.email ===",
											"    \"aoh@comcate.com\").to.be.true;",
											"});",
											"",
											"pm.test('Street Address is correct', function(){",
											"    pm.expect(jsonData.streetAddress ===",
											"    \"221B Bakers St\").to.be.true;",
											"});",
											"",
											"pm.test('city is correct', function(){",
											"    pm.expect(jsonData.city ===",
											"    \"Honolulu\").to.be.true;",
											"});",
											"",
											"pm.test('state is correct', function(){",
											"    pm.expect(jsonData.state ===",
											"    \"HI\").to.be.true;",
											"});",
											"",
											"",
											"pm.test('zip is correct', function(){",
											"    pm.expect(jsonData.zip ===",
											"    \"96795\").to.be.true;",
											"});",
											"",
											"",
											"pm.test('Product is added with correct configurations', function(){",
											"    pm.expect(jsonData.xerce !== null).to.be.true;",
											"    pm.expect(jsonData.xerce.id !== null).to.be.true;",
											"    pm.expect(jsonData.xerce.name === \"Hawaii CE\").to.be.true;",
											"    pm.expect(jsonData.xerce.isActive === true).to.be.true;",
											"    pm.expect(jsonData.xerce.caseNumberPrefix === \"HCE\").to.be.true;",
											"    pm.expect(jsonData.xerce.isCaseNumberYearIncluded === true).to.be.true;",
											"    pm.expect(jsonData.xerce.caseNumberInitialization === 1).to.be.true;",
											"    pm.expect(jsonData.xerce.isCaseNumberResettable === true).to.be.true;",
											"    pm.expect(jsonData.xerce.feeReceiptNumberPrefix === \"HPEN\").to.be.true;",
											"    pm.expect(jsonData.xerce.isFeeReceiptNumberYearIncluded === true).to.be.true;",
											"    pm.expect(jsonData.xerce.feeReceiptNumberInitialization === 1).to.be.true;",
											"    pm.expect(jsonData.xerce.isFeeReceiptNumberResettable === true).to.be.true;",
											"    pm.expect(jsonData.xerce.allowCDBG === true).to.be.true;",
											"    pm.expect(jsonData.xerce.allowFeeTracking === true).to.be.true;",
											"    pm.expect(jsonData.xerce.allowTimeTracking === true).to.be.true;",
											"});",
											"",
											"",
											"pm.test('Violation type is added with correct configurations', function(){",
											"    pm.expect(jsonData.xerce !== null).to.be.true;",
											"    var numberOfViolations = jsonData.xerce.violationTypes.length;",
											"    console.log(\"numberOfViolations \"+ numberOfViolations)",
											"    for(i=0;i<numberOfViolations;i++){",
											"    pm.expect(jsonData.xerce.violationTypes !== null).to.be.true;",
											"    pm.expect(jsonData.xerce.violationTypes[i].id !== null).to.be.true;",
											"    pm.expect(jsonData.xerce.violationTypes[i].label !== null).to.be.true;",
											"    pm.expect(jsonData.xerce.violationTypes[i].isActive !== null).to.be.true;",
											"    pm.expect(jsonData.xerce.violationTypes[i].systemXerceViolationTypeId !== null).to.be.true;",
											"    }",
											"});",
											"",
											"pm.test(\"Response time is less than timeout\", function () {",
											"    pm.expect(pm.response.responseTime < pm.environment.get(\"timeout\"));",
											"});",
											"",
											"postman.setEnvironmentVariable(\"aoh_agency_id\",jsonData.id);",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Agency of Hawaii\",\n  \"websiteURL\": \"aoh.com\",\n  \"agencyTimezone\": \"PST\",\n  \"whitelistURL\": \"aoh.com\",\n  \"email\": \"aoh@comcate.com\",\n  \"streetAddress\": \"221B Bakers St\",\n  \"city\": \"Honolulu\",\n  \"state\": \"HI\",\n  \"zip\": \"96795\",\n  \"xerce\": {\n    \"name\": \"Hawaii CE\",\n    \"isActive\": true,\n    \"caseNumberPrefix\": \"HCE\",\n    \"isCaseNumberYearIncluded\": true,\n    \"caseNumberInitialization\": 1,\n    \"isCaseNumberResettable\": true,\n    \"feeReceiptNumberPrefix\": \"HPEN\",\n    \"isFeeReceiptNumberYearIncluded\": true,\n    \"feeReceiptNumberInitialization\": 1,\n    \"isFeeReceiptNumberResettable\": true,\n    \"violationTypes\": [\n      {\n        \"systemXerceViolationTypeId\": 1,\n        \"isActive\": true\n      },\n       {\n        \"systemXerceViolationTypeId\": 2,\n        \"isActive\": true\n      }, \n      {\n        \"systemXerceViolationTypeId\": 3,\n        \"isActive\": true\n      },\n       {\n        \"systemXerceViolationTypeId\": 4,\n        \"isActive\": true\n      },\n       {\n        \"systemXerceViolationTypeId\": 5,\n        \"isActive\": true\n      }\n    ]\n  }\n}"
								},
								"url": {
									"raw": "http://{{env}}/admin/agencies",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"admin",
										"agencies"
									]
								},
								"description": "Create an agency, happy path scenario"
							},
							"response": []
						},
						{
							"name": "Update Agency - Deactivate Product",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "da5858e5-b8eb-4b98-af78-932218de8ce6",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "11797878-1215-4e6b-a261-05ac45e29b00",
										"type": "text/javascript",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"",
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
											"});",
											"",
											"var responseSchema = {",
											"  \"type\": \"object\",",
											"  \"required\": [",
											"    \"id\",",
											"    \"name\",",
											"    \"websiteURL\",",
											"    \"agencyTimezone\",",
											"    \"whitelistURL\",",
											"    \"email\",",
											"    \"streetAddress\",",
											"    \"city\",",
											"    \"state\",",
											"    \"zip\",",
											"    \"xerce\"",
											"  ],",
											"  \"properties\": {",
											"    \"id\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"name\": {",
											"      \"type\": \"string\",",
											"      \"pattern\": \"\"",
											"    },",
											"    \"websiteURL\": {",
											"      \"type\": \"string\",",
											"    },",
											"    \"agencyTimezone\": {",
											"      \"type\": \"string\",",
											"    },",
											"    \"whitelistURL\": {",
											"      \"type\": \"string\",",
											"    },",
											"    \"email\": {",
											"      \"type\": \"string\",",
											"    },",
											"    \"streetAddress\": {",
											"      \"type\": \"string\",",
											"    },",
											"    \"city\": {",
											"      \"type\": \"string\",",
											"    },",
											"    \"state\": {",
											"      \"type\": \"string\",",
											"    },",
											"    \"zip\": {",
											"      \"type\": \"string\",",
											"    },",
											"    \"xerce\": {",
											"      \"type\": \"object\",",
											"      \"required\": [",
											"        \"id\",",
											"        \"name\",",
											"        \"isActive\",",
											"        \"caseNumberPrefix\",",
											"        \"isCaseNumberYearIncluded\",",
											"        \"caseNumberInitialization\",",
											"        \"isCaseNumberResettable\",",
											"        \"feeReceiptNumberPrefix\",",
											"        \"isFeeReceiptNumberYearIncluded\",",
											"        \"feeReceiptNumberInitialization\",",
											"        \"isFeeReceiptNumberResettable\",",
											"        \"allowCDBG\",",
											"        \"allowFeeTracking\",",
											"        \"allowTimeTracking\",",
											"        \"violationTypes\"",
											"      ],",
											"      \"properties\": {",
											"        \"id\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"name\": {",
											"          \"type\": \"string\",",
											"          ",
											"        },",
											"        \"isActive\": {",
											"          \"type\": \"boolean\"",
											"        },",
											"        \"caseNumberPrefix\": {",
											"          \"type\": \"string\",",
											"          ",
											"        },",
											"        \"isCaseNumberYearIncluded\": {",
											"          \"type\": \"boolean\"",
											"        },",
											"        \"caseNumberInitialization\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"isCaseNumberResettable\": {",
											"          \"type\": \"boolean\"",
											"        },",
											"        \"feeReceiptNumberPrefix\": {",
											"          \"type\": \"string\",",
											"          \"pattern\": \"\"",
											"        },",
											"        \"isFeeReceiptNumberYearIncluded\": {",
											"          \"type\": \"boolean\"",
											"        },",
											"        \"feeReceiptNumberInitialization\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"isFeeReceiptNumberResettable\": {",
											"          \"type\": \"boolean\"",
											"        },",
											"        \"allowCDBG\": {",
											"          \"type\": \"boolean\"",
											"        },",
											"        \"allowFeeTracking\": {",
											"          \"type\": \"boolean\"",
											"        },",
											"        \"allowTimeTracking\": {",
											"          \"type\": \"boolean\"",
											"        },",
											"        \"violationTypes\": {",
											"          \"type\": \"array\",",
											"          \"items\": {",
											"            \"type\": \"object\",",
											"            \"required\": [",
											"              \"id\",",
											"              \"isActive\",",
											"              \"label\",",
											"              ",
											"            ],",
											"            \"properties\": {",
											"              \"id\": {",
											"                \"type\": \"integer\"",
											"              },",
											"              \"isActive\": {",
											"                \"type\": \"boolean\"",
											"              },",
											"              \"label\": {",
											"                \"type\": \"string\",",
											"                \"pattern\": \"\"",
											"              },",
											"            }",
											"          }",
											"        }",
											"      }",
											"    }",
											"  }",
											"};",
											"",
											"pm.test('Response Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, responseSchema)).to.be.true;",
											"});",
											"console.log(\"Validation Status: \", tv4.error);",
											"",
											"pm.test('Agency ID is not null', function(){",
											"    pm.expect(jsonData.id!==null).to.be.true;",
											"});",
											"",
											"pm.test('Name is correct', function(){",
											"    pm.expect(jsonData.name ===",
											"    \"Agency of Hawaii\").to.be.true;",
											"});",
											"",
											"pm.test('WebsiteURL is correct', function(){",
											"    pm.expect(jsonData.websiteURL ===",
											"    \"aoh.com\").to.be.true;",
											"});",
											"",
											"pm.test('Timezone is correct', function(){",
											"    pm.expect(jsonData.agencyTimezone ===",
											"    \"PST\").to.be.true;",
											"});",
											"",
											"pm.test('whitelisted URL is correct', function(){",
											"    pm.expect(jsonData.whitelistURL ===",
											"    \"aoh.com\").to.be.true;",
											"});",
											"",
											"pm.test('email is correct', function(){",
											"    pm.expect(jsonData.email ===",
											"    \"aoh@comcate.com\").to.be.true;",
											"});",
											"",
											"pm.test('Street Address is correct', function(){",
											"    pm.expect(jsonData.streetAddress ===",
											"    \"221B Bakers St\").to.be.true;",
											"});",
											"",
											"pm.test('city is correct', function(){",
											"    pm.expect(jsonData.city ===",
											"    \"Honolulu\").to.be.true;",
											"});",
											"",
											"pm.test('state is correct', function(){",
											"    pm.expect(jsonData.state ===",
											"    \"HI\").to.be.true;",
											"});",
											"",
											"pm.test('Agency is Inactive', function(){",
											"    pm.expect(jsonData.isActive ===",
											"    false).to.be.true;",
											"});",
											"",
											"pm.test('zip is correct', function(){",
											"    pm.expect(jsonData.zip ===",
											"    \"96795\").to.be.true;",
											"});",
											"",
											"",
											"pm.test('Product is added with correct configurations', function(){",
											"    pm.expect(jsonData.xerce !== null).to.be.true;",
											"    pm.expect(jsonData.xerce.id !== null).to.be.true;",
											"    pm.expect(jsonData.xerce.name === \"Hawaii CE\").to.be.true;",
											"    pm.expect(jsonData.xerce.isActive === false).to.be.true;",
											"    pm.expect(jsonData.xerce.caseNumberPrefix === \"HCE\").to.be.true;",
											"    pm.expect(jsonData.xerce.isCaseNumberYearIncluded === true).to.be.true;",
											"    pm.expect(jsonData.xerce.caseNumberInitialization === 1).to.be.true;",
											"    pm.expect(jsonData.xerce.isCaseNumberResettable === true).to.be.true;",
											"    pm.expect(jsonData.xerce.feeReceiptNumberPrefix === \"HPEN\").to.be.true;",
											"    pm.expect(jsonData.xerce.isFeeReceiptNumberYearIncluded === true).to.be.true;",
											"    pm.expect(jsonData.xerce.feeReceiptNumberInitialization === 1).to.be.true;",
											"    pm.expect(jsonData.xerce.isFeeReceiptNumberResettable === true).to.be.true;",
											"    pm.expect(jsonData.xerce.allowCDBG === true).to.be.true;",
											"    pm.expect(jsonData.xerce.allowFeeTracking === true).to.be.true;",
											"    pm.expect(jsonData.xerce.allowTimeTracking === true).to.be.true;",
											"});",
											"",
											"",
											"pm.test('Violation type is added with correct configurations', function(){",
											"    pm.expect(jsonData.xerce !== null).to.be.true;",
											"    var numberOfViolations = jsonData.xerce.violationTypes.length;",
											"    console.log(\"numberOfViolations \"+ numberOfViolations)",
											"    for(i=0;i<numberOfViolations;i++){",
											"    pm.expect(jsonData.xerce.violationTypes !== null).to.be.true;",
											"    pm.expect(jsonData.xerce.violationTypes[i].id !== null).to.be.true;",
											"    pm.expect(jsonData.xerce.violationTypes[i].label !== null).to.be.true;",
											"    pm.expect(jsonData.xerce.violationTypes[i].isActive !== null).to.be.true;",
											"    pm.expect(jsonData.xerce.violationTypes[i].systemXerceViolationTypeId !== null).to.be.true;",
											"    }",
											"});",
											"",
											"pm.test(\"Response time is less than timeout\", function () {",
											"    pm.expect(pm.response.responseTime < pm.environment.get(\"timeout\"));",
											"});",
											"",
											"postman.setEnvironmentVariable(\"aoh_agency_id\",jsonData.id);",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Agency of Hawaii\",\n  \"websiteURL\": \"aoh.com\",\n  \"agencyTimezone\": \"PST\",\n  \"whitelistURL\": \"aoh.com\",\n  \"email\": \"aoh@comcate.com\",\n  \"streetAddress\": \"221B Bakers St\",\n  \"city\": \"Honolulu\",\n  \"state\": \"HI\",\n  \"zip\": \"96795\",\n  \"xerce\": {\n    \"name\": \"Hawaii CE\",\n    \"isActive\": false,\n    \"caseNumberPrefix\": \"HCE\",\n    \"isCaseNumberYearIncluded\": true,\n    \"caseNumberInitialization\": 1,\n    \"isCaseNumberResettable\": true,\n    \"feeReceiptNumberPrefix\": \"HPEN\",\n    \"isFeeReceiptNumberYearIncluded\": true,\n    \"feeReceiptNumberInitialization\": 1,\n    \"isFeeReceiptNumberResettable\": true,\n    \"violationTypes\": [\n       {\n        \"systemXerceViolationTypeId\": 1,\n        \"isActive\": true\n      },\n       {\n        \"systemXerceViolationTypeId\": 2,\n        \"isActive\": true\n      }, \n      {\n        \"systemXerceViolationTypeId\": 3,\n        \"isActive\": true\n      },\n       {\n        \"systemXerceViolationTypeId\": 4,\n        \"isActive\": false\n      },\n       {\n        \"systemXerceViolationTypeId\": 5,\n        \"isActive\": true\n      }\n    ]\n  }\n}"
								},
								"url": {
									"raw": "http://{{env}}/admin/agencies/{{aoh_agency_id}}",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"admin",
										"agencies",
										"{{aoh_agency_id}}"
									]
								},
								"description": "Create an agency, happy path scenario"
							},
							"response": []
						},
						{
							"name": "Update Agency - Reactivate Product",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "da5858e5-b8eb-4b98-af78-932218de8ce6",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1597fc83-e485-42fb-8515-551e6f07c529",
										"type": "text/javascript",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"",
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
											"});",
											"",
											"var responseSchema = {",
											"  \"type\": \"object\",",
											"  \"required\": [",
											"    \"id\",",
											"    \"name\",",
											"    \"websiteURL\",",
											"    \"agencyTimezone\",",
											"    \"whitelistURL\",",
											"    \"email\",",
											"    \"streetAddress\",",
											"    \"city\",",
											"    \"state\",",
											"    \"zip\",",
											"    \"xerce\"",
											"  ],",
											"  \"properties\": {",
											"    \"id\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"name\": {",
											"      \"type\": \"string\",",
											"      \"pattern\": \"\"",
											"    },",
											"    \"websiteURL\": {",
											"      \"type\": \"string\",",
											"    },",
											"    \"agencyTimezone\": {",
											"      \"type\": \"string\",",
											"    },",
											"    \"whitelistURL\": {",
											"      \"type\": \"string\",",
											"    },",
											"    \"email\": {",
											"      \"type\": \"string\",",
											"    },",
											"    \"streetAddress\": {",
											"      \"type\": \"string\",",
											"    },",
											"    \"city\": {",
											"      \"type\": \"string\",",
											"    },",
											"    \"state\": {",
											"      \"type\": \"string\",",
											"    },",
											"    \"zip\": {",
											"      \"type\": \"string\",",
											"    },",
											"    \"xerce\": {",
											"      \"type\": \"object\",",
											"      \"required\": [",
											"        \"id\",",
											"        \"name\",",
											"        \"isActive\",",
											"        \"caseNumberPrefix\",",
											"        \"isCaseNumberYearIncluded\",",
											"        \"caseNumberInitialization\",",
											"        \"isCaseNumberResettable\",",
											"        \"feeReceiptNumberPrefix\",",
											"        \"isFeeReceiptNumberYearIncluded\",",
											"        \"feeReceiptNumberInitialization\",",
											"        \"isFeeReceiptNumberResettable\",",
											"        \"allowCDBG\",",
											"        \"allowFeeTracking\",",
											"        \"allowTimeTracking\",",
											"        \"violationTypes\"",
											"      ],",
											"      \"properties\": {",
											"        \"id\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"name\": {",
											"          \"type\": \"string\",",
											"          ",
											"        },",
											"        \"isActive\": {",
											"          \"type\": \"boolean\"",
											"        },",
											"        \"caseNumberPrefix\": {",
											"          \"type\": \"string\",",
											"          ",
											"        },",
											"        \"isCaseNumberYearIncluded\": {",
											"          \"type\": \"boolean\"",
											"        },",
											"        \"caseNumberInitialization\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"isCaseNumberResettable\": {",
											"          \"type\": \"boolean\"",
											"        },",
											"        \"feeReceiptNumberPrefix\": {",
											"          \"type\": \"string\",",
											"          \"pattern\": \"\"",
											"        },",
											"        \"isFeeReceiptNumberYearIncluded\": {",
											"          \"type\": \"boolean\"",
											"        },",
											"        \"feeReceiptNumberInitialization\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"isFeeReceiptNumberResettable\": {",
											"          \"type\": \"boolean\"",
											"        },",
											"        \"allowCDBG\": {",
											"          \"type\": \"boolean\"",
											"        },",
											"        \"allowFeeTracking\": {",
											"          \"type\": \"boolean\"",
											"        },",
											"        \"allowTimeTracking\": {",
											"          \"type\": \"boolean\"",
											"        },",
											"        \"violationTypes\": {",
											"          \"type\": \"array\",",
											"          \"items\": {",
											"            \"type\": \"object\",",
											"            \"required\": [",
											"              \"id\",",
											"              \"isActive\",",
											"              \"label\",",
											"              ",
											"            ],",
											"            \"properties\": {",
											"              \"id\": {",
											"                \"type\": \"integer\"",
											"              },",
											"              \"isActive\": {",
											"                \"type\": \"boolean\"",
											"              },",
											"              \"label\": {",
											"                \"type\": \"string\",",
											"                \"pattern\": \"\"",
											"              },",
											"            }",
											"          }",
											"        }",
											"      }",
											"    }",
											"  }",
											"};",
											"",
											"pm.test('Response Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, responseSchema)).to.be.true;",
											"});",
											"console.log(\"Validation Status: \", tv4.error);",
											"",
											"pm.test('Agency ID is not null', function(){",
											"    pm.expect(jsonData.id!==null).to.be.true;",
											"});",
											"",
											"pm.test('Name is correct', function(){",
											"    pm.expect(jsonData.name ===",
											"    \"Agency of Hawaii\").to.be.true;",
											"});",
											"",
											"pm.test('WebsiteURL is correct', function(){",
											"    pm.expect(jsonData.websiteURL ===",
											"    \"aoh.com\").to.be.true;",
											"});",
											"",
											"pm.test('Timezone is correct', function(){",
											"    pm.expect(jsonData.agencyTimezone ===",
											"    \"PST\").to.be.true;",
											"});",
											"",
											"pm.test('whitelisted URL is correct', function(){",
											"    pm.expect(jsonData.whitelistURL ===",
											"    \"aoh.com\").to.be.true;",
											"});",
											"",
											"pm.test('email is correct', function(){",
											"    pm.expect(jsonData.email ===",
											"    \"aoh@comcate.com\").to.be.true;",
											"});",
											"",
											"pm.test('Street Address is correct', function(){",
											"    pm.expect(jsonData.streetAddress ===",
											"    \"221B Bakers St\").to.be.true;",
											"});",
											"",
											"pm.test('city is correct', function(){",
											"    pm.expect(jsonData.city ===",
											"    \"Honolulu\").to.be.true;",
											"});",
											"",
											"pm.test('state is correct', function(){",
											"    pm.expect(jsonData.state ===",
											"    \"HI\").to.be.true;",
											"});",
											"",
											"",
											"pm.test('zip is correct', function(){",
											"    pm.expect(jsonData.zip ===",
											"    \"96795\").to.be.true;",
											"});",
											"",
											"",
											"pm.test('Product is added with correct configurations', function(){",
											"    pm.expect(jsonData.xerce !== null).to.be.true;",
											"    pm.expect(jsonData.xerce.id !== null).to.be.true;",
											"    pm.expect(jsonData.xerce.name === \"Hawaii CE\").to.be.true;",
											"    pm.expect(jsonData.xerce.isActive === true).to.be.true;",
											"    pm.expect(jsonData.xerce.caseNumberPrefix === \"HCE\").to.be.true;",
											"    pm.expect(jsonData.xerce.isCaseNumberYearIncluded === true).to.be.true;",
											"    pm.expect(jsonData.xerce.caseNumberInitialization === 1).to.be.true;",
											"    pm.expect(jsonData.xerce.isCaseNumberResettable === true).to.be.true;",
											"    pm.expect(jsonData.xerce.feeReceiptNumberPrefix === \"HPEN\").to.be.true;",
											"    pm.expect(jsonData.xerce.isFeeReceiptNumberYearIncluded === true).to.be.true;",
											"    pm.expect(jsonData.xerce.feeReceiptNumberInitialization === 1).to.be.true;",
											"    pm.expect(jsonData.xerce.isFeeReceiptNumberResettable === true).to.be.true;",
											"    pm.expect(jsonData.xerce.allowCDBG === true).to.be.true;",
											"    pm.expect(jsonData.xerce.allowFeeTracking === true).to.be.true;",
											"    pm.expect(jsonData.xerce.allowTimeTracking === true).to.be.true;",
											"});",
											"",
											"",
											"pm.test('Violation type is added with correct configurations', function(){",
											"    pm.expect(jsonData.xerce !== null).to.be.true;",
											"    var numberOfViolations = jsonData.xerce.violationTypes.length;",
											"    console.log(\"numberOfViolations \"+ numberOfViolations)",
											"    for(i=0;i<numberOfViolations;i++){",
											"    pm.expect(jsonData.xerce.violationTypes !== null).to.be.true;",
											"    pm.expect(jsonData.xerce.violationTypes[i].id !== null).to.be.true;",
											"    pm.expect(jsonData.xerce.violationTypes[i].label !== null).to.be.true;",
											"    pm.expect(jsonData.xerce.violationTypes[i].isActive !== null).to.be.true;",
											"    pm.expect(jsonData.xerce.violationTypes[i].systemXerceViolationTypeId !== null).to.be.true;",
											"    }",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than timeout\", function () {",
											"    pm.expect(pm.response.responseTime < pm.environment.get(\"timeout\"));",
											"});",
											"",
											"postman.setEnvironmentVariable(\"aoh_agency_id\",jsonData.id);",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Agency of Hawaii\",\n  \"websiteURL\": \"aoh.com\",\n  \"agencyTimezone\": \"PST\",\n  \"whitelistURL\": \"aoh.com\",\n  \"email\": \"aoh@comcate.com\",\n  \"streetAddress\": \"221B Bakers St\",\n  \"city\": \"Honolulu\",\n  \"state\": \"HI\",\n  \"zip\": \"96795\",\n  \"xerce\": {\n    \"name\": \"Hawaii CE\",\n    \"isActive\": true,\n    \"caseNumberPrefix\": \"HCE\",\n    \"isCaseNumberYearIncluded\": true,\n    \"caseNumberInitialization\": 1,\n    \"isCaseNumberResettable\": true,\n    \"feeReceiptNumberPrefix\": \"HPEN\",\n    \"isFeeReceiptNumberYearIncluded\": true,\n    \"feeReceiptNumberInitialization\": 1,\n    \"isFeeReceiptNumberResettable\": true,\n    \"violationTypes\": [\n       {\n        \"systemXerceViolationTypeId\": 1,\n        \"isActive\": true\n      },\n       {\n        \"systemXerceViolationTypeId\": 2,\n        \"isActive\": true\n      }, \n      {\n        \"systemXerceViolationTypeId\": 3,\n        \"isActive\": true\n      },\n       {\n        \"systemXerceViolationTypeId\": 4,\n        \"isActive\": true\n      },\n       {\n        \"systemXerceViolationTypeId\": 5,\n        \"isActive\": true\n      }\n    ]\n  }\n}"
								},
								"url": {
									"raw": "http://{{env}}/admin/agencies/{{aoh_agency_id}}",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"admin",
										"agencies",
										"{{aoh_agency_id}}"
									]
								},
								"description": "Create an agency, happy path scenario"
							},
							"response": []
						},
						{
							"name": "Update Agency - Add VT",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "da5858e5-b8eb-4b98-af78-932218de8ce6",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "abb119e9-af9a-4f25-919a-c179a3ea420c",
										"type": "text/javascript",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"",
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
											"});",
											"",
											"var responseSchema = {",
											"  \"type\": \"object\",",
											"  \"required\": [",
											"    \"id\",",
											"    \"name\",",
											"    \"websiteURL\",",
											"    \"agencyTimezone\",",
											"    \"whitelistURL\",",
											"    \"email\",",
											"    \"streetAddress\",",
											"    \"city\",",
											"    \"state\",",
											"    \"zip\",",
											"    \"xerce\"",
											"  ],",
											"  \"properties\": {",
											"    \"id\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"name\": {",
											"      \"type\": \"string\",",
											"      \"pattern\": \"\"",
											"    },",
											"    \"websiteURL\": {",
											"      \"type\": \"string\",",
											"    },",
											"    \"agencyTimezone\": {",
											"      \"type\": \"string\",",
											"    },",
											"    \"whitelistURL\": {",
											"      \"type\": \"string\",",
											"    },",
											"    \"email\": {",
											"      \"type\": \"string\",",
											"    },",
											"    \"streetAddress\": {",
											"      \"type\": \"string\",",
											"    },",
											"    \"city\": {",
											"      \"type\": \"string\",",
											"    },",
											"    \"state\": {",
											"      \"type\": \"string\",",
											"    },",
											"    \"zip\": {",
											"      \"type\": \"string\",",
											"    },",
											"    \"xerce\": {",
											"      \"type\": \"object\",",
											"      \"required\": [",
											"        \"id\",",
											"        \"name\",",
											"        \"isActive\",",
											"        \"caseNumberPrefix\",",
											"        \"isCaseNumberYearIncluded\",",
											"        \"caseNumberInitialization\",",
											"        \"isCaseNumberResettable\",",
											"        \"feeReceiptNumberPrefix\",",
											"        \"isFeeReceiptNumberYearIncluded\",",
											"        \"feeReceiptNumberInitialization\",",
											"        \"isFeeReceiptNumberResettable\",",
											"        \"allowCDBG\",",
											"        \"allowFeeTracking\",",
											"        \"allowTimeTracking\",",
											"        \"violationTypes\"",
											"      ],",
											"      \"properties\": {",
											"        \"id\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"name\": {",
											"          \"type\": \"string\",",
											"          ",
											"        },",
											"        \"isActive\": {",
											"          \"type\": \"boolean\"",
											"        },",
											"        \"caseNumberPrefix\": {",
											"          \"type\": \"string\",",
											"          ",
											"        },",
											"        \"isCaseNumberYearIncluded\": {",
											"          \"type\": \"boolean\"",
											"        },",
											"        \"caseNumberInitialization\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"isCaseNumberResettable\": {",
											"          \"type\": \"boolean\"",
											"        },",
											"        \"feeReceiptNumberPrefix\": {",
											"          \"type\": \"string\",",
											"          \"pattern\": \"\"",
											"        },",
											"        \"isFeeReceiptNumberYearIncluded\": {",
											"          \"type\": \"boolean\"",
											"        },",
											"        \"feeReceiptNumberInitialization\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"isFeeReceiptNumberResettable\": {",
											"          \"type\": \"boolean\"",
											"        },",
											"        \"allowCDBG\": {",
											"          \"type\": \"boolean\"",
											"        },",
											"        \"allowFeeTracking\": {",
											"          \"type\": \"boolean\"",
											"        },",
											"        \"allowTimeTracking\": {",
											"          \"type\": \"boolean\"",
											"        },",
											"        \"violationTypes\": {",
											"          \"type\": \"array\",",
											"          \"items\": {",
											"            \"type\": \"object\",",
											"            \"required\": [",
											"              \"id\",",
											"              \"isActive\",",
											"              \"label\",",
											"              ",
											"            ],",
											"            \"properties\": {",
											"              \"id\": {",
											"                \"type\": \"integer\"",
											"              },",
											"              \"isActive\": {",
											"                \"type\": \"boolean\"",
											"              },",
											"              \"label\": {",
											"                \"type\": \"string\",",
											"                \"pattern\": \"\"",
											"              },",
											"            }",
											"          }",
											"        }",
											"      }",
											"    }",
											"  }",
											"};",
											"",
											"pm.test('Response Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, responseSchema)).to.be.true;",
											"});",
											"console.log(\"Validation Status: \", tv4.error);",
											"",
											"pm.test('Agency ID is not null', function(){",
											"    pm.expect(jsonData.id!==null).to.be.true;",
											"});",
											"",
											"pm.test('Name is correct', function(){",
											"    pm.expect(jsonData.name ===",
											"    \"Agency of Hawaii\").to.be.true;",
											"});",
											"",
											"pm.test('WebsiteURL is correct', function(){",
											"    pm.expect(jsonData.websiteURL ===",
											"    \"aoh.com\").to.be.true;",
											"});",
											"",
											"pm.test('Timezone is correct', function(){",
											"    pm.expect(jsonData.agencyTimezone ===",
											"    \"PST\").to.be.true;",
											"});",
											"",
											"pm.test('whitelisted URL is correct', function(){",
											"    pm.expect(jsonData.whitelistURL ===",
											"    \"aoh.com\").to.be.true;",
											"});",
											"",
											"pm.test('email is correct', function(){",
											"    pm.expect(jsonData.email ===",
											"    \"aoh@comcate.com\").to.be.true;",
											"});",
											"",
											"pm.test('Street Address is correct', function(){",
											"    pm.expect(jsonData.streetAddress ===",
											"    \"221B Bakers St\").to.be.true;",
											"});",
											"",
											"pm.test('city is correct', function(){",
											"    pm.expect(jsonData.city ===",
											"    \"Honolulu\").to.be.true;",
											"});",
											"",
											"pm.test('state is correct', function(){",
											"    pm.expect(jsonData.state ===",
											"    \"HI\").to.be.true;",
											"});",
											"",
											"",
											"pm.test('zip is correct', function(){",
											"    pm.expect(jsonData.zip ===",
											"    \"96795\").to.be.true;",
											"});",
											"",
											"",
											"pm.test('Product is added with correct configurations', function(){",
											"    pm.expect(jsonData.xerce !== null).to.be.true;",
											"    pm.expect(jsonData.xerce.id !== null).to.be.true;",
											"    pm.expect(jsonData.xerce.name === \"Hawaii CE\").to.be.true;",
											"    pm.expect(jsonData.xerce.isActive === true).to.be.true;",
											"    pm.expect(jsonData.xerce.caseNumberPrefix === \"HCE\").to.be.true;",
											"    pm.expect(jsonData.xerce.isCaseNumberYearIncluded === true).to.be.true;",
											"    pm.expect(jsonData.xerce.caseNumberInitialization === 1).to.be.true;",
											"    pm.expect(jsonData.xerce.isCaseNumberResettable === true).to.be.true;",
											"    pm.expect(jsonData.xerce.feeReceiptNumberPrefix === \"HPEN\").to.be.true;",
											"    pm.expect(jsonData.xerce.isFeeReceiptNumberYearIncluded === true).to.be.true;",
											"    pm.expect(jsonData.xerce.feeReceiptNumberInitialization === 1).to.be.true;",
											"    pm.expect(jsonData.xerce.isFeeReceiptNumberResettable === true).to.be.true;",
											"    pm.expect(jsonData.xerce.allowCDBG === true).to.be.true;",
											"    pm.expect(jsonData.xerce.allowFeeTracking === true).to.be.true;",
											"    pm.expect(jsonData.xerce.allowTimeTracking === true).to.be.true;",
											"});",
											"",
											"",
											"pm.test('Violation type is added with correct configurations', function(){",
											"    pm.expect(jsonData.xerce !== null).to.be.true;",
											"    ",
											"    pm.expect(jsonData.xerce.violationTypes !== null).to.be.true;",
											"    pm.expect(jsonData.xerce.violationTypes[0].id !== null).to.be.true;",
											"    pm.expect(jsonData.xerce.violationTypes[0].label !== null).to.be.true;",
											"    pm.expect(jsonData.xerce.violationTypes[0].isActive === true).to.be.true;",
											"    pm.expect(jsonData.xerce.violationTypes[0].systemXerceViolationTypeId === 1).to.be.true;",
											"});",
											"",
											"pm.test(\"Response time is less than timeout\", function () {",
											"    pm.expect(pm.response.responseTime < pm.environment.get(\"timeout\"));",
											"});",
											"",
											"postman.setEnvironmentVariable(\"aoh_agency_id\",jsonData.id);",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Agency of Hawaii\",\n  \"websiteURL\": \"aoh.com\",\n  \"agencyTimezone\": \"PST\",\n  \"whitelistURL\": \"aoh.com\",\n  \"email\": \"aoh@comcate.com\",\n  \"streetAddress\": \"221B Bakers St\",\n  \"city\": \"Honolulu\",\n  \"state\": \"HI\",\n  \"zip\": \"96795\",\n  \"xerce\": {\n    \"name\": \"Hawaii CE\",\n    \"isActive\": true,\n    \"caseNumberPrefix\": \"HCE\",\n    \"isCaseNumberYearIncluded\": true,\n    \"caseNumberInitialization\": 1,\n    \"isCaseNumberResettable\": true,\n    \"feeReceiptNumberPrefix\": \"HPEN\",\n    \"isFeeReceiptNumberYearIncluded\": true,\n    \"feeReceiptNumberInitialization\": 1,\n    \"isFeeReceiptNumberResettable\": true,\n    \"violationTypes\": [\n      {\n        \"systemXerceViolationTypeId\": 1,\n        \"isActive\": true\n      },\n       {\n        \"systemXerceViolationTypeId\": 2,\n        \"isActive\": true\n      }, \n      {\n        \"systemXerceViolationTypeId\": 3,\n        \"isActive\": true\n      },\n       {\n        \"systemXerceViolationTypeId\": 4,\n        \"isActive\": true\n      },\n      {\n        \"systemXerceViolationTypeId\": 5,\n        \"isActive\": true\n      }\n    ]\n  }\n}"
								},
								"url": {
									"raw": "http://{{env}}/admin/agencies/{{aoh_agency_id}}",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"admin",
										"agencies",
										"{{aoh_agency_id}}"
									]
								},
								"description": "Create an agency, happy path scenario"
							},
							"response": []
						},
						{
							"name": "Create Agency - Duplicate Check",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1a35eaa9-4e62-4e56-851b-31af7521df10",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 409 conflict\", function () {",
											"    pm.response.to.have.status(409);",
											"});",
											"",
											"var JsonData = JSON.parse(responseBody);",
											"",
											"pm.test(\"Verify error message is correct\",function(){",
											"    pm.expect(JsonData.message === \"Agency exists already.\");",
											"})"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Agency of Hawaii\",\n  \"websiteURL\": \"aoh.com\",\n  \"agencyTimezone\": \"PST\",\n  \"whitelistURL\": \"aoh.com\",\n  \"email\": \"aoh@comcate.com\",\n  \"streetAddress\": \"221B Bakers St\",\n  \"city\": \"Honolulu\",\n  \"state\": \"HI\",\n  \"zip\": \"96795\",\n  \"xerce\": {\n    \"name\": \"Hawaii CE\",\n    \"isActive\": true,\n    \"caseNumberPrefix\": \"HCE\",\n    \"isCaseNumberYearIncluded\": true,\n    \"caseNumberInitialization\": 1,\n    \"isCaseNumberResettable\": true,\n    \"feeReceiptNumberPrefix\": \"HPEN\",\n    \"isFeeReceiptNumberYearIncluded\": true,\n    \"feeReceiptNumberInitialization\": 1,\n    \"isFeeReceiptNumberResettable\": true,\n    \"violationTypes\": [\n      {\n        \"systemXerceViolationTypeId\": 1,\n        \"isActive\": true\n      },\n       {\n        \"systemXerceViolationTypeId\": 2,\n        \"isActive\": true\n      }, \n      {\n        \"systemXerceViolationTypeId\": 3,\n        \"isActive\": true\n      },\n       {\n        \"systemXerceViolationTypeId\": 4,\n        \"isActive\": true\n      },\n       {\n        \"systemXerceViolationTypeId\": 5,\n        \"isActive\": true\n      }\n    ]\n  }\n}"
								},
								"url": {
									"raw": "http://{{env}}/admin/agencies",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"admin",
										"agencies"
									]
								},
								"description": "Create an agency, happy path scenario"
							},
							"response": []
						},
						{
							"name": "Create Agency - inactive product",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "da5858e5-b8eb-4b98-af78-932218de8ce6",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "650adf61-46d2-4c82-a219-7f7c8d37e41c",
										"type": "text/javascript",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"",
											"var responseSchema = {",
											"  \"type\": \"object\",",
											"  \"required\": [",
											"    \"id\",",
											"    \"name\",",
											"    \"websiteURL\",",
											"    \"agencyTimezone\",",
											"    \"whitelistURL\",",
											"    \"email\",",
											"    \"streetAddress\",",
											"    \"city\",",
											"    \"state\",",
											"    \"zip\",",
											"    \"xerce\"",
											"  ],",
											"  \"properties\": {",
											"    \"id\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"name\": {",
											"      \"type\": \"string\",",
											"      \"pattern\": \"\"",
											"    },",
											"    \"websiteURL\": {",
											"      \"type\": \"string\",",
											"    },",
											"    \"agencyTimezone\": {",
											"      \"type\": \"string\",",
											"    },",
											"    \"whitelistURL\": {",
											"      \"type\": \"string\",",
											"    },",
											"    \"email\": {",
											"      \"type\": \"string\",",
											"    },",
											"    \"streetAddress\": {",
											"      \"type\": \"string\",",
											"    },",
											"    \"city\": {",
											"      \"type\": \"string\",",
											"    },",
											"    \"state\": {",
											"      \"type\": \"string\",",
											"    },",
											"    \"zip\": {",
											"      \"type\": \"string\",",
											"    },",
											"    \"xerce\": {",
											"      \"type\": \"object\",",
											"      \"required\": [",
											"        \"id\",",
											"        \"name\",",
											"        \"isActive\",",
											"        \"caseNumberPrefix\",",
											"        \"isCaseNumberYearIncluded\",",
											"        \"caseNumberInitialization\",",
											"        \"isCaseNumberResettable\",",
											"        \"feeReceiptNumberPrefix\",",
											"        \"isFeeReceiptNumberYearIncluded\",",
											"        \"feeReceiptNumberInitialization\",",
											"        \"isFeeReceiptNumberResettable\",",
											"        \"allowCDBG\",",
											"        \"allowFeeTracking\",",
											"        \"allowTimeTracking\",",
											"        \"violationTypes\"",
											"      ],",
											"      \"properties\": {",
											"        \"id\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"name\": {",
											"          \"type\": \"string\",",
											"          ",
											"        },",
											"        \"isActive\": {",
											"          \"type\": \"boolean\"",
											"        },",
											"        \"caseNumberPrefix\": {",
											"          \"type\": \"string\",",
											"          ",
											"        },",
											"        \"isCaseNumberYearIncluded\": {",
											"          \"type\": \"boolean\"",
											"        },",
											"        \"caseNumberInitialization\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"isCaseNumberResettable\": {",
											"          \"type\": \"boolean\"",
											"        },",
											"        \"feeReceiptNumberPrefix\": {",
											"          \"type\": \"string\",",
											"          \"pattern\": \"\"",
											"        },",
											"        \"isFeeReceiptNumberYearIncluded\": {",
											"          \"type\": \"boolean\"",
											"        },",
											"        \"feeReceiptNumberInitialization\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"isFeeReceiptNumberResettable\": {",
											"          \"type\": \"boolean\"",
											"        },",
											"        \"allowCDBG\": {",
											"          \"type\": \"boolean\"",
											"        },",
											"        \"allowFeeTracking\": {",
											"          \"type\": \"boolean\"",
											"        },",
											"        \"allowTimeTracking\": {",
											"          \"type\": \"boolean\"",
											"        },",
											"        \"violationTypes\": {",
											"          \"type\": \"array\",",
											"          \"items\": {",
											"            \"type\": \"object\",",
											"            \"required\": [",
											"              \"id\",",
											"              \"isActive\",",
											"              \"label\",",
											"              ",
											"            ],",
											"            \"properties\": {",
											"              \"id\": {",
											"                \"type\": \"integer\"",
											"              },",
											"              \"isActive\": {",
											"                \"type\": \"boolean\"",
											"              },",
											"              \"label\": {",
											"                \"type\": \"string\",",
											"                \"pattern\": \"\"",
											"              },",
											"            }",
											"          }",
											"        }",
											"      }",
											"    }",
											"  }",
											"};",
											"",
											"pm.test('Response Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, responseSchema)).to.be.true;",
											"});",
											"console.log(\"Validation Status: \", tv4.error);",
											"",
											"",
											"pm.test('Product is added with correct configurations', function(){",
											"    pm.expect(jsonData.xerce !== null).to.be.true;",
											"    pm.expect(jsonData.xerce.id !== null).to.be.true;",
											"    pm.expect(jsonData.xerce.name === \"Sample Xerce\").to.be.true;",
											"    pm.expect(jsonData.xerce.isActive === false).to.be.true;",
											"    pm.expect(jsonData.xerce.caseNumberPrefix === \"XER\").to.be.true;",
											"    pm.expect(jsonData.xerce.isCaseNumberYearIncluded === true).to.be.true;",
											"    pm.expect(jsonData.xerce.caseNumberInitialization === 1).to.be.true;",
											"    pm.expect(jsonData.xerce.isCaseNumberResettable === true).to.be.true;",
											"    pm.expect(jsonData.xerce.feeReceiptNumberPrefix === \"XFEE\").to.be.true;",
											"    pm.expect(jsonData.xerce.isFeeReceiptNumberYearIncluded === true).to.be.true;",
											"    pm.expect(jsonData.xerce.feeReceiptNumberInitialization === 10).to.be.true;",
											"    pm.expect(jsonData.xerce.isFeeReceiptNumberResettable === true).to.be.true;",
											"    pm.expect(jsonData.xerce.allowCDBG === true).to.be.true;",
											"    pm.expect(jsonData.xerce.allowFeeTracking === true).to.be.true;",
											"    pm.expect(jsonData.xerce.allowTimeTracking === true).to.be.true;",
											"});",
											"",
											"pm.environment.set(\"inactive_agency_id\",jsonData.id);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Inactive Product Agency\",\n  \"websiteURL\": \"inactiveproduct.com\",\n  \"agencyTimezone\": \"HST\",\n  \"whitelistURL\": \"inactiveproduct.com\",\n  \"email\": \"inactiveproduct@comcate.com\",\n  \"streetAddress\": \"221B Bakers St\",\n  \"city\": \"Austin\",\n  \"state\": \"TX\",\n  \"zip\": \"12345\",\n  \"xerce\": {\n    \"name\": \"Sample Xerce\",\n    \"isActive\": false,\n    \"caseNumberPrefix\": \"XER\",\n    \"isCaseNumberYearIncluded\": true,\n    \"caseNumberInitialization\": 1,\n    \"isCaseNumberResettable\": true,\n    \"feeReceiptNumberPrefix\": \"XFEE\",\n    \"isFeeReceiptNumberYearIncluded\": true,\n    \"feeReceiptNumberInitialization\": 10,\n    \"isFeeReceiptNumberResettable\": true,\n    \"violationTypes\": [\n      {\n        \"systemXerceViolationTypeId\": 1,\n        \"isActive\": true\n      },\n       {\n        \"systemXerceViolationTypeId\": 2,\n        \"isActive\": true\n      }, \n      {\n        \"systemXerceViolationTypeId\": 3,\n        \"isActive\": true\n      },\n       {\n        \"systemXerceViolationTypeId\": 4,\n        \"isActive\": true\n      },\n       {\n        \"systemXerceViolationTypeId\": 5,\n        \"isActive\": true\n      }\n    ]\n  }\n}"
								},
								"url": {
									"raw": "http://{{env}}/admin/agencies",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"admin",
										"agencies"
									]
								},
								"description": "Create an agency, happy path scenario"
							},
							"response": []
						},
						{
							"name": "Create Agency - No Product",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "da5858e5-b8eb-4b98-af78-932218de8ce6",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "8e8494ef-a8b3-41ac-9f7d-5df1ec72062b",
										"type": "text/javascript",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"",
											"var responseSchema = {",
											"  \"type\": \"object\",",
											"  \"required\": [",
											"    \"id\",",
											"    \"name\",",
											"    \"websiteURL\",",
											"    \"email\",",
											"    \"streetAddress\",",
											"    \"city\",",
											"    \"state\",",
											"    \"zip\",",
											"    \"agencyTimezone\",",
											"    \"isActive\",",
											"    \"hasParcelLayer\",",
											"    \"whitelistURL\",",
											"    \"xerce\"",
											"  ],",
											"  \"properties\": {",
											"    \"id\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"name\": {",
											"      \"type\": \"string\",",
											"      \"pattern\": \"\"",
											"    },",
											"    \"websiteURL\": {",
											"      \"type\": \"string\",",
											"      \"pattern\": \"\"",
											"    },",
											"    \"email\": {",
											"      \"type\": \"string\",",
											"      \"pattern\": \"\"",
											"    },",
											"    \"streetAddress\": {",
											"      \"type\": \"string\",",
											"      \"pattern\": \"\"",
											"    },",
											"    \"city\": {",
											"      \"type\": \"string\",",
											"      \"pattern\": \"\"",
											"    },",
											"    \"state\": {",
											"      \"type\": \"string\",",
											"      \"pattern\": \"\"",
											"    },",
											"    \"zip\": {",
											"      \"type\": \"string\",",
											"      \"pattern\": \"\"",
											"    },",
											"    \"agencyTimezone\": {",
											"      \"type\": \"string\",",
											"      \"pattern\": \"\"",
											"    },",
											"    \"isActive\": {",
											"      \"type\": \"boolean\"",
											"    },",
											"    \"hasParcelLayer\": {",
											"      \"type\": \"boolean\"",
											"    },",
											"    \"whitelistURL\": {",
											"      \"type\": \"string\",",
											"      \"pattern\": \"\"",
											"    },",
											"    \"xerce\": {",
											"      \"type\": \"null\"",
											"    }",
											"  }",
											"};",
											"",
											"pm.test('Response Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, responseSchema)).to.be.true;",
											"});",
											"console.log(\"Validation Status: \", tv4.error);",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"No Product Agency\",\n  \"websiteURL\": \"noproduct.com\",\n  \"agencyTimezone\": \"HST\",\n  \"whitelistURL\": \"noproduct.com\",\n  \"email\": \"inactiveproduct@comcate.com\",\n  \"streetAddress\": \"221B Bakers St\",\n  \"city\": \"Austin\",\n  \"state\": \"IL\",\n  \"zip\": \"12345\"\n}"
								},
								"url": {
									"raw": "http://{{env}}/admin/agencies",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"admin",
										"agencies"
									]
								},
								"description": "Create an agency, happy path scenario"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Custom Entities",
					"item": [
						{
							"name": "Get all Entities",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "10d9cb81-f2c4-4315-a724-2ba4166c4a83",
										"type": "text/javascript",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"",
											"",
											"var schema = {",
											"  \"type\": \"array\",",
											"  \"properties\": {",
											"    \"id\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"label\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"systemXerceViolationType\": {",
											"      \"type\": \"object\",",
											"      \"properties\": {",
											"        \"id\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"name\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"label\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"iconUrl\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"isAvailableForActivation\": {",
											"          \"type\": \"boolean\"",
											"        },",
											"        \"isCustom\": {",
											"          \"type\": \"boolean\"",
											"        },",
											"        \"associatedEntitySectionName\": {",
											"          \"type\": \"string\"",
											"        }",
											"      }",
											"    },",
											"    \"systemXerceEntityFields\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"          \"id\": {",
											"            \"type\": \"integer\"",
											"          },",
											"          \"systemXerceEntitySectionId\": {",
											"            \"type\": \"integer\"",
											"          },",
											"          \"label\": {",
											"            \"type\": \"string\"",
											"          },",
											"          \"type\": {",
											"            \"type\": \"string\"",
											"          },",
											"          \"options\": {",
											"            \"type\": \"array\",",
											"            \"items\": {",
											"              \"type\": \"string\"",
											"            }",
											"          },",
											"          \"isActive\": {",
											"            \"type\": \"boolean\"",
											"          },",
											"          \"isMergeField\": {",
											"            \"type\": \"boolean\"",
											"          },",
											"          \"isIncludedInEntityName\": {",
											"            \"type\": \"boolean\"",
											"          },",
											"          \"sequence\": {",
											"            \"type\": \"integer\"",
											"          }",
											"        }",
											"      }",
											"    }",
											"  }",
											"};",
											"",
											"",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
											"  ",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{env}}/admin/system-xerce-entity-sections",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"admin",
										"system-xerce-entity-sections"
									]
								}
							},
							"response": []
						},
						{
							"name": "Config New Entity",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b6a5e166-d5d3-4421-8855-c884da117bbf",
										"type": "text/javascript",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"",
											"",
											"var schema = {",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"id\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"label\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"systemXerceViolationType\": {",
											"      \"type\": \"object\",",
											"      \"properties\": {",
											"        \"id\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"name\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"label\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"iconUrl\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"isAvailableForActivation\": {",
											"          \"type\": \"boolean\"",
											"        },",
											"        \"isCustom\": {",
											"          \"type\": \"boolean\"",
											"        },",
											"        \"associatedEntitySectionName\": {",
											"          \"type\": \"string\"",
											"        }",
											"      }",
											"    },",
											"    \"systemXerceEntityFields\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"          \"id\": {",
											"            \"type\": \"integer\"",
											"          },",
											"          \"systemXerceEntitySectionId\": {",
											"            \"type\": \"integer\"",
											"          },",
											"          \"label\": {",
											"            \"type\": \"string\"",
											"          },",
											"          \"type\": {",
											"            \"type\": \"string\"",
											"          },",
											"          \"options\": {",
											"            \"type\": \"array\",",
											"            \"items\": {",
											"              \"type\": \"string\"",
											"            }",
											"          },",
											"          \"isActive\": {",
											"            \"type\": \"boolean\"",
											"          },",
											"          \"isMergeField\": {",
											"            \"type\": \"boolean\"",
											"          },",
											"          \"isIncludedInEntityName\": {",
											"            \"type\": \"boolean\"",
											"          },",
											"          \"sequence\": {",
											"            \"type\": \"integer\"",
											"          }",
											"        }",
											"      }",
											"    }",
											"  }",
											"};",
											"",
											"",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
											"  ",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"label\": \"Fire Entity\",\n  \"isActive\": true,\n  \"entityFields\": [\n    {\n      \"label\": \"Street\",\n      \"type\": \"TEXT\",\n      \"options\": [\n        \"One\"\n      ],\n      \"isActive\": true,\n      \"isMergeField\": true,\n      \"isIncludedInEntityName\": true,\n      \"sequence\": 1\n    }\n  ],\n  \"configXerceViolationTypeId\": 20,\n  \"isCustom\": true\n}"
								},
								"url": {
									"raw": "http://{{env}}/admin/agencies/{{aoh_agency_id}}/xerce/config/entity-sections",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"admin",
										"agencies",
										"{{aoh_agency_id}}",
										"xerce",
										"config",
										"entity-sections"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7b92723b-e789-4e10-a4fb-3bf350d02143",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c6a9fb56-4002-4a62-af76-fce32ca70132",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Agency Listing",
					"item": [
						{
							"name": "List All Agencies",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "23aafb0b-78b1-4c6b-b68b-ac8c7daa277b",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must be Valid and have a Body\", function () {",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"var responseSchema = {",
											"  \"type\": \"object\",",
											"  \"required\": [",
											"    \"count\",",
											"    \"data\"",
											"  ],",
											"  \"properties\": {",
											"    \"count\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"data\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"object\",",
											"        \"required\": [",
											"          \"id\",",
											"          \"name\",",
											"          \"totalCases\",",
											"          \"totalEntities\",",
											"          \"status\",",
											"          \"createdAt\",",
											"          \"createdBy\",",
											"          \"loginUrl\"",
											"        ],",
											"        \"properties\": {",
											"          \"id\": {",
											"            \"type\": \"integer\"",
											"          },",
											"          \"name\": {",
											"            \"type\": \"string\",",
											"            \"pattern\": \"\"",
											"          },",
											"          \"totalCases\": {",
											"            \"type\": \"integer\"",
											"          },",
											"          \"totalEntities\": {",
											"            \"type\": \"integer\"",
											"          },",
											"          \"status\": {",
											"            \"type\": \"string\",",
											"            ",
											"          },",
											"          \"createdAt\": {",
											"            \"type\": \"string\",",
											"            ",
											"          },",
											"          \"createdBy\": {",
											"            \"type\": \"string\",",
											"",
											"          },",
											"          \"loginUrl\": {",
											"            \"type\": \"string\",",
											"            ",
											"          }",
											"        }",
											"      }",
											"    }",
											"  }",
											"};",
											"",
											"pm.test('Response Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, responseSchema)).to.be.true;",
											"});",
											"console.log(\"Validation Status: \", tv4.error);",
											"",
											"//Tests for Response data",
											"responseObjCount = jsonData.data.length;",
											"",
											"console.log(responseObjCount);",
											"",
											"for(i=0;i<responseObjCount;i++){",
											"    tests[\"response agency id not null\"] = jsonData.data[i].id !== null;",
											"    tests[\"response agency address not null\"] = jsonData.data[i].address !== null;",
											"    tests[\"response agency websiteURL not null\"] = jsonData.data[i].websiteURL !== null;",
											"    tests[\"response agency emailId not null\"] = jsonData.data[i].email !== null;",
											"    tests[\"response agency isActive not null\"] = jsonData.data[i].isActive !== null;",
											"",
											"}",
											"",
											"",
											"postman.setEnvironmentVariable(\"numberOfAgencies\", responseObjCount);",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{env}}/admin/agencies",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"admin",
										"agencies"
									]
								},
								"description": "Get a list of already created agencies."
							},
							"response": []
						},
						{
							"name": "List All Active Agencies",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "473df4b0-ffad-4727-89e3-aef37b508799",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must be Valid and have a Body\", function () {",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"var responseSchema = {",
											"  \"type\": \"object\",",
											"  \"required\": [",
											"    \"agencies\"",
											"  ],",
											"  \"properties\": {",
											"    \"agencies\": {",
											"      ",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        ",
											"        \"type\": \"object\",",
											"        \"required\": [",
											"          \"id\",",
											"          \"name\"",
											"        ],",
											"        \"properties\": {",
											"          \"id\": {",
											"            ",
											"            \"type\": \"integer\"",
											"          },",
											"          \"name\": {",
											"            \"type\": \"string\",",
											"          }",
											"        }",
											"      }",
											"    }",
											"  }",
											"};",
											"",
											"pm.test('Response Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, responseSchema)).to.be.true;",
											"});",
											"console.log(\"Validation Status: \", tv4.error);",
											"",
											"//Tests for Response data",
											"responseObjCount = jsonData.agencies.length;",
											"",
											"console.log(responseObjCount);",
											"",
											"console.log(jsonData.agencies[0].id);",
											"",
											"for(i=0;i<responseObjCount;i++){",
											"    pm.test(\"response agency id not null\", jsonData.agencies[i].id!== null);",
											"    pm.test(\"response agency name not null\", jsonData.agencies[i].name !== null);",
											"}",
											"",
											"",
											"postman.setEnvironmentVariable(\"numberOfActiveAgencies\", responseObjCount);",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{env}}/admin/active-agencies",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"admin",
										"active-agencies"
									]
								},
								"description": "Get a list of already created agencies."
							},
							"response": []
						},
						{
							"name": "Get Single Agency",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "705ac047-533a-4811-860b-5ecf1a0eddee",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must be Valid and have a Body\", function () {",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"console.log(\"Validation Status: \", tv4.error);",
											"",
											"var numberOfVt = jsonData.xerce.violationTypes.length;",
											"",
											"for(var i= 1;i<= numberOfVt; i++){",
											"    pm.environment.set(\"violation_type_\"+i,jsonData.xerce.violationTypes[i-1].id)",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{env}}/admin/agencies/{{aoh_agency_id}}",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"admin",
										"agencies",
										"{{aoh_agency_id}}"
									]
								},
								"description": "Get a list of already created agencies."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Agency Settings",
			"item": [
				{
					"name": "User Management",
					"item": [
						{
							"name": "Super Admin Login",
							"item": [
								{
									"name": "Super Admin Login - Active Agency",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c8e6c191-9d16-47b0-94da-68fa74bea26c",
												"type": "text/javascript",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"pm.test(\"Token is not null\", function () {",
													"    pm.expect(jsonData.token).to.not.eql(null);",
													"});",
													"",
													"pm.environment.set(\"token_super_admin\",\"Bearer \"+jsonData.token);"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{auth_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{env}}/admin/agencies/{{aoh_agency_id}}/login",
											"protocol": "http",
											"host": [
												"{{env}}"
											],
											"path": [
												"admin",
												"agencies",
												"{{aoh_agency_id}}",
												"login"
											]
										},
										"description": "Comcate user logging in as a superadmin in agency"
									},
									"response": []
								},
								{
									"name": "Super Admin Login - Inactive Agency",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a4044181-360d-4c26-9e9b-38eec456de48",
												"type": "text/javascript",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"pm.test(\"Shows agency inactive error\", function () {",
													"    pm.expect(jsonData.message).to.eql(\"Agency is inactive\");",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{auth_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{env}}/admin/agencies/{{inactive_agency_id}}/login",
											"protocol": "http",
											"host": [
												"{{env}}"
											],
											"path": [
												"admin",
												"agencies",
												"{{inactive_agency_id}}",
												"login"
											]
										},
										"description": "Comcate user logging in as a superadmin in agency"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Agency User",
							"item": [
								{
									"name": "Create Inactive User Site and Product Admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "70f03b9e-a3ea-4358-9273-acd2c499fde8",
												"exec": [
													"var expectedSchema = ",
													"{",
													"  \"definitions\": {},",
													"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
													"  \"$id\": \"http://example.com\",",
													"  \"type\": \"object\",",
													"  \"required\": [",
													"    \"id\",",
													"    \"firstName\",",
													"    \"lastName\",",
													"    \"email\",",
													"    \"phone\",",
													"    \"title\",",
													"    \"department\",",
													"    \"isActive\",",
													"    \"isSiteAdmin\",",
													"    \"xerce\"",
													"  ],",
													"  \"properties\": {",
													"    \"id\": {",
													"      \"type\": \"integer\"",
													"    },",
													"    \"firstName\": {",
													"      \"type\": \"string\",",
													"      \"pattern\": \"\"",
													"    },",
													"    \"lastName\": {",
													"      \"type\": \"string\",",
													"      \"pattern\": \"\"",
													"    },",
													"    \"email\": {",
													"      \"type\": \"string\",",
													"      \"pattern\": \"\"",
													"    },",
													"    \"phone\": {",
													"      \"type\": \"string\",",
													"      \"pattern\": \"\"",
													"    },",
													"    \"title\": {",
													"      \"type\": \"string\",",
													"      \"pattern\": \"\"",
													"    },",
													"    \"department\": {",
													"      \"type\": \"string\",",
													"      \"pattern\": \"\"",
													"    },",
													"    \"isActive\": {",
													"      \"type\": \"boolean\"",
													"    },",
													"    \"isSiteAdmin\": {",
													"      \"type\": \"boolean\"",
													"    },",
													"    \"xerce\": {",
													"      \"type\": \"object\",",
													"      \"required\": [",
													"        \"id\",",
													"        \"xerceId\",",
													"        \"isActive\",",
													"        \"isProductAdmin\",",
													"        \"reportAccess\",",
													"        \"dashboardAccess\",",
													"        \"feesAccess\",",
													"        \"violationTypePermissions\"",
													"      ],",
													"      \"properties\": {",
													"        \"id\": {",
													"          \"type\": \"integer\"",
													"        },",
													"        \"xerceId\": {",
													"          \"type\": \"integer\"",
													"        },",
													"        \"isActive\": {",
													"          \"type\": \"boolean\"",
													"        },",
													"        \"isProductAdmin\": {",
													"          \"type\": \"boolean\"",
													"        },",
													"        \"reportAccess\": {",
													"          \"type\": \"string\",",
													"          \"pattern\": \"\"",
													"        },",
													"        \"dashboardAccess\": {",
													"          \"type\": \"string\",",
													"          \"pattern\": \"\"",
													"        },",
													"        \"feesAccess\": {",
													"          \"type\": \"string\",",
													"          \"pattern\": \"\"",
													"        },",
													"        \"violationTypePermissions\": {",
													"          \"type\": \"array\",",
													"          \"items\": {",
													"            \"type\": \"object\",",
													"            \"required\": [",
													"              \"id\",",
													"              \"configXerceViolationTypeId\",",
													"              \"violationTypeAccess\"",
													"            ],",
													"            \"properties\": {",
													"              \"id\": {",
													"                \"type\": \"integer\"",
													"              },",
													"              \"configXerceViolationTypeId\": {",
													"                \"type\": \"integer\"",
													"              },",
													"              \"violationTypeAccess\": {",
													"                \"type\": \"string\",",
													"                \"pattern\": \"\"",
													"              }",
													"            }",
													"          }",
													"        }",
													"      }",
													"    }",
													"  }",
													"};",
													"",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test('Schema is valid', function() {",
													"  pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
													"",
													"});",
													"",
													"pm.test(\"Validate not active\", function () {",
													"    pm.expect(jsonData.isActive).to.eql(false);",
													"});",
													"",
													"pm.test(\"Validate if site admin\", function () {",
													"    pm.expect(jsonData.isSiteAdmin).to.eql(true);",
													"});",
													"",
													"pm.test(\"Validate if product admin\", function () {",
													"    pm.expect(jsonData.xerce.isProductAdmin).to.eql(true);",
													"});",
													"",
													"pm.test(\"Validate title\", function () {",
													"    pm.expect(jsonData.title).to.eql(\"Manager\");",
													"});",
													"",
													"pm.environment.set(\"siteproduct_inactive_id\",jsonData.id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{token_super_admin}}"
											},
											{
												"key": "",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"firstName\": \"Inactive\",\n  \"lastName\": \"Site + Product\",\n  \"email\": \"siteproductinactive@comcate.com\",\n  \"phone\": \"1234567890\",\n  \"title\": \"Manager\",\n  \"department\": \"Research\",\n  \"isActive\": false,\n  \"isSiteAdmin\": true,\n  \"xerce\": {\n    \"xerceId\": 4,\n    \"isActive\": true,\n    \"isProductAdmin\": true,\n    \"reportAccess\": \"NO_ACCESS\",\n    \"dashboardAccess\": \"SELF_DASHBOARD\",\n    \"feesAccess\": \"CAN_VOID\",\n    \"violationTypePermissions\": [\n      {\n        \"configXerceViolationTypeId\": {{violation_type_1}},\n        \"violationTypeAccess\": \"OVERWRITE\"\n      },\n      {\n        \"configXerceViolationTypeId\": {{violation_type_2}},\n        \"violationTypeAccess\": \"OVERWRITE\"\n      },\n      {\n        \"configXerceViolationTypeId\": {{violation_type_3}},\n        \"violationTypeAccess\": \"OVERWRITE\"\n      },\n      {\n        \"configXerceViolationTypeId\": {{violation_type_4}},\n        \"violationTypeAccess\": \"OVERWRITE\"\n      },\n      {\n        \"configXerceViolationTypeId\": {{violation_type_5}},\n        \"violationTypeAccess\": \"OVERWRITE\"\n      }\n    ]\n\t}\n  }"
										},
										"url": {
											"raw": "http://{{env}}/users",
											"protocol": "http",
											"host": [
												"{{env}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create User Site and Product Admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8e2bf230-8eef-4aac-8147-cf31c49a8d89",
												"exec": [
													"var expectedSchema = ",
													"{",
													"  \"definitions\": {},",
													"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
													"  \"$id\": \"http://example.com\",",
													"  \"type\": \"object\",",
													"  \"required\": [",
													"    \"id\",",
													"    \"firstName\",",
													"    \"lastName\",",
													"    \"email\",",
													"    \"phone\",",
													"    \"title\",",
													"    \"department\",",
													"    \"isActive\",",
													"    \"isSiteAdmin\",",
													"    \"xerce\"",
													"  ],",
													"  \"properties\": {",
													"    \"id\": {",
													"      \"type\": \"integer\"",
													"    },",
													"    \"firstName\": {",
													"      \"type\": \"string\",",
													"      \"pattern\": \"\"",
													"    },",
													"    \"lastName\": {",
													"      \"type\": \"string\",",
													"      \"pattern\": \"\"",
													"    },",
													"    \"email\": {",
													"      \"type\": \"string\",",
													"      \"pattern\": \"\"",
													"    },",
													"    \"phone\": {",
													"      \"type\": \"string\",",
													"      \"pattern\": \"\"",
													"    },",
													"    \"title\": {",
													"      \"type\": \"string\",",
													"      \"pattern\": \"\"",
													"    },",
													"    \"department\": {",
													"      \"type\": \"string\",",
													"      \"pattern\": \"\"",
													"    },",
													"    \"isActive\": {",
													"      \"type\": \"boolean\"",
													"    },",
													"    \"isSiteAdmin\": {",
													"      \"type\": \"boolean\"",
													"    },",
													"    \"xerce\": {",
													"      \"type\": \"object\",",
													"      \"required\": [",
													"        \"id\",",
													"        \"xerceId\",",
													"        \"isActive\",",
													"        \"isProductAdmin\",",
													"        \"reportAccess\",",
													"        \"dashboardAccess\",",
													"        \"feesAccess\",",
													"        \"violationTypePermissions\"",
													"      ],",
													"      \"properties\": {",
													"        \"id\": {",
													"          \"type\": \"integer\"",
													"        },",
													"        \"xerceId\": {",
													"          \"type\": \"integer\"",
													"        },",
													"        \"isActive\": {",
													"          \"type\": \"boolean\"",
													"        },",
													"        \"isProductAdmin\": {",
													"          \"type\": \"boolean\"",
													"        },",
													"        \"reportAccess\": {",
													"          \"type\": \"string\",",
													"          \"pattern\": \"\"",
													"        },",
													"        \"dashboardAccess\": {",
													"          \"type\": \"string\",",
													"          \"pattern\": \"\"",
													"        },",
													"        \"feesAccess\": {",
													"          \"type\": \"string\",",
													"          \"pattern\": \"\"",
													"        },",
													"        \"violationTypePermissions\": {",
													"          \"type\": \"array\",",
													"          \"items\": {",
													"            \"type\": \"object\",",
													"            \"required\": [",
													"              \"id\",",
													"              \"configXerceViolationTypeId\",",
													"              \"violationTypeAccess\"",
													"            ],",
													"            \"properties\": {",
													"              \"id\": {",
													"                \"type\": \"integer\"",
													"              },",
													"              \"configXerceViolationTypeId\": {",
													"                \"type\": \"integer\"",
													"              },",
													"              \"violationTypeAccess\": {",
													"                \"type\": \"string\",",
													"                \"pattern\": \"\"",
													"              }",
													"            }",
													"          }",
													"        }",
													"      }",
													"    }",
													"  }",
													"};",
													"",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test('Schema is valid', function() {",
													"  pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
													"",
													"});",
													"",
													"",
													"pm.test(\"Validate active\", function () {",
													"    pm.expect(jsonData.isActive).to.eql(true);",
													"});",
													"",
													"",
													"pm.test(\"Validate if site admin\", function () {",
													"    pm.expect(jsonData.isSiteAdmin).to.eql(true);",
													"});",
													"",
													"pm.test(\"Validate if product admin\", function () {",
													"    pm.expect(jsonData.xerce.isProductAdmin).to.eql(true);",
													"});",
													"",
													"pm.test(\"Validate if product active\", function () {",
													"    pm.expect(jsonData.xerce.isActive).to.eql(true);",
													"});",
													"",
													"pm.test(\"Validate report access\", function () {",
													"    pm.expect(jsonData.xerce.reportAccess).to.eql(\"NO_ACCESS\");",
													"});",
													"",
													"pm.test(\"Validate dashboard access\", function () {",
													"    pm.expect(jsonData.xerce.dashboardAccess).to.eql(\"SELF_DASHBOARD\");",
													"});",
													"",
													"",
													"pm.test(\"Validate fees access\", function () {",
													"    pm.expect(jsonData.xerce.feesAccess).to.eql(\"CAN_VOID\");",
													"});",
													"",
													"pm.test(\"Validate title\", function () {",
													"    pm.expect(jsonData.title).to.eql(\"Manager\");",
													"});",
													"",
													"pm.environment.set(\"siteproduct_active_id\",jsonData.id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{token_super_admin}}"
											},
											{
												"key": "",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"firstName\": \"Site\",\n  \"lastName\": \"Product\",\n  \"email\": \"siteproduct@velotio.com\",\n  \"phone\": \"1234567890\",\n  \"title\": \"Manager\",\n  \"department\": \"Research\",\n  \"isActive\": true,\n  \"isSiteAdmin\": true,\n  \"xerce\": {\n    \"xerceId\": 4,\n    \"isActive\": true,\n    \"isProductAdmin\": true,\n    \"reportAccess\": \"NO_ACCESS\",\n    \"dashboardAccess\": \"SELF_DASHBOARD\",\n    \"feesAccess\": \"CAN_VOID\",\n    \"violationTypePermissions\": [\n      {\n        \"configXerceViolationTypeId\": {{violation_type_1}},\n        \"violationTypeAccess\": \"OVERWRITE\"\n      },\n      {\n        \"configXerceViolationTypeId\": {{violation_type_2}},\n        \"violationTypeAccess\": \"OVERWRITE\"\n      },\n      {\n        \"configXerceViolationTypeId\": {{violation_type_3}},\n        \"violationTypeAccess\": \"OVERWRITE\"\n      },\n      {\n        \"configXerceViolationTypeId\": {{violation_type_4}},\n        \"violationTypeAccess\": \"OVERWRITE\"\n      },\n      {\n        \"configXerceViolationTypeId\": {{violation_type_5}},\n        \"violationTypeAccess\": \"OVERWRITE\"\n      }\n    ]\n\t}\n  }"
										},
										"url": {
											"raw": "http://{{env}}/users",
											"protocol": "http",
											"host": [
												"{{env}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create User Site and Product Admin - Inactive Agency",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5596de80-c10a-4aa5-8d29-0666604effb9",
												"type": "text/javascript",
												"exec": [
													"var expectedSchema = ",
													"{",
													"  \"definitions\": {},",
													"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
													"  \"$id\": \"http://example.com\",",
													"  \"type\": \"object\",",
													"  \"required\": [",
													"    \"id\",",
													"    \"firstName\",",
													"    \"lastName\",",
													"    \"email\",",
													"    \"phone\",",
													"    \"title\",",
													"    \"department\",",
													"    \"isActive\",",
													"    \"isSiteAdmin\",",
													"    \"xerce\"",
													"  ],",
													"  \"properties\": {",
													"    \"id\": {",
													"      \"type\": \"integer\"",
													"    },",
													"    \"firstName\": {",
													"      \"type\": \"string\",",
													"      \"pattern\": \"\"",
													"    },",
													"    \"lastName\": {",
													"      \"type\": \"string\",",
													"      \"pattern\": \"\"",
													"    },",
													"    \"email\": {",
													"      \"type\": \"string\",",
													"      \"pattern\": \"\"",
													"    },",
													"    \"phone\": {",
													"      \"type\": \"string\",",
													"      \"pattern\": \"\"",
													"    },",
													"    \"title\": {",
													"      \"type\": \"string\",",
													"      \"pattern\": \"\"",
													"    },",
													"    \"department\": {",
													"      \"type\": \"string\",",
													"      \"pattern\": \"\"",
													"    },",
													"    \"isActive\": {",
													"      \"type\": \"boolean\"",
													"    },",
													"    \"isSiteAdmin\": {",
													"      \"type\": \"boolean\"",
													"    },",
													"    \"xerce\": {",
													"      \"type\": \"object\",",
													"      \"required\": [",
													"        \"id\",",
													"        \"xerceId\",",
													"        \"isActive\",",
													"        \"isProductAdmin\",",
													"        \"reportAccess\",",
													"        \"dashboardAccess\",",
													"        \"feesAccess\",",
													"        \"violationTypePermissions\"",
													"      ],",
													"      \"properties\": {",
													"        \"id\": {",
													"          \"type\": \"integer\"",
													"        },",
													"        \"xerceId\": {",
													"          \"type\": \"integer\"",
													"        },",
													"        \"isActive\": {",
													"          \"type\": \"boolean\"",
													"        },",
													"        \"isProductAdmin\": {",
													"          \"type\": \"boolean\"",
													"        },",
													"        \"reportAccess\": {",
													"          \"type\": \"string\",",
													"          \"pattern\": \"\"",
													"        },",
													"        \"dashboardAccess\": {",
													"          \"type\": \"string\",",
													"          \"pattern\": \"\"",
													"        },",
													"        \"feesAccess\": {",
													"          \"type\": \"string\",",
													"          \"pattern\": \"\"",
													"        },",
													"        \"violationTypePermissions\": {",
													"          \"type\": \"array\",",
													"          \"items\": {",
													"            \"type\": \"object\",",
													"            \"required\": [",
													"              \"id\",",
													"              \"configXerceViolationTypeId\",",
													"              \"violationTypeAccess\"",
													"            ],",
													"            \"properties\": {",
													"              \"id\": {",
													"                \"type\": \"integer\"",
													"              },",
													"              \"configXerceViolationTypeId\": {",
													"                \"type\": \"integer\"",
													"              },",
													"              \"violationTypeAccess\": {",
													"                \"type\": \"string\",",
													"                \"pattern\": \"\"",
													"              }",
													"            }",
													"          }",
													"        }",
													"      }",
													"    }",
													"  }",
													"};",
													"",
													"",
													"//var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"//pm.test('Schema is valid', function() {",
													"//  pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
													"  ",
													"//});",
													"",
													"pm.test(\"Response time is less than timeout\", function () {",
													"    pm.expect(pm.response.responseTime < pm.environment.get(\"timeout\"));",
													"});",
													"",
													"pm.test(\"Response shows UnauthorisedError\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"UnauthorizedError: jwt malformed\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{token_super_admin_inactive}}"
											},
											{
												"key": "",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"firstName\": \"Site\",\n  \"lastName\": \"Product\",\n  \"email\": \"siteproduct@comcate.com\",\n  \"phone\": \"1234567890\",\n  \"title\": \"Manager\",\n  \"department\": \"Research\",\n  \"isActive\": true,\n  \"isSiteAdmin\": true,\n  \"xerce\": {\n    \"xerceId\": 5,\n    \"isActive\": true,\n    \"isProductAdmin\": true,\n    \"reportAccess\": \"NO_ACCESS\",\n    \"dashboardAccess\": \"SELF_DASHBOARD\",\n    \"feesAccess\": \"CAN_VOID\",\n    \"violationTypePermissions\": [\n      {\n        \"configXerceViolationTypeId\": 14,\n        \"violationTypeAccess\": \"READ_ONLY\"\n      }\n    ]\n\t}\n  }"
										},
										"url": {
											"raw": "http://{{env}}/users",
											"protocol": "http",
											"host": [
												"{{env}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create User Site Admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "96a97141-93f2-4889-bca5-79d4d91b9609",
												"exec": [
													"var expectedSchema = ",
													"{",
													"  \"definitions\": {},",
													"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
													"  \"$id\": \"http://example.com\",",
													"  \"type\": \"object\",",
													"  \"required\": [",
													"    \"id\",",
													"    \"firstName\",",
													"    \"lastName\",",
													"    \"email\",",
													"    \"phone\",",
													"    \"title\",",
													"    \"department\",",
													"    \"isActive\",",
													"    \"isSiteAdmin\",",
													"    \"xerce\"",
													"  ],",
													"  \"properties\": {",
													"    \"id\": {",
													"      \"type\": \"integer\"",
													"    },",
													"    \"firstName\": {",
													"      \"type\": \"string\",",
													"      \"pattern\": \"\"",
													"    },",
													"    \"lastName\": {",
													"      \"type\": \"string\",",
													"      \"pattern\": \"\"",
													"    },",
													"    \"email\": {",
													"      \"type\": \"string\",",
													"      \"pattern\": \"\"",
													"    },",
													"    \"phone\": {",
													"      \"type\": \"string\",",
													"      \"pattern\": \"\"",
													"    },",
													"    \"title\": {",
													"      \"type\": \"string\",",
													"      \"pattern\": \"\"",
													"    },",
													"    \"department\": {",
													"      \"type\": \"string\",",
													"      \"pattern\": \"\"",
													"    },",
													"    \"isActive\": {",
													"      \"type\": \"boolean\"",
													"    },",
													"    \"isSiteAdmin\": {",
													"      \"type\": \"boolean\"",
													"    },",
													"    \"xerce\": {",
													"      \"type\": \"object\",",
													"      \"required\": [",
													"        \"id\",",
													"        \"xerceId\",",
													"        \"isActive\",",
													"        \"isProductAdmin\",",
													"        \"reportAccess\",",
													"        \"dashboardAccess\",",
													"        \"feesAccess\",",
													"        \"violationTypePermissions\"",
													"      ],",
													"      \"properties\": {",
													"        \"id\": {",
													"          \"type\": \"integer\"",
													"        },",
													"        \"xerceId\": {",
													"          \"type\": \"integer\"",
													"        },",
													"        \"isActive\": {",
													"          \"type\": \"boolean\"",
													"        },",
													"        \"isProductAdmin\": {",
													"          \"type\": \"boolean\"",
													"        },",
													"        \"reportAccess\": {",
													"          \"type\": \"string\",",
													"          \"pattern\": \"\"",
													"        },",
													"        \"dashboardAccess\": {",
													"          \"type\": \"string\",",
													"          \"pattern\": \"\"",
													"        },",
													"        \"feesAccess\": {",
													"          \"type\": \"string\",",
													"          \"pattern\": \"\"",
													"        },",
													"        \"violationTypePermissions\": {",
													"          \"type\": \"array\",",
													"          \"items\": {",
													"            \"type\": \"object\",",
													"            \"required\": [",
													"              \"id\",",
													"              \"configXerceViolationTypeId\",",
													"              \"violationTypeAccess\"",
													"            ],",
													"            \"properties\": {",
													"              \"id\": {",
													"                \"type\": \"integer\"",
													"              },",
													"              \"configXerceViolationTypeId\": {",
													"                \"type\": \"integer\"",
													"              },",
													"              \"violationTypeAccess\": {",
													"                \"type\": \"string\",",
													"                \"pattern\": \"\"",
													"              }",
													"            }",
													"          }",
													"        }",
													"      }",
													"    }",
													"  }",
													"};",
													"",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test('Schema is valid', function() {",
													"  pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
													"",
													"});",
													"",
													"pm.test(\"Validate if site admin\", function () {",
													"    pm.expect(jsonData.isSiteAdmin).to.eql(true);",
													"});",
													"",
													"pm.test(\"Validate if product admin\", function () {",
													"    pm.expect(jsonData.xerce.isProductAdmin).to.eql(false);",
													"});",
													"",
													"pm.test(\"Validate title\", function () {",
													"    pm.expect(jsonData.title).to.eql(\"Manager\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{token_super_admin}}"
											},
											{
												"key": "",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"firstName\": \"Site\",\n  \"lastName\": \"Only\",\n  \"email\": \"site@comcate.com\",\n  \"phone\": \"12345\",\n  \"title\": \"Manager\",\n  \"department\": \"Research\",\n  \"isActive\": true,\n  \"isSiteAdmin\": true,\n  \"xerce\": {\n    \"xerceId\": 4,\n    \"isActive\": true,\n    \"isProductAdmin\": false,\n    \"reportAccess\": \"NO_ACCESS\",\n    \"dashboardAccess\": \"SELF_DASHBOARD\",\n    \"feesAccess\": \"CAN_VOID\",\n    \"violationTypePermissions\": [\n      {\n        \"configXerceViolationTypeId\": {{violation_type_1}},\n        \"violationTypeAccess\": \"READ_ONLY\"\n      },\n      {\n        \"configXerceViolationTypeId\": {{violation_type_2}},\n        \"violationTypeAccess\": \"READ_ONLY\"\n      },\n      {\n        \"configXerceViolationTypeId\": {{violation_type_3}},\n        \"violationTypeAccess\": \"READ_ONLY\"\n      },\n      {\n        \"configXerceViolationTypeId\": {{violation_type_4}},\n        \"violationTypeAccess\": \"READ_ONLY\"\n      },\n      {\n        \"configXerceViolationTypeId\": {{violation_type_5}},\n        \"violationTypeAccess\": \"READ_ONLY\"\n      }\n    ]\n\t}\n  }"
										},
										"url": {
											"raw": "http://{{env}}/users",
											"protocol": "http",
											"host": [
												"{{env}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create User - Phone Number Test More than 30 chars",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "11496a2b-7087-4811-8592-0d834a47e3c6",
												"exec": [
													"",
													"",
													"var jsonData = pm.response.json();",
													"",
													"",
													"pm.test(\"Validate phone\", function () {",
													"    pm.expect(jsonData.message).to.include(\"Invalid argument phone. String is too long (51 chars), maximum 30\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{token_super_admin}}"
											},
											{
												"key": "",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"firstName\": \"Site\",\n  \"lastName\": \"Only\",\n  \"email\": \"sitephonecheck@comcate.com\",\n  \"phone\": \"123451234501212121212121212121212121212121212121212\",\n  \"title\": \"Manager\",\n  \"department\": \"Research\",\n  \"isActive\": true,\n  \"isSiteAdmin\": true,\n  \"xerce\": {\n    \"xerceId\": 4,\n    \"isActive\": true,\n    \"isProductAdmin\": false,\n    \"reportAccess\": \"NO_ACCESS\",\n    \"dashboardAccess\": \"SELF_DASHBOARD\",\n    \"feesAccess\": \"CAN_VOID\",\n    \"violationTypePermissions\": [\n      {\n        \"configXerceViolationTypeId\": 13,\n        \"violationTypeAccess\": \"READ_ONLY\"\n      }\n    ]\n\t}\n  }"
										},
										"url": {
											"raw": "http://{{env}}/users",
											"protocol": "http",
											"host": [
												"{{env}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create User - Phone Number Test No chars",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4078432a-4097-4b5e-ae3b-f6138f452c5d",
												"exec": [
													"var expectedSchema = ",
													"{",
													"  \"definitions\": {},",
													"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
													"  \"$id\": \"http://example.com\",",
													"  \"type\": \"object\",",
													"  \"required\": [",
													"    \"id\",",
													"    \"firstName\",",
													"    \"lastName\",",
													"    \"email\",",
													"    \"title\",",
													"    \"department\",",
													"    \"isActive\",",
													"    \"isSiteAdmin\",",
													"    \"xerce\"",
													"  ],",
													"  \"properties\": {",
													"    \"id\": {",
													"      \"type\": \"integer\"",
													"    },",
													"    \"firstName\": {",
													"      \"type\": \"string\",",
													"      \"pattern\": \"\"",
													"    },",
													"    \"lastName\": {",
													"      \"type\": \"string\",",
													"      \"pattern\": \"\"",
													"    },",
													"    \"email\": {",
													"      \"type\": \"string\",",
													"      \"pattern\": \"\"",
													"    },",
													"    \"title\": {",
													"      \"type\": \"string\",",
													"      \"pattern\": \"\"",
													"    },",
													"    \"department\": {",
													"      \"type\": \"string\",",
													"      \"pattern\": \"\"",
													"    },",
													"    \"isActive\": {",
													"      \"type\": \"boolean\"",
													"    },",
													"    \"isSiteAdmin\": {",
													"      \"type\": \"boolean\"",
													"    },",
													"    \"xerce\": {",
													"      \"type\": \"object\",",
													"      \"required\": [",
													"        \"id\",",
													"        \"xerceId\",",
													"        \"isActive\",",
													"        \"isProductAdmin\",",
													"        \"reportAccess\",",
													"        \"dashboardAccess\",",
													"        \"feesAccess\",",
													"        \"violationTypePermissions\"",
													"      ],",
													"      \"properties\": {",
													"        \"id\": {",
													"          \"type\": \"integer\"",
													"        },",
													"        \"xerceId\": {",
													"          \"type\": \"integer\"",
													"        },",
													"        \"isActive\": {",
													"          \"type\": \"boolean\"",
													"        },",
													"        \"isProductAdmin\": {",
													"          \"type\": \"boolean\"",
													"        },",
													"        \"reportAccess\": {",
													"          \"type\": \"string\",",
													"          \"pattern\": \"\"",
													"        },",
													"        \"dashboardAccess\": {",
													"          \"type\": \"string\",",
													"          \"pattern\": \"\"",
													"        },",
													"        \"feesAccess\": {",
													"          \"type\": \"string\",",
													"          \"pattern\": \"\"",
													"        },",
													"        \"violationTypePermissions\": {",
													"          \"type\": \"array\",",
													"          \"items\": {",
													"            \"type\": \"object\",",
													"            \"required\": [",
													"              \"id\",",
													"              \"configXerceViolationTypeId\",",
													"              \"violationTypeAccess\"",
													"            ],",
													"            \"properties\": {",
													"              \"id\": {",
													"                \"type\": \"integer\"",
													"              },",
													"              \"configXerceViolationTypeId\": {",
													"                \"type\": \"integer\"",
													"              },",
													"              \"violationTypeAccess\": {",
													"                \"type\": \"string\",",
													"                \"pattern\": \"\"",
													"              }",
													"            }",
													"          }",
													"        }",
													"      }",
													"    }",
													"  }",
													"};",
													"",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test('Schema is valid', function() {",
													"  pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
													"",
													"});",
													"",
													"",
													"pm.test(\"Validate active\", function () {",
													"    pm.expect(jsonData.isActive).to.eql(true);",
													"});",
													"",
													"",
													"pm.test(\"Validate if site admin\", function () {",
													"    pm.expect(jsonData.isSiteAdmin).to.eql(true);",
													"});",
													"",
													"pm.test(\"Validate if product admin\", function () {",
													"    pm.expect(jsonData.xerce.isProductAdmin).to.eql(false);",
													"});",
													"",
													"pm.test(\"Validate if product active\", function () {",
													"    pm.expect(jsonData.xerce.isActive).to.eql(true);",
													"});",
													"",
													"pm.test(\"Validate report access\", function () {",
													"    pm.expect(jsonData.xerce.reportAccess).to.eql(\"NO_ACCESS\");",
													"});",
													"",
													"pm.test(\"Validate dashboard access\", function () {",
													"    pm.expect(jsonData.xerce.dashboardAccess).to.eql(\"SELF_DASHBOARD\");",
													"});",
													"",
													"",
													"pm.test(\"Validate fees access\", function () {",
													"    pm.expect(jsonData.xerce.feesAccess).to.eql(\"CAN_VOID\");",
													"});",
													"",
													"pm.test(\"Validate title\", function () {",
													"    pm.expect(jsonData.title).to.eql(\"Manager\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{token_super_admin}}"
											},
											{
												"key": "",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"firstName\": \"Site\",\n  \"lastName\": \"No Phone\",\n  \"email\": \"sitephonecheck@comcate.com\",\n  \"phone\": \"\",\n  \"title\": \"Manager\",\n  \"department\": \"Research\",\n  \"isActive\": true,\n  \"isSiteAdmin\": true,\n  \"xerce\": {\n    \"xerceId\": 4,\n    \"isActive\": true,\n    \"isProductAdmin\": false,\n    \"reportAccess\": \"NO_ACCESS\",\n    \"dashboardAccess\": \"SELF_DASHBOARD\",\n    \"feesAccess\": \"CAN_VOID\",\n    \"violationTypePermissions\": [\n      {\n        \"configXerceViolationTypeId\": {{violation_type_1}},\n        \"violationTypeAccess\": \"OVERWRITE\"\n      },\n      {\n        \"configXerceViolationTypeId\": {{violation_type_2}},\n        \"violationTypeAccess\": \"OVERWRITE\"\n      },\n      {\n        \"configXerceViolationTypeId\": {{violation_type_3}},\n        \"violationTypeAccess\": \"OVERWRITE\"\n      },\n      {\n        \"configXerceViolationTypeId\": {{violation_type_4}},\n        \"violationTypeAccess\": \"OVERWRITE\"\n      },\n      {\n        \"configXerceViolationTypeId\": {{violation_type_5}},\n        \"violationTypeAccess\": \"OVERWRITE\"\n      }\n    ]\n\t}\n  }"
										},
										"url": {
											"raw": "http://{{env}}/users",
											"protocol": "http",
											"host": [
												"{{env}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create User Site Admin - Inactive Agency",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0c206cfd-079e-4091-aaba-a8e86e749443",
												"type": "text/javascript",
												"exec": [
													"var expectedSchema = ",
													"{",
													"  \"definitions\": {},",
													"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
													"  \"$id\": \"http://example.com\",",
													"  \"type\": \"object\",",
													"  \"required\": [",
													"    \"id\",",
													"    \"firstName\",",
													"    \"lastName\",",
													"    \"email\",",
													"    \"phone\",",
													"    \"title\",",
													"    \"department\",",
													"    \"isActive\",",
													"    \"isSiteAdmin\",",
													"    \"xerce\"",
													"  ],",
													"  \"properties\": {",
													"    \"id\": {",
													"      \"type\": \"integer\"",
													"    },",
													"    \"firstName\": {",
													"      \"type\": \"string\",",
													"      \"pattern\": \"\"",
													"    },",
													"    \"lastName\": {",
													"      \"type\": \"string\",",
													"      \"pattern\": \"\"",
													"    },",
													"    \"email\": {",
													"      \"type\": \"string\",",
													"      \"pattern\": \"\"",
													"    },",
													"    \"phone\": {",
													"      \"type\": \"string\",",
													"      \"pattern\": \"\"",
													"    },",
													"    \"title\": {",
													"      \"type\": \"string\",",
													"      \"pattern\": \"\"",
													"    },",
													"    \"department\": {",
													"      \"type\": \"string\",",
													"      \"pattern\": \"\"",
													"    },",
													"    \"isActive\": {",
													"      \"type\": \"boolean\"",
													"    },",
													"    \"isSiteAdmin\": {",
													"      \"type\": \"boolean\"",
													"    },",
													"    \"xerce\": {",
													"      \"type\": \"object\",",
													"      \"required\": [",
													"        \"id\",",
													"        \"xerceId\",",
													"        \"isActive\",",
													"        \"isProductAdmin\",",
													"        \"reportAccess\",",
													"        \"dashboardAccess\",",
													"        \"feesAccess\",",
													"        \"violationTypePermissions\"",
													"      ],",
													"      \"properties\": {",
													"        \"id\": {",
													"          \"type\": \"integer\"",
													"        },",
													"        \"xerceId\": {",
													"          \"type\": \"integer\"",
													"        },",
													"        \"isActive\": {",
													"          \"type\": \"boolean\"",
													"        },",
													"        \"isProductAdmin\": {",
													"          \"type\": \"boolean\"",
													"        },",
													"        \"reportAccess\": {",
													"          \"type\": \"string\",",
													"          \"pattern\": \"\"",
													"        },",
													"        \"dashboardAccess\": {",
													"          \"type\": \"string\",",
													"          \"pattern\": \"\"",
													"        },",
													"        \"feesAccess\": {",
													"          \"type\": \"string\",",
													"          \"pattern\": \"\"",
													"        },",
													"        \"violationTypePermissions\": {",
													"          \"type\": \"array\",",
													"          \"items\": {",
													"            \"type\": \"object\",",
													"            \"required\": [",
													"              \"id\",",
													"              \"configXerceViolationTypeId\",",
													"              \"violationTypeAccess\"",
													"            ],",
													"            \"properties\": {",
													"              \"id\": {",
													"                \"type\": \"integer\"",
													"              },",
													"              \"configXerceViolationTypeId\": {",
													"                \"type\": \"integer\"",
													"              },",
													"              \"violationTypeAccess\": {",
													"                \"type\": \"string\",",
													"                \"pattern\": \"\"",
													"              }",
													"            }",
													"          }",
													"        }",
													"      }",
													"    }",
													"  }",
													"};",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"//pm.test('Schema is valid', function() {",
													"//  pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
													"  ",
													"//});",
													"",
													"pm.test(\"Response time is less than timeout\", function () {",
													"    pm.expect(pm.response.responseTime < pm.environment.get(\"timeout\"));",
													"});",
													"",
													"pm.test(\"Response shows UnauthorisedError\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"UnauthorizedError: jwt malformed\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{token_super_admin_inactive}}"
											},
											{
												"key": "",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"firstName\": \"Site\",\n  \"lastName\": \"Only\",\n  \"email\": \"site@comcate.com\",\n  \"phone\": \"12345\",\n  \"title\": \"Manager\",\n  \"department\": \"Research\",\n  \"isActive\": true,\n  \"isSiteAdmin\": true,\n  \"xerce\": {\n    \"xerceId\": 5,\n    \"isActive\": true,\n    \"isProductAdmin\": false,\n    \"reportAccess\": \"NO_ACCESS\",\n    \"dashboardAccess\": \"SELF_DASHBOARD\",\n    \"feesAccess\": \"CAN_VOID\",\n    \"violationTypePermissions\": [\n      {\n        \"configXerceViolationTypeId\": 14,\n        \"violationTypeAccess\": \"READ_ONLY\"\n      }\n    ]\n\t}\n  }"
										},
										"url": {
											"raw": "http://{{env}}/users",
											"protocol": "http",
											"host": [
												"{{env}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create User No Access",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "05749b2f-ba1e-4333-82af-9b84ec06d5e2",
												"exec": [
													"var expectedSchema = ",
													"{",
													"  \"definitions\": {},",
													"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
													"  \"$id\": \"http://example.com\",",
													"  \"type\": \"object\",",
													"  \"required\": [",
													"    \"id\",",
													"    \"firstName\",",
													"    \"lastName\",",
													"    \"email\",",
													"    \"phone\",",
													"    \"title\",",
													"    \"department\",",
													"    \"isActive\",",
													"    \"isSiteAdmin\",",
													"    \"xerce\"",
													"  ],",
													"  \"properties\": {",
													"    \"id\": {",
													"      \"type\": \"integer\"",
													"    },",
													"    \"firstName\": {",
													"      \"type\": \"string\",",
													"      \"pattern\": \"\"",
													"    },",
													"    \"lastName\": {",
													"      \"type\": \"string\",",
													"      \"pattern\": \"\"",
													"    },",
													"    \"email\": {",
													"      \"type\": \"string\",",
													"      \"pattern\": \"\"",
													"    },",
													"    \"phone\": {",
													"      \"type\": \"string\",",
													"      \"pattern\": \"\"",
													"    },",
													"    \"title\": {",
													"      \"type\": \"string\",",
													"      \"pattern\": \"\"",
													"    },",
													"    \"department\": {",
													"      \"type\": \"string\",",
													"      \"pattern\": \"\"",
													"    },",
													"    \"isActive\": {",
													"      \"type\": \"boolean\"",
													"    },",
													"    \"isSiteAdmin\": {",
													"      \"type\": \"boolean\"",
													"    },",
													"    \"xerce\": {",
													"      \"type\": \"object\",",
													"      \"required\": [",
													"        \"id\",",
													"        \"xerceId\",",
													"        \"isActive\",",
													"        \"isProductAdmin\",",
													"        \"reportAccess\",",
													"        \"dashboardAccess\",",
													"        \"feesAccess\",",
													"        \"violationTypePermissions\"",
													"      ],",
													"      \"properties\": {",
													"        \"id\": {",
													"          \"type\": \"integer\"",
													"        },",
													"        \"xerceId\": {",
													"          \"type\": \"integer\"",
													"        },",
													"        \"isActive\": {",
													"          \"type\": \"boolean\"",
													"        },",
													"        \"isProductAdmin\": {",
													"          \"type\": \"boolean\"",
													"        },",
													"        \"reportAccess\": {",
													"          \"type\": \"string\",",
													"          \"pattern\": \"\"",
													"        },",
													"        \"dashboardAccess\": {",
													"          \"type\": \"string\",",
													"          \"pattern\": \"\"",
													"        },",
													"        \"feesAccess\": {",
													"          \"type\": \"string\",",
													"          \"pattern\": \"\"",
													"        },",
													"        \"violationTypePermissions\": {",
													"          \"type\": \"array\",",
													"          \"items\": {",
													"            \"type\": \"object\",",
													"            \"required\": [",
													"              \"id\",",
													"              \"configXerceViolationTypeId\",",
													"              \"violationTypeAccess\"",
													"            ],",
													"            \"properties\": {",
													"              \"id\": {",
													"                \"type\": \"integer\"",
													"              },",
													"              \"configXerceViolationTypeId\": {",
													"                \"type\": \"integer\"",
													"              },",
													"              \"violationTypeAccess\": {",
													"                \"type\": \"string\",",
													"                \"pattern\": \"\"",
													"              }",
													"            }",
													"          }",
													"        }",
													"      }",
													"    }",
													"  }",
													"};",
													"",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test('Schema is valid', function() {",
													"  pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
													"",
													"});",
													"",
													"pm.test(\"Validate if site admin\", function () {",
													"    pm.expect(jsonData.isSiteAdmin).to.eql(false);",
													"});",
													"",
													"pm.test(\"Validate if product admin\", function () {",
													"    pm.expect(jsonData.xerce.isProductAdmin).to.eql(false);",
													"});",
													"",
													"pm.test(\"Validate title\", function () {",
													"    pm.expect(jsonData.title).to.eql(\"Subordinate\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{token_super_admin}}"
											},
											{
												"key": "",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"firstName\": \"No\",\n  \"lastName\": \"Access\",\n  \"email\": \"noaccess@comcate.com\",\n  \"phone\": \"9898989898\",\n  \"title\": \"Subordinate\",\n  \"department\": \"Frontdesk\",\n  \"isActive\": true,\n  \"isSiteAdmin\": false,\n  \"xerce\": {\n    \"xerceId\": 4,\n    \"isActive\": true,\n    \"isProductAdmin\": false,\n    \"reportAccess\": \"NO_ACCESS\",\n    \"dashboardAccess\": \"SELF_DASHBOARD\",\n    \"feesAccess\": \"CANT_VOID\",\n    \"violationTypePermissions\": [\n      {\n        \"configXerceViolationTypeId\": {{violation_type_1}},\n        \"violationTypeAccess\": \"READ_ONLY\"\n      },\n      {\n        \"configXerceViolationTypeId\": {{violation_type_2}},\n        \"violationTypeAccess\": \"READ_ONLY\"\n      },\n      {\n        \"configXerceViolationTypeId\": {{violation_type_3}},\n        \"violationTypeAccess\": \"READ_ONLY\"\n      },\n      {\n        \"configXerceViolationTypeId\": {{violation_type_4}},\n        \"violationTypeAccess\": \"READ_ONLY\"\n      },\n      {\n        \"configXerceViolationTypeId\": {{violation_type_5}},\n        \"violationTypeAccess\": \"READ_ONLY\"\n      }\n    ]\n\t}\n  }"
										},
										"url": {
											"raw": "http://{{env}}/users",
											"protocol": "http",
											"host": [
												"{{env}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create User No Access - Inactive Agency",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8cf949d5-8f91-4000-97d6-bd2f866ea82e",
												"type": "text/javascript",
												"exec": [
													"var expectedSchema = ",
													"{",
													"  \"definitions\": {},",
													"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
													"  \"$id\": \"http://example.com\",",
													"  \"type\": \"object\",",
													"  \"required\": [",
													"    \"id\",",
													"    \"firstName\",",
													"    \"lastName\",",
													"    \"email\",",
													"    \"phone\",",
													"    \"title\",",
													"    \"department\",",
													"    \"isActive\",",
													"    \"isSiteAdmin\",",
													"    \"xerce\"",
													"  ],",
													"  \"properties\": {",
													"    \"id\": {",
													"      \"type\": \"integer\"",
													"    },",
													"    \"firstName\": {",
													"      \"type\": \"string\",",
													"      \"pattern\": \"\"",
													"    },",
													"    \"lastName\": {",
													"      \"type\": \"string\",",
													"      \"pattern\": \"\"",
													"    },",
													"    \"email\": {",
													"      \"type\": \"string\",",
													"      \"pattern\": \"\"",
													"    },",
													"    \"phone\": {",
													"      \"type\": \"string\",",
													"      \"pattern\": \"\"",
													"    },",
													"    \"title\": {",
													"      \"type\": \"string\",",
													"      \"pattern\": \"\"",
													"    },",
													"    \"department\": {",
													"      \"type\": \"string\",",
													"      \"pattern\": \"\"",
													"    },",
													"    \"isActive\": {",
													"      \"type\": \"boolean\"",
													"    },",
													"    \"isSiteAdmin\": {",
													"      \"type\": \"boolean\"",
													"    },",
													"    \"xerce\": {",
													"      \"type\": \"object\",",
													"      \"required\": [",
													"        \"id\",",
													"        \"xerceId\",",
													"        \"isActive\",",
													"        \"isProductAdmin\",",
													"        \"reportAccess\",",
													"        \"dashboardAccess\",",
													"        \"feesAccess\",",
													"        \"violationTypePermissions\"",
													"      ],",
													"      \"properties\": {",
													"        \"id\": {",
													"          \"type\": \"integer\"",
													"        },",
													"        \"xerceId\": {",
													"          \"type\": \"integer\"",
													"        },",
													"        \"isActive\": {",
													"          \"type\": \"boolean\"",
													"        },",
													"        \"isProductAdmin\": {",
													"          \"type\": \"boolean\"",
													"        },",
													"        \"reportAccess\": {",
													"          \"type\": \"string\",",
													"          \"pattern\": \"\"",
													"        },",
													"        \"dashboardAccess\": {",
													"          \"type\": \"string\",",
													"          \"pattern\": \"\"",
													"        },",
													"        \"feesAccess\": {",
													"          \"type\": \"string\",",
													"          \"pattern\": \"\"",
													"        },",
													"        \"violationTypePermissions\": {",
													"          \"type\": \"array\",",
													"          \"items\": {",
													"            \"type\": \"object\",",
													"            \"required\": [",
													"              \"id\",",
													"              \"configXerceViolationTypeId\",",
													"              \"violationTypeAccess\"",
													"            ],",
													"            \"properties\": {",
													"              \"id\": {",
													"                \"type\": \"integer\"",
													"              },",
													"              \"configXerceViolationTypeId\": {",
													"                \"type\": \"integer\"",
													"              },",
													"              \"violationTypeAccess\": {",
													"                \"type\": \"string\",",
													"                \"pattern\": \"\"",
													"              }",
													"            }",
													"          }",
													"        }",
													"      }",
													"    }",
													"  }",
													"};",
													"",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"//pm.test('Schema is valid', function() {",
													"//  pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
													"  ",
													"//});",
													"",
													"pm.test(\"Response time is less than timeout\", function () {",
													"    pm.expect(pm.response.responseTime < pm.environment.get(\"timeout\"));",
													"});",
													"",
													"pm.test(\"Response shows UnauthorisedError\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"UnauthorizedError: jwt malformed\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{token_super_admin_inactive}}"
											},
											{
												"key": "",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"firstName\": \"No\",\n  \"lastName\": \"Access\",\n  \"email\": \"noaccess@comcate.com\",\n  \"phone\": \"9898989898\",\n  \"title\": \"Subordinate\",\n  \"department\": \"Frontdesk\",\n  \"isActive\": true,\n  \"isSiteAdmin\": false,\n  \"xerce\": {\n    \"xerceId\": 5,\n    \"isActive\": true,\n    \"isProductAdmin\": false,\n    \"reportAccess\": \"NO_ACCESS\",\n    \"dashboardAccess\": \"SELF_DASHBOARD\",\n    \"feesAccess\": \"CANT_VOID\",\n    \"violationTypePermissions\": [\n      {\n        \"configXerceViolationTypeId\": 14,\n        \"violationTypeAccess\": \"READ_ONLY\"\n      }\n    ]\n\t}\n  }"
										},
										"url": {
											"raw": "http://{{env}}/users",
											"protocol": "http",
											"host": [
												"{{env}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create User Product Admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0c274940-937c-402b-8d7a-bf692844d9b3",
												"exec": [
													"var expectedSchema = ",
													"{",
													"  \"definitions\": {},",
													"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
													"  \"$id\": \"http://example.com\",",
													"  \"type\": \"object\",",
													"  \"required\": [",
													"    \"id\",",
													"    \"firstName\",",
													"    \"lastName\",",
													"    \"email\",",
													"    \"phone\",",
													"    \"title\",",
													"    \"department\",",
													"    \"isActive\",",
													"    \"isSiteAdmin\",",
													"    \"xerce\"",
													"  ],",
													"  \"properties\": {",
													"    \"id\": {",
													"      \"type\": \"integer\"",
													"    },",
													"    \"firstName\": {",
													"      \"type\": \"string\",",
													"      \"pattern\": \"\"",
													"    },",
													"    \"lastName\": {",
													"      \"type\": \"string\",",
													"      \"pattern\": \"\"",
													"    },",
													"    \"email\": {",
													"      \"type\": \"string\",",
													"      \"pattern\": \"\"",
													"    },",
													"    \"phone\": {",
													"      \"type\": \"string\",",
													"      \"pattern\": \"\"",
													"    },",
													"    \"title\": {",
													"      \"type\": \"string\",",
													"      \"pattern\": \"\"",
													"    },",
													"    \"department\": {",
													"      \"type\": \"string\",",
													"      \"pattern\": \"\"",
													"    },",
													"    \"isActive\": {",
													"      \"type\": \"boolean\"",
													"    },",
													"    \"isSiteAdmin\": {",
													"      \"type\": \"boolean\"",
													"    },",
													"    \"xerce\": {",
													"      \"type\": \"object\",",
													"      \"required\": [",
													"        \"id\",",
													"        \"xerceId\",",
													"        \"isActive\",",
													"        \"isProductAdmin\",",
													"        \"reportAccess\",",
													"        \"dashboardAccess\",",
													"        \"feesAccess\",",
													"        \"violationTypePermissions\"",
													"      ],",
													"      \"properties\": {",
													"        \"id\": {",
													"          \"type\": \"integer\"",
													"        },",
													"        \"xerceId\": {",
													"          \"type\": \"integer\"",
													"        },",
													"        \"isActive\": {",
													"          \"type\": \"boolean\"",
													"        },",
													"        \"isProductAdmin\": {",
													"          \"type\": \"boolean\"",
													"        },",
													"        \"reportAccess\": {",
													"          \"type\": \"string\",",
													"          \"pattern\": \"\"",
													"        },",
													"        \"dashboardAccess\": {",
													"          \"type\": \"string\",",
													"          \"pattern\": \"\"",
													"        },",
													"        \"feesAccess\": {",
													"          \"type\": \"string\",",
													"          \"pattern\": \"\"",
													"        },",
													"        \"violationTypePermissions\": {",
													"          \"type\": \"array\",",
													"          \"items\": {",
													"            \"type\": \"object\",",
													"            \"required\": [",
													"              \"id\",",
													"              \"configXerceViolationTypeId\",",
													"              \"violationTypeAccess\"",
													"            ],",
													"            \"properties\": {",
													"              \"id\": {",
													"                \"type\": \"integer\"",
													"              },",
													"              \"configXerceViolationTypeId\": {",
													"                \"type\": \"integer\"",
													"              },",
													"              \"violationTypeAccess\": {",
													"                \"type\": \"string\",",
													"                \"pattern\": \"\"",
													"              }",
													"            }",
													"          }",
													"        }",
													"      }",
													"    }",
													"  }",
													"};",
													"",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test('Schema is valid', function() {",
													"  pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
													"",
													"});",
													"",
													"pm.test(\"Validate if site admin\", function () {",
													"    pm.expect(jsonData.isSiteAdmin).to.eql(false);",
													"});",
													"",
													"pm.test(\"Validate if product admin\", function () {",
													"    pm.expect(jsonData.xerce.isProductAdmin).to.eql(true);",
													"});",
													"",
													"pm.test(\"Validate title\", function () {",
													"    pm.expect(jsonData.title).to.eql(\"Manager\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{token_super_admin}}"
											},
											{
												"key": "",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"firstName\": \"Product\",\n  \"lastName\": \"Only\",\n  \"email\": \"product@comcate.com\",\n  \"phone\": \"12345\",\n  \"title\": \"Manager\",\n  \"department\": \"IT\",\n  \"isActive\": true,\n  \"isSiteAdmin\": false,\n  \"xerce\": {\n    \"xerceId\": 4,\n    \"isActive\": true,\n    \"isProductAdmin\": true,\n    \"reportAccess\": \"NO_ACCESS\",\n    \"dashboardAccess\": \"SELF_DASHBOARD\",\n    \"feesAccess\": \"CAN_VOID\",\n    \"violationTypePermissions\": [\n       {\n        \"configXerceViolationTypeId\": {{violation_type_1}},\n        \"violationTypeAccess\": \"OVERWRITE\"\n      },\n      {\n        \"configXerceViolationTypeId\": {{violation_type_2}},\n        \"violationTypeAccess\": \"OVERWRITE\"\n      },\n      {\n        \"configXerceViolationTypeId\": {{violation_type_3}},\n        \"violationTypeAccess\": \"OVERWRITE\"\n      },\n      {\n        \"configXerceViolationTypeId\": {{violation_type_4}},\n        \"violationTypeAccess\": \"OVERWRITE\"\n      },\n      {\n        \"configXerceViolationTypeId\": {{violation_type_5}},\n        \"violationTypeAccess\": \"OVERWRITE\"\n      }\n    ]\n\t}\n  }"
										},
										"url": {
											"raw": "http://{{env}}/users",
											"protocol": "http",
											"host": [
												"{{env}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create User Product Admin - Inactive Agency",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "83e5db73-4baa-4e2e-8b74-67392fb38641",
												"type": "text/javascript",
												"exec": [
													"var expectedSchema = ",
													"{",
													"  \"definitions\": {},",
													"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
													"  \"$id\": \"http://example.com\",",
													"  \"type\": \"object\",",
													"  \"required\": [",
													"    \"id\",",
													"    \"firstName\",",
													"    \"lastName\",",
													"    \"email\",",
													"    \"phone\",",
													"    \"title\",",
													"    \"department\",",
													"    \"isActive\",",
													"    \"isSiteAdmin\",",
													"    \"xerce\"",
													"  ],",
													"  \"properties\": {",
													"    \"id\": {",
													"      \"type\": \"integer\"",
													"    },",
													"    \"firstName\": {",
													"      \"type\": \"string\",",
													"      \"pattern\": \"\"",
													"    },",
													"    \"lastName\": {",
													"      \"type\": \"string\",",
													"      \"pattern\": \"\"",
													"    },",
													"    \"email\": {",
													"      \"type\": \"string\",",
													"      \"pattern\": \"\"",
													"    },",
													"    \"phone\": {",
													"      \"type\": \"string\",",
													"      \"pattern\": \"\"",
													"    },",
													"    \"title\": {",
													"      \"type\": \"string\",",
													"      \"pattern\": \"\"",
													"    },",
													"    \"department\": {",
													"      \"type\": \"string\",",
													"      \"pattern\": \"\"",
													"    },",
													"    \"isActive\": {",
													"      \"type\": \"boolean\"",
													"    },",
													"    \"isSiteAdmin\": {",
													"      \"type\": \"boolean\"",
													"    },",
													"    \"xerce\": {",
													"      \"type\": \"object\",",
													"      \"required\": [",
													"        \"id\",",
													"        \"xerceId\",",
													"        \"isActive\",",
													"        \"isProductAdmin\",",
													"        \"reportAccess\",",
													"        \"dashboardAccess\",",
													"        \"feesAccess\",",
													"        \"violationTypePermissions\"",
													"      ],",
													"      \"properties\": {",
													"        \"id\": {",
													"          \"type\": \"integer\"",
													"        },",
													"        \"xerceId\": {",
													"          \"type\": \"integer\"",
													"        },",
													"        \"isActive\": {",
													"          \"type\": \"boolean\"",
													"        },",
													"        \"isProductAdmin\": {",
													"          \"type\": \"boolean\"",
													"        },",
													"        \"reportAccess\": {",
													"          \"type\": \"string\",",
													"          \"pattern\": \"\"",
													"        },",
													"        \"dashboardAccess\": {",
													"          \"type\": \"string\",",
													"          \"pattern\": \"\"",
													"        },",
													"        \"feesAccess\": {",
													"          \"type\": \"string\",",
													"          \"pattern\": \"\"",
													"        },",
													"        \"violationTypePermissions\": {",
													"          \"type\": \"array\",",
													"          \"items\": {",
													"            \"type\": \"object\",",
													"            \"required\": [",
													"              \"id\",",
													"              \"configXerceViolationTypeId\",",
													"              \"violationTypeAccess\"",
													"            ],",
													"            \"properties\": {",
													"              \"id\": {",
													"                \"type\": \"integer\"",
													"              },",
													"              \"configXerceViolationTypeId\": {",
													"                \"type\": \"integer\"",
													"              },",
													"              \"violationTypeAccess\": {",
													"                \"type\": \"string\",",
													"                \"pattern\": \"\"",
													"              }",
													"            }",
													"          }",
													"        }",
													"      }",
													"    }",
													"  }",
													"};",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"//pm.test('Schema is valid', function() {",
													"//  pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
													"  ",
													"//});",
													"",
													"pm.test(\"Response time is less than timeout\", function () {",
													"    pm.expect(pm.response.responseTime < pm.environment.get(\"timeout\"));",
													"});",
													"",
													"pm.test(\"Response shows UnauthorisedError\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"UnauthorizedError: jwt malformed\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{token_super_admin_inactive}}"
											},
											{
												"key": "",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"firstName\": \"Product\",\n  \"lastName\": \"Only\",\n  \"email\": \"product@comcate.com\",\n  \"phone\": \"12345\",\n  \"title\": \"Manager\",\n  \"department\": \"IT\",\n  \"isActive\": true,\n  \"isSiteAdmin\": false,\n  \"xerce\": {\n    \"xerceId\": 5,\n    \"isActive\": true,\n    \"isProductAdmin\": true,\n    \"reportAccess\": \"NO_ACCESS\",\n    \"dashboardAccess\": \"SELF_DASHBOARD\",\n    \"feesAccess\": \"CAN_VOID\",\n    \"violationTypePermissions\": [\n      {\n        \"configXerceViolationTypeId\": 14,\n        \"violationTypeAccess\": \"READ_ONLY\"\n      }\n    ]\n\t}\n  }"
										},
										"url": {
											"raw": "http://{{env}}/users",
											"protocol": "http",
											"host": [
												"{{env}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create User Site and Product Admin  - Duplicate",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6a58c385-f73c-49e7-9f04-6e7a99874737",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"",
													"pm.test(\"Status code is 409\", function () {",
													"    pm.response.to.have.status(409);",
													"});",
													"",
													"pm.test(\"Validate Duplicate\", function () {",
													"    pm.expect(jsonData.message).to.eql(\"User exists already.\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{token_super_admin}}"
											},
											{
												"key": "",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"firstName\": \"Site\",\n  \"lastName\": \"Product\",\n  \"email\": \"siteproduct@velotio.com\",\n  \"phone\": \"1234567890\",\n  \"title\": \"Manager\",\n  \"department\": \"Research\",\n  \"isActive\": true,\n  \"isSiteAdmin\": true,\n  \"xerce\": {\n    \"xerceId\": 4,\n    \"isActive\": true,\n    \"isProductAdmin\": true,\n    \"reportAccess\": \"NO_ACCESS\",\n    \"dashboardAccess\": \"SELF_DASHBOARD\",\n    \"feesAccess\": \"CAN_VOID\",\n    \"violationTypePermissions\": [\n       {\n        \"configXerceViolationTypeId\": {{violation_type_1}},\n        \"violationTypeAccess\": \"OVERWRITE\"\n      },\n      {\n        \"configXerceViolationTypeId\": {{violation_type_2}},\n        \"violationTypeAccess\": \"OVERWRITE\"\n      },\n      {\n        \"configXerceViolationTypeId\": {{violation_type_3}},\n        \"violationTypeAccess\": \"OVERWRITE\"\n      },\n      {\n        \"configXerceViolationTypeId\": {{violation_type_4}},\n        \"violationTypeAccess\": \"OVERWRITE\"\n      },\n      {\n        \"configXerceViolationTypeId\": {{violation_type_5}},\n        \"violationTypeAccess\": \"OVERWRITE\"\n      }\n    ]\n\t}\n  }"
										},
										"url": {
											"raw": "http://{{env}}/users",
											"protocol": "http",
											"host": [
												"{{env}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User - Remove Product Admin Access",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0e8f9d0e-3cec-4ec6-8879-e849b717ba12",
												"exec": [
													"var expectedSchema = {",
													"  \"type\": \"object\",",
													"  \"required\": [",
													"    \"firstName\",",
													"    \"lastName\",",
													"    \"phone\",",
													"    \"title\",",
													"    \"department\",",
													"    \"isActive\",",
													"    \"isSiteAdmin\",",
													"    \"xerce\"",
													"  ],",
													"  \"properties\": {",
													"    \"firstName\": {",
													"      \"type\": \"string\",",
													"      \"pattern\": \"\"",
													"    },",
													"    \"lastName\": {",
													"      \"type\": \"string\",",
													"      \"pattern\": \"\"",
													"    },",
													"    \"phone\": {",
													"      \"type\": \"string\",",
													"      \"pattern\": \"\"",
													"    },",
													"    \"title\": {",
													"      \"type\": \"string\",",
													"      \"pattern\": \"\"",
													"    },",
													"    \"department\": {",
													"      \"type\": \"string\",",
													"      \"pattern\": \"\"",
													"    },",
													"    \"isActive\": {",
													"      \"type\": \"boolean\"",
													"    },",
													"    \"isSiteAdmin\": {",
													"      \"type\": \"boolean\"",
													"    },",
													"    \"xerce\": {",
													"      \"type\": \"object\",",
													"      \"required\": [",
													"        \"xerceId\",",
													"        \"isActive\",",
													"        \"isProductAdmin\",",
													"        \"reportAccess\",",
													"        \"dashboardAccess\",",
													"        \"feesAccess\",",
													"        \"violationTypePermissions\"",
													"      ],",
													"      \"properties\": {",
													"        \"xerceId\": {",
													"          \"type\": \"integer\"",
													"        },",
													"        \"isActive\": {",
													"          \"type\": \"boolean\"",
													"        },",
													"        \"isProductAdmin\": {",
													"          \"type\": \"boolean\"",
													"        },",
													"        \"reportAccess\": {",
													"          \"type\": \"string\",",
													"          \"pattern\": \"\"",
													"        },",
													"        \"dashboardAccess\": {",
													"          \"type\": \"string\",",
													"          \"pattern\": \"\"",
													"        },",
													"        \"feesAccess\": {",
													"          \"type\": \"string\",",
													"          \"pattern\": \"\"",
													"        },",
													"        \"violationTypePermissions\": {",
													"          \"type\": \"array\",",
													"          \"items\": {",
													"            \"type\": \"object\",",
													"            \"required\": [",
													"              \"id\",",
													"              \"configXerceViolationTypeId\",",
													"              \"violationTypeAccess\"",
													"            ],",
													"            \"properties\": {",
													"              \"id\": {",
													"                \"type\": \"integer\"",
													"              },",
													"              \"configXerceViolationTypeId\": {",
													"                \"type\": \"integer\"",
													"              },",
													"              \"violationTypeAccess\": {",
													"                \"type\": \"string\",",
													"                \"pattern\": \"\"",
													"              }",
													"            }",
													"          }",
													"        }",
													"      }",
													"    }",
													"  }",
													"};",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test('Schema is valid', function() {",
													"  pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
													"",
													"});",
													"",
													"pm.test(\"Validate if site admin\", function () {",
													"    pm.expect(jsonData.isSiteAdmin).to.eql(true);",
													"});",
													"",
													"pm.test(\"Validate if product admin\", function () {",
													"    pm.expect(jsonData.xerce.isProductAdmin).to.eql(false);",
													"});",
													"",
													"pm.test(\"Validate title\", function () {",
													"    pm.expect(jsonData.title).to.eql(\"CEO\");",
													"});",
													"",
													"pm.test(\"Validate department\", function () {",
													"    pm.expect(jsonData.department).to.eql(\"IT\");",
													"});",
													"",
													"pm.test(\"Validate violation type access\", function () {",
													"    pm.expect(jsonData.xerce.violationTypePermissions[0].violationTypeAccess).to.eql(\"OVERWRITE\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{token_super_admin}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"firstName\": \"Site\",\n   \"lastName\": \"Product\",\n   \"phone\" : \"1234516\",\n   \"title\" : \"CEO\",\n   \"department\": \"IT\",\n   \"isActive\": true,\n   \"isSiteAdmin\": true,\n   \"xerce\": {\n   \t\t\"xerceId\": 1,\n   \t\t\"isProductAdmin\": false,\n   \t\t\"isActive\": true,\n   \t\t\"reportAccess\": \"ALL_STAFF\",\n   \t\t\"dashboardAccess\": \"SELF_DASHBOARD\",\n   \t\t\"feesAccess\": \"CANT_VOID\",\n   \t\t\"violationTypePermissions\": [\n   \t\t\t{\n                \"id\": 1,\n                \"configXerceViolationTypeId\": {{violation_type_1}},\n                \"violationTypeAccess\": \"OVERWRITE\"\n            },\n            {\n                \"id\": 2,\n                \"configXerceViolationTypeId\": {{violation_type_2}},\n                \"violationTypeAccess\": \"OVERWRITE\"\n            },\n            {\n                \"id\": 3,\n                \"configXerceViolationTypeId\": {{violation_type_3}},\n                \"violationTypeAccess\": \"OVERWRITE\"\n            },\n            {\n                \"id\": 4,\n                \"configXerceViolationTypeId\": {{violation_type_4}},\n                \"violationTypeAccess\": \"OVERWRITE\"\n            },\n            {\n                \"id\": 5,\n                \"configXerceViolationTypeId\": {{violation_type_5}},\n                \"violationTypeAccess\": \"OVERWRITE\"\n            }\n   \t\t\t\n   \t\t\t]\n   }\n}"
										},
										"url": {
											"raw": "http://{{env}}/users/1",
											"protocol": "http",
											"host": [
												"{{env}}"
											],
											"path": [
												"users",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User - Grant Product Admin Access",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ffbca4bf-fd74-4b37-a8c8-27ab75cea1ab",
												"exec": [
													"var expectedSchema = {",
													"  \"type\": \"object\",",
													"  \"required\": [",
													"    \"firstName\",",
													"    \"lastName\",",
													"    \"phone\",",
													"    \"title\",",
													"    \"department\",",
													"    \"isActive\",",
													"    \"isSiteAdmin\",",
													"    \"xerce\"",
													"  ],",
													"  \"properties\": {",
													"    \"firstName\": {",
													"      \"type\": \"string\",",
													"      \"pattern\": \"\"",
													"    },",
													"    \"lastName\": {",
													"      \"type\": \"string\",",
													"      \"pattern\": \"\"",
													"    },",
													"    \"phone\": {",
													"      \"type\": \"string\",",
													"      \"pattern\": \"\"",
													"    },",
													"    \"title\": {",
													"      \"type\": \"string\",",
													"      \"pattern\": \"\"",
													"    },",
													"    \"department\": {",
													"      \"type\": \"string\",",
													"      \"pattern\": \"\"",
													"    },",
													"    \"isActive\": {",
													"      \"type\": \"boolean\"",
													"    },",
													"    \"isSiteAdmin\": {",
													"      \"type\": \"boolean\"",
													"    },",
													"    \"xerce\": {",
													"      \"type\": \"object\",",
													"      \"required\": [",
													"        \"xerceId\",",
													"        \"isActive\",",
													"        \"isProductAdmin\",",
													"        \"reportAccess\",",
													"        \"dashboardAccess\",",
													"        \"feesAccess\",",
													"        \"violationTypePermissions\"",
													"      ],",
													"      \"properties\": {",
													"        \"xerceId\": {",
													"          \"type\": \"integer\"",
													"        },",
													"        \"isActive\": {",
													"          \"type\": \"boolean\"",
													"        },",
													"        \"isProductAdmin\": {",
													"          \"type\": \"boolean\"",
													"        },",
													"        \"reportAccess\": {",
													"          \"type\": \"string\",",
													"          \"pattern\": \"\"",
													"        },",
													"        \"dashboardAccess\": {",
													"          \"type\": \"string\",",
													"          \"pattern\": \"\"",
													"        },",
													"        \"feesAccess\": {",
													"          \"type\": \"string\",",
													"          \"pattern\": \"\"",
													"        },",
													"        \"violationTypePermissions\": {",
													"          \"type\": \"array\",",
													"          \"items\": {",
													"            \"type\": \"object\",",
													"            \"required\": [",
													"              \"id\",",
													"              \"configXerceViolationTypeId\",",
													"              \"violationTypeAccess\"",
													"            ],",
													"            \"properties\": {",
													"              \"id\": {",
													"                \"type\": \"integer\"",
													"              },",
													"              \"configXerceViolationTypeId\": {",
													"                \"type\": \"integer\"",
													"              },",
													"              \"violationTypeAccess\": {",
													"                \"type\": \"string\",",
													"                \"pattern\": \"\"",
													"              }",
													"            }",
													"          }",
													"        }",
													"      }",
													"    }",
													"  }",
													"};",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test('Schema is valid', function() {",
													"  pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
													"",
													"});",
													"",
													"pm.test(\"Validate if site admin\", function () {",
													"    pm.expect(jsonData.isSiteAdmin).to.eql(true);",
													"});",
													"",
													"pm.test(\"Validate if product admin\", function () {",
													"    pm.expect(jsonData.xerce.isProductAdmin).to.eql(true);",
													"});",
													"",
													"pm.test(\"Validate title\", function () {",
													"    pm.expect(jsonData.title).to.eql(\"CEO\");",
													"});",
													"",
													"pm.test(\"Validate department\", function () {",
													"    pm.expect(jsonData.department).to.eql(\"IT\");",
													"});",
													"",
													"pm.test(\"Validate violation type access\", function () {",
													"    pm.expect(jsonData.xerce.violationTypePermissions[0].violationTypeAccess).to.eql(\"OVERWRITE\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{token_super_admin}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"firstName\": \"Site\",\n   \"lastName\": \"Product\",\n   \"phone\" : \"1234516\",\n   \"title\" : \"CEO\",\n   \"department\": \"IT\",\n   \"isActive\": true,\n   \"isSiteAdmin\": true,\n   \"xerce\": {\n   \t\t\"xerceId\": 1,\n   \t\t\"isProductAdmin\": true,\n   \t\t\"isActive\": true,\n   \t\t\"reportAccess\": \"ALL_STAFF\",\n   \t\t\"dashboardAccess\": \"SELF_DASHBOARD\",\n   \t\t\"feesAccess\": \"CANT_VOID\",\n   \t\t\"violationTypePermissions\": [\n   \t\t\t{\n                \"id\": 1,\n                \"configXerceViolationTypeId\": {{violation_type_1}},\n                \"violationTypeAccess\": \"OVERWRITE\"\n            },\n            {\n                \"id\": 2,\n                \"configXerceViolationTypeId\": {{violation_type_2}},\n                \"violationTypeAccess\": \"OVERWRITE\"\n            },\n            {\n                \"id\": 3,\n                \"configXerceViolationTypeId\": {{violation_type_3}},\n                \"violationTypeAccess\": \"OVERWRITE\"\n            },\n            {\n                \"id\": 4,\n                \"configXerceViolationTypeId\": {{violation_type_4}},\n                \"violationTypeAccess\": \"OVERWRITE\"\n            },\n            {\n                \"id\": 5,\n                \"configXerceViolationTypeId\": {{violation_type_5}},\n                \"violationTypeAccess\": \"OVERWRITE\"\n            }\n   \t\t\t]\n   }\n}"
										},
										"url": {
											"raw": "http://{{env}}/users/1",
											"protocol": "http",
											"host": [
												"{{env}}"
											],
											"path": [
												"users",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All Users - Active Agency",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "300b8db7-6994-49bd-b641-18ba79881910",
												"type": "text/javascript",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"var expectedSchema = {",
													"  \"definitions\": {},",
													"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
													"  \"$id\": \"http://example.com\",",
													"  \"type\": \"array\",",
													"  \"items\": {",
													"    \"type\": \"object\",",
													"    \"required\": [",
													"      \"id\",",
													"      \"firstName\",",
													"      \"lastName\",",
													"      \"email\",",
													"      \"title\",",
													"      \"department\",",
													"      \"isActive\",",
													"      \"isSiteAdmin\",",
													"      \"xerce\"",
													"    ],",
													"    \"properties\": {",
													"      \"id\": {",
													"        \"type\": \"integer\"",
													"      },",
													"      \"firstName\": {",
													"        \"type\": \"string\",",
													"        \"pattern\": \"\"",
													"      },",
													"      \"lastName\": {",
													"        \"type\": \"string\",",
													"        \"pattern\": \"\"",
													"      },",
													"      \"email\": {",
													"        \"type\": \"string\",",
													"        \"pattern\": \"\"",
													"      },",
													"      \"title\": {",
													"        \"type\": \"string\",",
													"        \"pattern\": \"\"",
													"      },",
													"      \"department\": {",
													"        \"type\": \"string\",",
													"        \"pattern\": \"\"",
													"      },",
													"      \"isActive\": {",
													"        \"type\": \"boolean\"",
													"      },",
													"      \"isSiteAdmin\": {",
													"        \"type\": \"boolean\"",
													"      },",
													"      \"xerce\": {",
													"        \"type\": \"object\",",
													"        \"required\": [",
													"          \"id\",",
													"          \"xerceId\",",
													"          \"isActive\",",
													"          \"isProductAdmin\",",
													"          \"reportAccess\",",
													"          \"dashboardAccess\",",
													"          \"feesAccess\",",
													"          \"violationTypePermissions\"",
													"        ],",
													"        \"properties\": {",
													"          \"id\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"xerceId\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"isActive\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"isProductAdmin\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"reportAccess\": {",
													"            \"type\": \"string\",",
													"            \"pattern\": \"\"",
													"          },",
													"          \"dashboardAccess\": {",
													"            \"type\": \"string\",",
													"            \"pattern\": \"\"",
													"          },",
													"          \"feesAccess\": {",
													"            \"type\": \"string\",",
													"            \"pattern\": \"\"",
													"          },",
													"          \"violationTypePermissions\": {",
													"            \"type\": \"array\",",
													"            \"items\": {",
													"              \"type\": \"object\",",
													"              \"required\": [",
													"                \"id\",",
													"                \"configXerceViolationTypeId\",",
													"                \"violationTypeAccess\"",
													"              ],",
													"              \"properties\": {",
													"                \"id\": {",
													"                  \"type\": \"integer\"",
													"                },",
													"                \"configXerceViolationTypeId\": {",
													"                  \"type\": \"integer\"",
													"                },",
													"                \"violationTypeAccess\": {",
													"                  \"type\": \"string\",",
													"                  \"pattern\": \"\"",
													"                }",
													"              }",
													"            }",
													"          }",
													"        }",
													"      }",
													"    }",
													"  }",
													"};",
													"",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test('Schema is valid', function() {",
													"  pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
													"  ",
													"});",
													"",
													"pm.test(\"Response time is less than timeout\", function () {",
													"    pm.expect(pm.response.responseTime < pm.environment.get(\"timeout\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "content",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{token_super_admin}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{env}}/users",
											"protocol": "http",
											"host": [
												"{{env}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All Users - Inactive Agency",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d0c67a13-870c-48aa-8637-cdc64aa20d9c",
												"type": "text/javascript",
												"exec": [
													"//var jsonData = pm.response.json();",
													"",
													"var expectedSchema = {",
													"  \"definitions\": {},",
													"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
													"  \"$id\": \"http://example.com\",",
													"  \"type\": \"array\",",
													"  \"items\": {",
													"    \"type\": \"object\",",
													"    \"required\": [",
													"      \"id\",",
													"      \"firstName\",",
													"      \"lastName\",",
													"      \"email\",",
													"      \"phone\",",
													"      \"title\",",
													"      \"department\",",
													"      \"isActive\",",
													"      \"isSiteAdmin\",",
													"      \"xerce\"",
													"    ],",
													"    \"properties\": {",
													"      \"id\": {",
													"        \"type\": \"integer\"",
													"      },",
													"      \"firstName\": {",
													"        \"type\": \"string\",",
													"        \"pattern\": \"\"",
													"      },",
													"      \"lastName\": {",
													"        \"type\": \"string\",",
													"        \"pattern\": \"\"",
													"      },",
													"      \"email\": {",
													"        \"type\": \"string\",",
													"        \"pattern\": \"\"",
													"      },",
													"      \"phone\": {",
													"        \"type\": \"string\",",
													"        \"pattern\": \"\"",
													"      },",
													"      \"title\": {",
													"        \"type\": \"string\",",
													"        \"pattern\": \"\"",
													"      },",
													"      \"department\": {",
													"        \"type\": \"string\",",
													"        \"pattern\": \"\"",
													"      },",
													"      \"isActive\": {",
													"        \"type\": \"boolean\"",
													"      },",
													"      \"isSiteAdmin\": {",
													"        \"type\": \"boolean\"",
													"      },",
													"      \"xerce\": {",
													"        \"type\": \"object\",",
													"        \"required\": [",
													"          \"id\",",
													"          \"xerceId\",",
													"          \"isActive\",",
													"          \"isProductAdmin\",",
													"          \"reportAccess\",",
													"          \"dashboardAccess\",",
													"          \"feesAccess\",",
													"          \"violationTypePermissions\"",
													"        ],",
													"        \"properties\": {",
													"          \"id\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"xerceId\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"isActive\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"isProductAdmin\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"reportAccess\": {",
													"            \"type\": \"string\",",
													"            \"pattern\": \"\"",
													"          },",
													"          \"dashboardAccess\": {",
													"            \"type\": \"string\",",
													"            \"pattern\": \"\"",
													"          },",
													"          \"feesAccess\": {",
													"            \"type\": \"string\",",
													"            \"pattern\": \"\"",
													"          },",
													"          \"violationTypePermissions\": {",
													"            \"type\": \"array\",",
													"            \"items\": {",
													"              \"type\": \"object\",",
													"              \"required\": [",
													"                \"id\",",
													"                \"configXerceViolationTypeId\",",
													"                \"violationTypeAccess\"",
													"              ],",
													"              \"properties\": {",
													"                \"id\": {",
													"                  \"type\": \"integer\"",
													"                },",
													"                \"configXerceViolationTypeId\": {",
													"                  \"type\": \"integer\"",
													"                },",
													"                \"violationTypeAccess\": {",
													"                  \"type\": \"string\",",
													"                  \"pattern\": \"\"",
													"                }",
													"              }",
													"            }",
													"          }",
													"        }",
													"      }",
													"    }",
													"  }",
													"};",
													"",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"//pm.test('Schema is valid', function() {",
													"//  pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
													"  ",
													"//});",
													"",
													"pm.test(\"Response time is less than timeout\", function () {",
													"    pm.expect(pm.response.responseTime < pm.environment.get(\"timeout\"));",
													"});",
													"",
													"pm.test(\"Response shows UnauthorisedError\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"UnauthorizedError: jwt malformed\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "content",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{token_super_admin_inactive}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{env}}/users",
											"protocol": "http",
											"host": [
												"{{env}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get User",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7554a93c-30bb-4859-96c1-883df2c55031",
												"type": "text/javascript",
												"exec": [
													"var expectedSchema = {",
													"  \"definitions\": {},",
													"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
													"  \"$id\": \"http://example.com\",",
													"  \"type\": \"object\",",
													"  \"required\": [",
													"    \"id\",",
													"    \"firstName\",",
													"    \"lastName\",",
													"    \"email\",",
													"    \"phone\",",
													"    \"title\",",
													"    \"department\",",
													"    \"isActive\",",
													"    \"isSiteAdmin\",",
													"    \"xerce\"",
													"  ],",
													"  \"properties\": {",
													"    \"id\": {",
													"      \"type\": \"integer\"",
													"    },",
													"    \"firstName\": {",
													"      \"type\": \"string\",",
													"      \"pattern\": \"\"",
													"    },",
													"    \"lastName\": {",
													"      \"type\": \"string\",",
													"      \"pattern\": \"\"",
													"    },",
													"    \"email\": {",
													"      \"type\": \"string\",",
													"      \"pattern\": \"\"",
													"    },",
													"    \"phone\": {",
													"      \"type\": \"string\",",
													"      \"pattern\": \"\"",
													"    },",
													"    \"title\": {",
													"      \"type\": \"string\",",
													"      \"pattern\": \"\"",
													"    },",
													"    \"department\": {",
													"      \"type\": \"string\",",
													"      \"pattern\": \"\"",
													"    },",
													"    \"isActive\": {",
													"      \"type\": \"boolean\"",
													"    },",
													"    \"isSiteAdmin\": {",
													"      \"type\": \"boolean\"",
													"    },",
													"    \"xerce\": {",
													"      \"type\": \"object\",",
													"      \"required\": [",
													"        \"id\",",
													"        \"xerceId\",",
													"        \"isActive\",",
													"        \"isProductAdmin\",",
													"        \"reportAccess\",",
													"        \"dashboardAccess\",",
													"        \"feesAccess\",",
													"        \"violationTypePermissions\"",
													"      ],",
													"      \"properties\": {",
													"        \"id\": {",
													"          \"type\": \"integer\"",
													"        },",
													"        \"xerceId\": {",
													"          \"type\": \"integer\"",
													"        },",
													"        \"isActive\": {",
													"          \"type\": \"boolean\"",
													"        },",
													"        \"isProductAdmin\": {",
													"          \"type\": \"boolean\"",
													"        },",
													"        \"reportAccess\": {",
													"          \"type\": \"string\",",
													"          \"pattern\": \"\"",
													"        },",
													"        \"dashboardAccess\": {",
													"          \"type\": \"string\",",
													"          \"pattern\": \"\"",
													"        },",
													"        \"feesAccess\": {",
													"          \"type\": \"string\",",
													"          \"pattern\": \"\"",
													"        },",
													"        \"violationTypePermissions\": {",
													"          \"type\": \"array\",",
													"          \"items\": {",
													"            \"type\": \"object\",",
													"            \"required\": [",
													"              \"id\",",
													"              \"configXerceViolationTypeId\",",
													"              \"violationTypeAccess\"",
													"            ],",
													"            \"properties\": {",
													"              \"id\": {",
													"                \"type\": \"integer\"",
													"              },",
													"              \"configXerceViolationTypeId\": {",
													"                \"type\": \"integer\"",
													"              },",
													"              \"violationTypeAccess\": {",
													"                \"type\": \"string\",",
													"                \"pattern\": \"\"",
													"              }",
													"            }",
													"          }",
													"        }",
													"      }",
													"    }",
													"  }",
													"};",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test('Schema is valid', function() {",
													"  pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
													"",
													"});",
													"",
													"pm.test(\"Validate if site admin\", function () {",
													"    pm.expect(jsonData.isSiteAdmin).to.eql(true);",
													"});",
													"",
													"pm.test(\"Validate if product admin\", function () {",
													"    pm.expect(jsonData.xerce.isProductAdmin).to.eql(true);",
													"});",
													"",
													"pm.test(\"Validate title\", function () {",
													"    pm.expect(jsonData.title).to.eql(\"Manager\");",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "content",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{token_super_admin}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{env}}/users/{{siteproduct_active_id}}",
											"protocol": "http",
											"host": [
												"{{env}}"
											],
											"path": [
												"users",
												"{{siteproduct_active_id}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Agency Configuration",
					"item": [
						{
							"name": "Staff User Login",
							"item": [
								{
									"name": "Site + Product Admin Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0292e306-a492-468e-936e-82301417d4a5",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"postman.setEnvironmentVariable(\"token_site_admin\",\"Bearer \"+jsonData.token);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{auth_token}}",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"email\":\"siteproduct@velotio.com\",\n\t\"password\":\"test@123\"\n}"
										},
										"url": {
											"raw": "http://{{env}}/agencies/{{aoh_agency_id}}/login",
											"protocol": "http",
											"host": [
												"{{env}}"
											],
											"path": [
												"agencies",
												"{{aoh_agency_id}}",
												"login"
											]
										},
										"description": "Comcate user logging in as a superadmin in agency"
									},
									"response": []
								},
								{
									"name": "Site Admin Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0292e306-a492-468e-936e-82301417d4a5",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"postman.setEnvironmentVariable(\"token_site_admin\",\"Bearer \"+jsonData.token);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{auth_token}}",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"email\":\"site@comcate.com\",\n\t\"password\":\"test@123\"\n}"
										},
										"url": {
											"raw": "http://{{env}}/agencies/{{aoh_agency_id}}/login",
											"protocol": "http",
											"host": [
												"{{env}}"
											],
											"path": [
												"agencies",
												"{{aoh_agency_id}}",
												"login"
											]
										},
										"description": "Comcate user logging in as a superadmin in agency"
									},
									"response": []
								},
								{
									"name": "Product Admin Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "25c9328a-0f03-485e-8520-4de8243dfe32",
												"type": "text/javascript",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"postman.setEnvironmentVariable(\"token_product_admin\",\"Bearer \"+jsonData.token);"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{auth_token}}",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"email\":\"product@comcate.com\",\n\t\"password\":\"test@123\"\n}"
										},
										"url": {
											"raw": "http://{{env}}/agencies/{{aoh_agency_id}}/login",
											"protocol": "http",
											"host": [
												"{{env}}"
											],
											"path": [
												"agencies",
												"{{aoh_agency_id}}",
												"login"
											]
										},
										"description": "Comcate user logging in as a superadmin in agency"
									},
									"response": []
								},
								{
									"name": "No Access user login",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b513393b-c814-4644-87cb-33a1304b7314",
												"type": "text/javascript",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"postman.setEnvironmentVariable(\"token_no_access\",\"Bearer \"+jsonData.token);"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{auth_token}}",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"email\":\"noaccess@comcate.com\",\n\t\"password\":\"test@123\"\n}"
										},
										"url": {
											"raw": "http://{{env}}/agencies/{{aoh_agency_id}}/login",
											"protocol": "http",
											"host": [
												"{{env}}"
											],
											"path": [
												"agencies",
												"{{aoh_agency_id}}",
												"login"
											]
										},
										"description": "Comcate user logging in as a superadmin in agency"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Agency Information",
							"item": [
								{
									"name": "Edit Agency Information",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e97dd066-1dce-4465-aedc-98e275a8e1bc",
												"exec": [
													"var scehma = ",
													"{",
													"  \"definitions\": {},",
													"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
													"  \"$id\": \"http://example.com/root.json\",",
													"  \"type\": \"object\",",
													"  \"title\": \"The Root Schema\",",
													"  \"required\": [",
													"    \"id\",",
													"    \"name\",",
													"    \"email\",",
													"    \"agencyTimezone\",",
													"    \"whitelistURL\",",
													"    \"websiteURL\",",
													"    \"agencyLogoURL\",",
													"    \"streetAddress\",",
													"    \"city\",",
													"    \"state\",",
													"    \"zip\"",
													"  ],",
													"  \"properties\": {",
													"    \"id\": {",
													"      \"type\": \"integer\"",
													"    },",
													"    \"name\": {",
													"      \"type\": \"string\",",
													"    },",
													"    \"email\": {",
													"      \"type\": \"string\",",
													"    },",
													"    \"agencyTimezone\": {",
													"      \"type\": \"string\",",
													"    },",
													"    \"whitelistURL\": {",
													"      \"type\": \"string\",",
													"    },",
													"    \"websiteURL\": {",
													"      \"type\": \"string\",",
													"    },",
													"    \"streetAddress\": {",
													"      \"type\": \"string\",",
													"    },",
													"    \"city\": {",
													"      \"type\": \"string\",",
													"    },",
													"    \"state\": {",
													"      \"type\": \"string\",",
													"    },",
													"    \"zip\": {",
													"      \"type\": \"string\",",
													"    }",
													"  }",
													"};",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test('Response Schema is valid', function () {",
													"    pm.expect(tv4.validate(jsonData, scehma)).to.be.true;",
													"});",
													"console.log(\"Validation Status: \", tv4.error);",
													"",
													"pm.expect(jsonData.id!==null).to.be.true;",
													"",
													"pm.test(\"Agency id is not null\", function () {",
													"    pm.expect(jsonData.id!==null).to.be.true;",
													"    ",
													"});",
													"",
													"pm.test('Name is true', function(){",
													"    pm.expect(jsonData.name === \"Agency of Hawaii\").to.be.true;",
													"});",
													"",
													"pm.test('Email is true', function(){",
													"    pm.expect(jsonData.email === \"aoh@comcate.com\").to.be.true;",
													"});",
													"",
													"pm.test('Timezone is true', function(){",
													"    pm.expect(jsonData.agencyTimezone === \"PST\").to.be.true;",
													"});",
													"",
													"pm.test('Whitelist URL is true', function(){",
													"    pm.expect(jsonData.whitelistURL === \"aoh.com\").to.be.true;",
													"});",
													"",
													"",
													"pm.test('Street Address URL is true', function(){",
													"    pm.expect(jsonData.streetAddress === \"221B Bakers Street\").to.be.true;",
													"});",
													"",
													"pm.test('City is true', function(){",
													"    pm.expect(jsonData.city === \"Honolulu\").to.be.true;",
													"});",
													"",
													"pm.test('State is true', function(){",
													"    pm.expect(jsonData.state === \"FL\").to.be.true;",
													"});",
													"",
													"pm.test('Zip is true', function(){",
													"    pm.expect(jsonData.zip === \"96795\").to.be.true;",
													"});",
													"",
													"",
													"pm.test(\"Response time is less than timeout\", function () {",
													"    pm.expect(pm.response.responseTime < pm.environment.get(\"timeout\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{token_staff}}",
												"disabled": true
											},
											{
												"key": "Authorization",
												"value": "{{token_super_admin}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Agency of Hawaii\",\n    \"websiteURL\": \"aoh.com\",\n    \"email\": \"aoh@comcate.com\",\n    \"streetAddress\": \"221B Bakers Street\",\n    \"city\": \"Honolulu\",\n    \"state\": \"FL\",\n    \"zip\": \"96795\",\n    \"agencyTimezone\": \"PST\"\n}"
										},
										"url": {
											"raw": "http://{{env}}/agencies/information",
											"protocol": "http",
											"host": [
												"{{env}}"
											],
											"path": [
												"agencies",
												"information"
											]
										}
									},
									"response": []
								},
								{
									"name": "Edit Agency Information - Update agency logo URL",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bc6cddda-18cb-4c75-9b66-c3bb73a4a103",
												"exec": [
													"var scehma = ",
													"{",
													"  \"definitions\": {},",
													"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
													"  \"$id\": \"http://example.com/root.json\",",
													"  \"type\": \"object\",",
													"  \"title\": \"The Root Schema\",",
													"  \"required\": [",
													"    \"id\",",
													"    \"name\",",
													"    \"email\",",
													"    \"agencyTimezone\",",
													"    \"whitelistURL\",",
													"    \"websiteURL\",",
													"    \"agencyLogoURL\",",
													"    \"streetAddress\",",
													"    \"city\",",
													"    \"state\",",
													"    \"zip\"",
													"  ],",
													"  \"properties\": {",
													"    \"id\": {",
													"      \"type\": \"integer\"",
													"    },",
													"    \"name\": {",
													"      \"type\": \"string\",",
													"    },",
													"    \"email\": {",
													"      \"type\": \"string\",",
													"    },",
													"    \"agencyTimezone\": {",
													"      \"type\": \"string\",",
													"    },",
													"    \"whitelistURL\": {",
													"      \"type\": \"string\",",
													"    },",
													"    \"websiteURL\": {",
													"      \"type\": \"string\",",
													"    },",
													"    \"agencyLogoURL\": {",
													"      \"type\": \"string\",",
													"    },",
													"    \"streetAddress\": {",
													"      \"type\": \"string\",",
													"    },",
													"    \"city\": {",
													"      \"type\": \"string\",",
													"    },",
													"    \"state\": {",
													"      \"type\": \"string\",",
													"    },",
													"    \"zip\": {",
													"      \"type\": \"string\",",
													"    }",
													"  }",
													"};",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test('Response Schema is valid', function () {",
													"    pm.expect(tv4.validate(jsonData, scehma)).to.be.true;",
													"});",
													"console.log(\"Validation Status: \", tv4.error);",
													"",
													"var url = \"https://cyberdyne-dev.s3.amazonaws.com/agency_\"+ pm.environment.get(\"aoh_agency_id\") +\"/agency_config/Flag_of_India.png\";",
													"",
													"pm.test('Agency logo URL is valid', function(){",
													"    pm.expect(jsonData.agencyLogoURL).to.eql(url);",
													" });",
													"",
													"",
													"pm.test(\"Response time is less than timeout\", function () {",
													"    pm.expect(pm.response.responseTime < pm.environment.get(\"timeout\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{token_staff}}",
												"disabled": true
											},
											{
												"key": "Authorization",
												"value": "{{token_super_admin}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Agency of Hawaii\",\n    \"websiteURL\": \"aoh.com\",\n    \"agencyLogoURL\":\"https://cyberdyne-dev.s3.amazonaws.com/agency_{{aoh_agency_id}}/staging/agency_config/Flag_of_India.png\",\n    \"email\": \"aoh@comcate.com\",\n    \"streetAddress\": \"221B Bakers Street\",\n    \"city\": \"Honolulu\",\n    \"state\": \"FL\",\n    \"zip\": \"96795\",\n    \"agencyTimezone\": \"PST\"\n}"
										},
										"url": {
											"raw": "http://{{env}}/agencies/information",
											"protocol": "http",
											"host": [
												"{{env}}"
											],
											"path": [
												"agencies",
												"information"
											]
										}
									},
									"response": []
								},
								{
									"name": "Edit Agency Information - City Field Blank",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ac817167-49cb-4086-ac3e-5a57997272e8",
												"type": "text/javascript",
												"exec": [
													"var schema = ",
													"{",
													"  \"type\": \"object\",",
													"  \"required\": [",
													"    \"message\"",
													"  ],",
													"  \"properties\": {",
													"    \"message\": {",
													"      \"type\": \"string\",",
													"    }",
													"  }",
													"}",
													"",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test('Response Schema is valid', function() {",
													"  pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
													"});",
													"",
													"pm.test(\"Validate error message\", function () {",
													"   pm.expect(jsonData.message).to.include(\"Invalid argument city. String is too short (0 chars), minimum 1\");",
													"});",
													"console.log(\"Validation Status: \", tv4.error);"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{token_staff}}",
												"disabled": true
											},
											{
												"key": "Authorization",
												"value": "{{token_super_admin}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Agency of Hawaii\",\n    \"websiteURL\": \"aoh.com\",\n    \"email\": \"aoh@comcate.com\",\n    \"streetAddress\": \"221B Bakers Street\",\n    \"city\": \"\",\n    \"state\": \"FL\",\n    \"zip\": \"96795\",\n    \"agencyTimezone\": \"PST\"\n}"
										},
										"url": {
											"raw": "http://{{env}}/agencies/information",
											"protocol": "http",
											"host": [
												"{{env}}"
											],
											"path": [
												"agencies",
												"information"
											]
										}
									},
									"response": []
								},
								{
									"name": "Edit Agency Information - Zip Field Blank",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "edd9e985-4802-46e1-bfab-1e688f4bad80",
												"type": "text/javascript",
												"exec": [
													"var schema = ",
													"{",
													"  \"type\": \"object\",",
													"  \"required\": [",
													"    \"message\"",
													"  ],",
													"  \"properties\": {",
													"    \"message\": {",
													"      \"type\": \"string\",",
													"    }",
													"  }",
													"}",
													"",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test('Response Schema is valid', function() {",
													"  pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
													"});",
													"",
													"pm.test(\"Validate error message\", function () {",
													"   pm.expect(jsonData.message).to.include(\"Invalid argument zip. String is too short (0 chars), minimum 1\");",
													"});",
													"console.log(\"Validation Status: \", tv4.error);"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{token_staff}}",
												"disabled": true
											},
											{
												"key": "Authorization",
												"value": "{{token_super_admin}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Agency of Hawaii\",\n    \"websiteURL\": \"aoh.com\",\n    \"email\": \"aoh@comcate.com\",\n    \"streetAddress\": \"221B Bakers Street\",\n    \"city\": \"Honolulu\",\n    \"state\": \"FL\",\n    \"zip\": \"\",\n    \"agencyTimezone\": \"PST\"\n}"
										},
										"url": {
											"raw": "http://{{env}}/agencies/information",
											"protocol": "http",
											"host": [
												"{{env}}"
											],
											"path": [
												"agencies",
												"information"
											]
										}
									},
									"response": []
								},
								{
									"name": "Edit Agency Information - Email id  Field Blank",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "30c97bf9-d4d0-463e-a777-8fb071e1d71a",
												"type": "text/javascript",
												"exec": [
													"var schema = ",
													"{",
													"  \"type\": \"object\",",
													"  \"required\": [",
													"    \"message\"",
													"  ],",
													"  \"properties\": {",
													"    \"message\": {",
													"      \"type\": \"string\",",
													"    }",
													"  }",
													"}",
													"",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test('Response Schema is valid', function() {",
													"  pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
													"});",
													"",
													"pm.test(\"Validate error message\", function () {",
													"   pm.expect(jsonData.message).to.include(\"Invalid argument email. Object didn't pass validation for format email:\");",
													"});",
													"console.log(\"Validation Status: \", tv4.error);"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{token_staff}}",
												"disabled": true
											},
											{
												"key": "Authorization",
												"value": "{{token_super_admin}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Agency of Hawaii\",\n    \"websiteURL\": \"aoh.com\",\n    \"email\": \"\",\n    \"streetAddress\": \"221B Bakers Street\",\n    \"city\": \"Honolulu\",\n    \"state\": \"FL\",\n    \"zip\": \"96795\",\n    \"agencyTimezone\": \"PST\"\n}"
										},
										"url": {
											"raw": "http://{{env}}/agencies/information",
											"protocol": "http",
											"host": [
												"{{env}}"
											],
											"path": [
												"agencies",
												"information"
											]
										}
									},
									"response": []
								},
								{
									"name": "Edit Agency Information - Street Address Field Blank",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0f4f51c9-53f5-4d28-bcb1-f7beaf5fd280",
												"type": "text/javascript",
												"exec": [
													"var schema = ",
													"{",
													"  \"type\": \"object\",",
													"  \"required\": [",
													"    \"message\"",
													"  ],",
													"  \"properties\": {",
													"    \"message\": {",
													"      \"type\": \"string\",",
													"    }",
													"  }",
													"}",
													"",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test('Response Schema is valid', function() {",
													"  pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
													"});",
													"",
													"pm.test(\"Validate error message\", function () {",
													"   pm.expect(jsonData.message).to.include(\"Invalid argument streetAddress. String is too short (0 chars), minimum 1\");",
													"});",
													"console.log(\"Validation Status: \", tv4.error);"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{token_staff}}",
												"disabled": true
											},
											{
												"key": "Authorization",
												"value": "{{token_super_admin}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Agency of Hawaii\",\n    \"websiteURL\": \"aoh.com\",\n    \"email\": \"aoh@comcate.com\",\n    \"streetAddress\": \"\",\n    \"city\": \"Honolulu\",\n    \"state\": \"FL\",\n    \"zip\": \"96795\",\n    \"agencyTimezone\": \"PST\"\n}"
										},
										"url": {
											"raw": "http://{{env}}/agencies/information",
											"protocol": "http",
											"host": [
												"{{env}}"
											],
											"path": [
												"agencies",
												"information"
											]
										}
									},
									"response": []
								},
								{
									"name": "Edit Agency Information - Street Address Character limitation(500)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b03cf961-d660-4abf-bbaa-53fa546a2f9b",
												"exec": [
													"var schema = ",
													"{",
													"  \"type\": \"object\",",
													"  \"required\": [",
													"    \"message\"",
													"  ],",
													"  \"properties\": {",
													"    \"message\": {",
													"      \"type\": \"string\",",
													"    }",
													"  }",
													"}",
													"",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test('Response Schema is valid', function() {",
													"  pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
													"});",
													"",
													"pm.test(\"Validate error message\", function () {",
													"   pm.expect(jsonData.message).to.include(\"Invalid argument streetAddress. String is too long (574 chars), maximum 500\");",
													"});",
													"console.log(\"Validation Status: \", tv4.error);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{token_staff}}",
												"disabled": true
											},
											{
												"key": "Authorization",
												"value": "{{token_super_admin}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Agency of Hawaii\",\n    \"websiteURL\": \"aoh.com\",\n    \"email\": \"aoh@comcate.com\",\n    \"streetAddress\": \"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.\",\n    \"city\": \"Honolulu\",\n    \"state\": \"FL\",\n    \"zip\": \"96795\",\n    \"agencyTimezone\": \"PST\"\n}"
										},
										"url": {
											"raw": "http://{{env}}/agencies/information",
											"protocol": "http",
											"host": [
												"{{env}}"
											],
											"path": [
												"agencies",
												"information"
											]
										}
									},
									"response": []
								},
								{
									"name": "Edit Agency Information - City Character limitation(50)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cd5fe0fc-d76f-4884-bd79-895f1677537c",
												"type": "text/javascript",
												"exec": [
													"var schema = ",
													"{",
													"  \"type\": \"object\",",
													"  \"required\": [",
													"    \"message\"",
													"  ],",
													"  \"properties\": {",
													"    \"message\": {",
													"      \"type\": \"string\",",
													"    }",
													"  }",
													"}",
													"",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test('Response Schema is valid', function() {",
													"  pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
													"});",
													"",
													"pm.test(\"Validate error message\", function () {",
													"   pm.expect(jsonData.message).to.include(\"Invalid argument city. String is too long (64 chars), maximum 50\");",
													"});",
													"console.log(\"Validation Status: \", tv4.error);"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{token_staff}}",
												"disabled": true
											},
											{
												"key": "Authorization",
												"value": "{{token_super_admin}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Agency of Hawaii\",\n    \"websiteURL\": \"aoh.com\",\n    \"email\": \"aoh@comcate.com\",\n    \"streetAddress\": \"221B Bakers Street\",\n    \"city\": \"HonoluluHonoluluHonoluluHonoluluHonoluluHonoluluHonoluluHonolulu\",\n    \"state\": \"FL\",\n    \"zip\": \"96795\",\n    \"agencyTimezone\": \"PST\"\n}"
										},
										"url": {
											"raw": "http://{{env}}/agencies/information",
											"protocol": "http",
											"host": [
												"{{env}}"
											],
											"path": [
												"agencies",
												"information"
											]
										}
									},
									"response": []
								},
								{
									"name": "Edit Agency Information - Zip Character limitation(15)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "55a7f2c9-ff92-4bf1-928c-b2ba5a0fa047",
												"type": "text/javascript",
												"exec": [
													"var schema = ",
													"{",
													"  \"type\": \"object\",",
													"  \"required\": [",
													"    \"message\"",
													"  ],",
													"  \"properties\": {",
													"    \"message\": {",
													"      \"type\": \"string\",",
													"    }",
													"  }",
													"}",
													"",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test('Response Schema is valid', function() {",
													"  pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
													"});",
													"",
													"pm.test(\"Validate error message\", function () {",
													"   pm.expect(jsonData.message).to.include(\"Invalid argument zip. String is too long (40 chars), maximum 15\");",
													"});",
													"console.log(\"Validation Status: \", tv4.error);"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{token_staff}}",
												"disabled": true
											},
											{
												"key": "Authorization",
												"value": "{{token_super_admin}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Agency of Hawaii\",\n    \"websiteURL\": \"aoh.com\",\n    \"email\": \"aoh@comcate.com\",\n    \"streetAddress\": \"221B Bakers Street\",\n    \"city\": \"Honolu\",\n    \"state\": \"FL\",\n    \"zip\": \"9679596795967959679596795967959679596795\",\n    \"agencyTimezone\": \"PST\"\n}"
										},
										"url": {
											"raw": "http://{{env}}/agencies/information",
											"protocol": "http",
											"host": [
												"{{env}}"
											],
											"path": [
												"agencies",
												"information"
											]
										}
									},
									"response": []
								},
								{
									"name": "Edit Agency Information - Invalid Email id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f569f186-fae6-4040-b25f-d0c7c4359b24",
												"type": "text/javascript",
												"exec": [
													"var schema = ",
													"{",
													"  \"type\": \"object\",",
													"  \"required\": [",
													"    \"message\"",
													"  ],",
													"  \"properties\": {",
													"    \"message\": {",
													"      \"type\": \"string\",",
													"    }",
													"  }",
													"}",
													"",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test('Response Schema is valid', function() {",
													"  pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
													"});",
													"",
													"pm.test(\"Validate error message\", function () {",
													"   pm.expect(jsonData.message).to.include(\"Invalid argument email. Object didn't pass validation for format email: aoh@comcate.comaoh@comcate.comaoh@comcate.comaoh\");",
													"});",
													"console.log(\"Validation Status: \", tv4.error);"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{token_staff}}",
												"disabled": true
											},
											{
												"key": "Authorization",
												"value": "{{token_super_admin}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Agency of Hawaii\",\n    \"websiteURL\": \"aoh.com\",\n    \"email\": \"aoh@comcate.comaoh@comcate.comaoh@comcate.comaoh\",\n    \"streetAddress\": \"221B Bakers Street\",\n    \"city\": \"Honolu\",\n    \"state\": \"FL\",\n    \"zip\": \"96795\",\n    \"agencyTimezone\": \"PST\"\n}"
										},
										"url": {
											"raw": "http://{{env}}/agencies/information",
											"protocol": "http",
											"host": [
												"{{env}}"
											],
											"path": [
												"agencies",
												"information"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Email Integration",
					"item": [
						{
							"name": "Create Agency - For Welcome Email",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "da5858e5-b8eb-4b98-af78-932218de8ce6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "fa0cbd16-03b8-4fc9-b37d-79cc99512405",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"",
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
											"});",
											"",
											"var responseSchema = {",
											"  \"type\": \"object\",",
											"  \"required\": [",
											"    \"id\",",
											"    \"name\",",
											"    \"websiteURL\",",
											"    \"agencyTimezone\",",
											"    \"whitelistURL\",",
											"    \"email\",",
											"    \"streetAddress\",",
											"    \"city\",",
											"    \"state\",",
											"    \"zip\",",
											"    \"xerce\"",
											"  ],",
											"  \"properties\": {",
											"    \"id\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"name\": {",
											"      \"type\": \"string\",",
											"      \"pattern\": \"\"",
											"    },",
											"    \"websiteURL\": {",
											"      \"type\": \"string\",",
											"    },",
											"    \"agencyTimezone\": {",
											"      \"type\": \"string\",",
											"    },",
											"    \"whitelistURL\": {",
											"      \"type\": \"string\",",
											"    },",
											"    \"email\": {",
											"      \"type\": \"string\",",
											"    },",
											"    \"streetAddress\": {",
											"      \"type\": \"string\",",
											"    },",
											"    \"city\": {",
											"      \"type\": \"string\",",
											"    },",
											"    \"state\": {",
											"      \"type\": \"string\",",
											"    },",
											"    \"zip\": {",
											"      \"type\": \"string\",",
											"    },",
											"    \"xerce\": {",
											"      \"type\": \"object\",",
											"      \"required\": [",
											"        \"id\",",
											"        \"name\",",
											"        \"isActive\",",
											"        \"caseNumberPrefix\",",
											"        \"isCaseNumberYearIncluded\",",
											"        \"caseNumberInitialization\",",
											"        \"isCaseNumberResettable\",",
											"        \"feeReceiptNumberPrefix\",",
											"        \"isFeeReceiptNumberYearIncluded\",",
											"        \"feeReceiptNumberInitialization\",",
											"        \"isFeeReceiptNumberResettable\",",
											"        \"allowCDBG\",",
											"        \"allowFeeTracking\",",
											"        \"allowTimeTracking\",",
											"        \"violationTypes\"",
											"      ],",
											"      \"properties\": {",
											"        \"id\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"name\": {",
											"          \"type\": \"string\",",
											"          ",
											"        },",
											"        \"isActive\": {",
											"          \"type\": \"boolean\"",
											"        },",
											"        \"caseNumberPrefix\": {",
											"          \"type\": \"string\",",
											"          ",
											"        },",
											"        \"isCaseNumberYearIncluded\": {",
											"          \"type\": \"boolean\"",
											"        },",
											"        \"caseNumberInitialization\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"isCaseNumberResettable\": {",
											"          \"type\": \"boolean\"",
											"        },",
											"        \"feeReceiptNumberPrefix\": {",
											"          \"type\": \"string\",",
											"          \"pattern\": \"\"",
											"        },",
											"        \"isFeeReceiptNumberYearIncluded\": {",
											"          \"type\": \"boolean\"",
											"        },",
											"        \"feeReceiptNumberInitialization\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"isFeeReceiptNumberResettable\": {",
											"          \"type\": \"boolean\"",
											"        },",
											"        \"allowCDBG\": {",
											"          \"type\": \"boolean\"",
											"        },",
											"        \"allowFeeTracking\": {",
											"          \"type\": \"boolean\"",
											"        },",
											"        \"allowTimeTracking\": {",
											"          \"type\": \"boolean\"",
											"        },",
											"        \"violationTypes\": {",
											"          \"type\": \"array\",",
											"          \"items\": {",
											"            \"type\": \"object\",",
											"            \"required\": [",
											"              \"id\",",
											"              \"isActive\",",
											"              \"label\",",
											"              ",
											"            ],",
											"            \"properties\": {",
											"              \"id\": {",
											"                \"type\": \"integer\"",
											"              },",
											"              \"isActive\": {",
											"                \"type\": \"boolean\"",
											"              },",
											"              \"label\": {",
											"                \"type\": \"string\",",
											"                \"pattern\": \"\"",
											"              },",
											"            }",
											"          }",
											"        }",
											"      }",
											"    }",
											"  }",
											"};",
											"",
											"pm.test('Response Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, responseSchema)).to.be.true;",
											"});",
											"console.log(\"Validation Status: \", tv4.error);",
											"",
											"pm.test('Agency ID is not null', function(){",
											"    pm.expect(jsonData.id!==null).to.be.true;",
											"});",
											"",
											"pm.test('Name is correct', function(){",
											"    pm.expect(jsonData.name ===",
											"    \"Agency of Neverland\").to.be.true;",
											"});",
											"",
											"pm.test('WebsiteURL is correct', function(){",
											"    pm.expect(jsonData.websiteURL ===",
											"    \"aon.com\").to.be.true;",
											"});",
											"",
											"pm.test('Timezone is correct', function(){",
											"    pm.expect(jsonData.agencyTimezone ===",
											"    \"HST\").to.be.true;",
											"});",
											"",
											"pm.test('whitelisted URL is correct', function(){",
											"    pm.expect(jsonData.whitelistURL ===",
											"    \"aon.com\").to.be.true;",
											"});",
											"",
											"pm.test('email is correct', function(){",
											"    pm.expect(jsonData.email ===",
											"    \"aon@comcate.com\").to.be.true;",
											"});",
											"",
											"pm.test('Street Address is correct', function(){",
											"    pm.expect(jsonData.streetAddress ===",
											"    \"Lockhart st\").to.be.true;",
											"});",
											"",
											"pm.test('city is correct', function(){",
											"    pm.expect(jsonData.city ===",
											"    \"Neverland\").to.be.true;",
											"});",
											"",
											"pm.test('state is correct', function(){",
											"    pm.expect(jsonData.state ===",
											"    \"TX\").to.be.true;",
											"});",
											"",
											"",
											"pm.test('zip is correct', function(){",
											"    pm.expect(jsonData.zip ===",
											"    \"96795\").to.be.true;",
											"});",
											"",
											"",
											"pm.test('Product is added with correct configurations', function(){",
											"    pm.expect(jsonData.xerce !== null).to.be.true;",
											"    pm.expect(jsonData.xerce.id !== null).to.be.true;",
											"    pm.expect(jsonData.xerce.name === \"Neverland CE\").to.be.true;",
											"    pm.expect(jsonData.xerce.isActive === true).to.be.true;",
											"    pm.expect(jsonData.xerce.caseNumberPrefix === \"NCE\").to.be.true;",
											"    pm.expect(jsonData.xerce.isCaseNumberYearIncluded === false).to.be.true;",
											"    pm.expect(jsonData.xerce.caseNumberInitialization === 1).to.be.true;",
											"    pm.expect(jsonData.xerce.isCaseNumberResettable === true).to.be.true;",
											"    pm.expect(jsonData.xerce.feeReceiptNumberPrefix === \"NFE\").to.be.true;",
											"    pm.expect(jsonData.xerce.isFeeReceiptNumberYearIncluded === false).to.be.true;",
											"    pm.expect(jsonData.xerce.feeReceiptNumberInitialization === 1).to.be.true;",
											"    pm.expect(jsonData.xerce.isFeeReceiptNumberResettable === true).to.be.true;",
											"    pm.expect(jsonData.xerce.allowCDBG === true).to.be.true;",
											"    pm.expect(jsonData.xerce.allowFeeTracking === true).to.be.true;",
											"    pm.expect(jsonData.xerce.allowTimeTracking === true).to.be.true;",
											"});",
											"",
											"",
											"pm.test('Violation type is added with correct configurations', function(){",
											"    pm.expect(jsonData.xerce !== null).to.be.true;",
											"    ",
											"    pm.expect(jsonData.xerce.violationTypes !== null).to.be.true;",
											"    pm.expect(jsonData.xerce.violationTypes[0].id !== null).to.be.true;",
											"    pm.expect(jsonData.xerce.violationTypes[0].label !== null).to.be.true;",
											"    pm.expect(jsonData.xerce.violationTypes[0].isActive === true).to.be.true;",
											"    pm.expect(jsonData.xerce.violationTypes[0].systemXerceViolationTypeId === 1).to.be.true;",
											"});",
											"",
											"pm.test(\"Response time is less than timeout\", function () {",
											"    pm.expect(pm.response.responseTime < pm.environment.get(\"timeout\"));",
											"});",
											"",
											"postman.setEnvironmentVariable(\"email_agency_id\",jsonData.id);",
											"postman.setEnvironmentVariable(\"email_agency_xerce_id\",jsonData.xerce.id);",
											"",
											"",
											"var numberOfVt = jsonData.xerce.violationTypes.length;",
											"",
											"for(var i= 1;i<= numberOfVt; i++){",
											"    pm.environment.set(\"email_test_violation_type_\"+i,jsonData.xerce.violationTypes[i-1].id)",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Agency of Neverland\",\n  \"websiteURL\": \"aon.com\",\n  \"agencyTimezone\": \"HST\",\n  \"whitelistURL\": \"aon.com\",\n  \"email\": \"aon@comcate.com\",\n  \"streetAddress\": \"Lockhart st\",\n  \"city\": \"Neverland\",\n  \"state\": \"TX\",\n  \"zip\": \"96795\",\n  \"xerce\": {\n    \"name\": \"Neverland CE\",\n    \"isActive\": true,\n    \"caseNumberPrefix\": \"NCE\",\n    \"isCaseNumberYearIncluded\": false,\n    \"caseNumberInitialization\": 1,\n    \"isCaseNumberResettable\": true,\n    \"feeReceiptNumberPrefix\": \"NFE\",\n    \"isFeeReceiptNumberYearIncluded\": false,\n    \"feeReceiptNumberInitialization\": 1,\n    \"isFeeReceiptNumberResettable\": true,\n    \"violationTypes\": [\n      {\n        \"systemXerceViolationTypeId\": 1,\n        \"isActive\": true\n      },\n       {\n        \"systemXerceViolationTypeId\": 2,\n        \"isActive\": true\n      }, \n      {\n        \"systemXerceViolationTypeId\": 3,\n        \"isActive\": true\n      },\n       {\n        \"systemXerceViolationTypeId\": 4,\n        \"isActive\": true\n      },\n       {\n        \"systemXerceViolationTypeId\": 5,\n        \"isActive\": true\n      }\n    ]\n  }\n}"
								},
								"url": {
									"raw": "http://{{env}}/admin/agencies",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"admin",
										"agencies"
									]
								},
								"description": "Create an agency, happy path scenario"
							},
							"response": []
						},
						{
							"name": "Super Admin Login - Email Test Agency",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a4e0f067-e3ac-4703-b74f-b3cc17805528",
										"type": "text/javascript",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Token is not null\", function () {",
											"    pm.expect(jsonData.token).to.not.eql(null);",
											"});",
											"",
											"pm.environment.set(\"token_super_admin_email_test\",\"Bearer \"+jsonData.token);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{env}}/admin/agencies/{{email_agency_id}}/login",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"admin",
										"agencies",
										"{{email_agency_id}}",
										"login"
									]
								},
								"description": "Comcate user logging in as a superadmin in agency"
							},
							"response": []
						},
						{
							"name": "Create Inactive User Site and Product Admin - No Email",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "edcdcf77-36d0-4276-bd2a-2fcee30a0b08",
										"exec": [
											"var expectedSchema = ",
											"{",
											"  \"type\": \"object\",",
											"  \"required\": [",
											"    \"id\",",
											"    \"firstName\",",
											"    \"lastName\",",
											"    \"email\",",
											"    \"phone\",",
											"    \"title\",",
											"    \"department\",",
											"    \"isActive\",",
											"    \"isSiteAdmin\",",
											"    \"xerce\"",
											"  ],",
											"  \"properties\": {",
											"    \"id\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"firstName\": {",
											"      \"type\": \"string\",",
											"      \"pattern\": \"\"",
											"    },",
											"    \"lastName\": {",
											"      \"type\": \"string\",",
											"      \"pattern\": \"\"",
											"    },",
											"    \"email\": {",
											"      \"type\": \"string\",",
											"      \"pattern\": \"\"",
											"    },",
											"    \"phone\": {",
											"      \"type\": \"string\",",
											"      \"pattern\": \"\"",
											"    },",
											"    \"title\": {",
											"      \"type\": \"string\",",
											"      \"pattern\": \"\"",
											"    },",
											"    \"department\": {",
											"      \"type\": \"string\",",
											"      \"pattern\": \"\"",
											"    },",
											"    \"isActive\": {",
											"      \"type\": \"boolean\"",
											"    },",
											"    \"isSiteAdmin\": {",
											"      \"type\": \"boolean\"",
											"    },",
											"    \"xerce\": {",
											"      \"type\": \"object\",",
											"      \"required\": [",
											"        \"id\",",
											"        \"xerceId\",",
											"        \"isActive\",",
											"        \"isProductAdmin\",",
											"        \"reportAccess\",",
											"        \"dashboardAccess\",",
											"        \"feesAccess\",",
											"        \"violationTypePermissions\"",
											"      ],",
											"      \"properties\": {",
											"        \"id\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"xerceId\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"isActive\": {",
											"          \"type\": \"boolean\"",
											"        },",
											"        \"isProductAdmin\": {",
											"          \"type\": \"boolean\"",
											"        },",
											"        \"reportAccess\": {",
											"          \"type\": \"string\",",
											"          \"pattern\": \"\"",
											"        },",
											"        \"dashboardAccess\": {",
											"          \"type\": \"string\",",
											"          \"pattern\": \"\"",
											"        },",
											"        \"feesAccess\": {",
											"          \"type\": \"string\",",
											"          \"pattern\": \"\"",
											"        },",
											"        \"violationTypePermissions\": {",
											"          \"type\": \"array\",",
											"          \"items\": {",
											"            \"type\": \"object\",",
											"            \"required\": [",
											"              \"id\",",
											"              \"configXerceViolationTypeId\",",
											"              \"violationTypeAccess\"",
											"            ],",
											"            \"properties\": {",
											"              \"id\": {",
											"                \"type\": \"integer\"",
											"              },",
											"              \"configXerceViolationTypeId\": {",
											"                \"type\": \"integer\"",
											"              },",
											"              \"violationTypeAccess\": {",
											"                \"type\": \"string\",",
											"                \"pattern\": \"\"",
											"              }",
											"            }",
											"          }",
											"        }",
											"      }",
											"    }",
											"  }",
											"};",
											"",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
											"",
											"});",
											"",
											"",
											"",
											"pm.test(\"Validate active\", function () {",
											"    pm.expect(jsonData.isActive).to.eql(false);",
											"});",
											"",
											"",
											"pm.test(\"Validate if site admin\", function () {",
											"    pm.expect(jsonData.isSiteAdmin).to.eql(true);",
											"});",
											"",
											"pm.test(\"Validate if product admin\", function () {",
											"    pm.expect(jsonData.xerce.isProductAdmin).to.eql(true);",
											"});",
											"",
											"pm.test(\"Validate if product active\", function () {",
											"    pm.expect(jsonData.xerce.isActive).to.eql(true);",
											"});",
											"",
											"pm.test(\"Validate report access\", function () {",
											"    pm.expect(jsonData.xerce.reportAccess).to.eql(\"NO_ACCESS\");",
											"});",
											"",
											"pm.test(\"Validate dashboard access\", function () {",
											"    pm.expect(jsonData.xerce.dashboardAccess).to.eql(\"SELF_DASHBOARD\");",
											"});",
											"",
											"",
											"pm.test(\"Validate fees access\", function () {",
											"    pm.expect(jsonData.xerce.feesAccess).to.eql(\"CAN_VOID\");",
											"});",
											"",
											"pm.test(\"Validate title\", function () {",
											"    pm.expect(jsonData.title).to.eql(\"Manager\");",
											"});",
											"",
											"pm.environment.set(\"siteproduct_inactive_id_email_test\",jsonData.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token_super_admin_email_test}}"
									},
									{
										"key": "",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"firstName\": \"Inactive\",\n  \"lastName\": \"Site + Product\",\n  \"email\": \"comcateuser@gmail.com\",\n  \"phone\": \"1234567890\",\n  \"title\": \"Manager\",\n  \"department\": \"Research\",\n  \"isActive\": false,\n  \"isSiteAdmin\": true,\n  \"xerce\": {\n    \"xerceId\": {{email_agency_xerce_id}},\n    \"isActive\": true,\n    \"isProductAdmin\": true,\n    \"reportAccess\": \"NO_ACCESS\",\n    \"dashboardAccess\": \"SELF_DASHBOARD\",\n    \"feesAccess\": \"CAN_VOID\",\n    \"violationTypePermissions\": [\n      {\n        \"configXerceViolationTypeId\": {{email_test_violation_type_1}},\n        \"violationTypeAccess\": \"BASIC\"\n      },\n      {\n        \"configXerceViolationTypeId\": {{email_test_violation_type_2}},\n        \"violationTypeAccess\": \"BASIC\"\n      },\n      {\n        \"configXerceViolationTypeId\": {{email_test_violation_type_3}},\n        \"violationTypeAccess\": \"BASIC\"\n      },\n      {\n        \"configXerceViolationTypeId\": {{email_test_violation_type_4}},\n        \"violationTypeAccess\": \"BASIC\"\n      },\n      {\n        \"configXerceViolationTypeId\": {{email_test_violation_type_5}},\n        \"violationTypeAccess\": \"READ_ONLY\"\n      }\n    ]\n\t}\n  }"
								},
								"url": {
									"raw": "http://{{env}}/users",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Activate Site and Product Admin - Welcome email",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8e2bf230-8eef-4aac-8147-cf31c49a8d89",
										"exec": [
											"var expectedSchema = ",
											"{",
											"  \"definitions\": {},",
											"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
											"  \"$id\": \"http://example.com\",",
											"  \"type\": \"object\",",
											"  \"required\": [",
											"    \"id\",",
											"    \"firstName\",",
											"    \"lastName\",",
											"    \"email\",",
											"    \"phone\",",
											"    \"title\",",
											"    \"department\",",
											"    \"isActive\",",
											"    \"isSiteAdmin\",",
											"    \"xerce\"",
											"  ],",
											"  \"properties\": {",
											"    \"id\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"firstName\": {",
											"      \"type\": \"string\",",
											"      \"pattern\": \"\"",
											"    },",
											"    \"lastName\": {",
											"      \"type\": \"string\",",
											"      \"pattern\": \"\"",
											"    },",
											"    \"email\": {",
											"      \"type\": \"string\",",
											"      \"pattern\": \"\"",
											"    },",
											"    \"phone\": {",
											"      \"type\": \"string\",",
											"      \"pattern\": \"\"",
											"    },",
											"    \"title\": {",
											"      \"type\": \"string\",",
											"      \"pattern\": \"\"",
											"    },",
											"    \"department\": {",
											"      \"type\": \"string\",",
											"      \"pattern\": \"\"",
											"    },",
											"    \"isActive\": {",
											"      \"type\": \"boolean\"",
											"    },",
											"    \"isSiteAdmin\": {",
											"      \"type\": \"boolean\"",
											"    },",
											"    \"xerce\": {",
											"      \"type\": \"object\",",
											"      \"required\": [",
											"        \"id\",",
											"        \"xerceId\",",
											"        \"isActive\",",
											"        \"isProductAdmin\",",
											"        \"reportAccess\",",
											"        \"dashboardAccess\",",
											"        \"feesAccess\",",
											"        \"violationTypePermissions\"",
											"      ],",
											"      \"properties\": {",
											"        \"id\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"xerceId\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"isActive\": {",
											"          \"type\": \"boolean\"",
											"        },",
											"        \"isProductAdmin\": {",
											"          \"type\": \"boolean\"",
											"        },",
											"        \"reportAccess\": {",
											"          \"type\": \"string\",",
											"          \"pattern\": \"\"",
											"        },",
											"        \"dashboardAccess\": {",
											"          \"type\": \"string\",",
											"          \"pattern\": \"\"",
											"        },",
											"        \"feesAccess\": {",
											"          \"type\": \"string\",",
											"          \"pattern\": \"\"",
											"        },",
											"        \"violationTypePermissions\": {",
											"          \"type\": \"array\",",
											"          \"items\": {",
											"            \"type\": \"object\",",
											"            \"required\": [",
											"              \"id\",",
											"              \"configXerceViolationTypeId\",",
											"              \"violationTypeAccess\"",
											"            ],",
											"            \"properties\": {",
											"              \"id\": {",
											"                \"type\": \"integer\"",
											"              },",
											"              \"configXerceViolationTypeId\": {",
											"                \"type\": \"integer\"",
											"              },",
											"              \"violationTypeAccess\": {",
											"                \"type\": \"string\",",
											"                \"pattern\": \"\"",
											"              }",
											"            }",
											"          }",
											"        }",
											"      }",
											"    }",
											"  }",
											"};",
											"",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
											"",
											"});",
											"",
											"",
											"pm.test(\"Validate active\", function () {",
											"    pm.expect(jsonData.isActive).to.eql(true);",
											"});",
											"",
											"",
											"pm.test(\"Validate if site admin\", function () {",
											"    pm.expect(jsonData.isSiteAdmin).to.eql(true);",
											"});",
											"",
											"pm.test(\"Validate if product admin\", function () {",
											"    pm.expect(jsonData.xerce.isProductAdmin).to.eql(true);",
											"});",
											"",
											"pm.test(\"Validate if product active\", function () {",
											"    pm.expect(jsonData.xerce.isActive).to.eql(true);",
											"});",
											"",
											"pm.test(\"Validate report access\", function () {",
											"    pm.expect(jsonData.xerce.reportAccess).to.eql(\"NO_ACCESS\");",
											"});",
											"",
											"pm.test(\"Validate dashboard access\", function () {",
											"    pm.expect(jsonData.xerce.dashboardAccess).to.eql(\"SELF_DASHBOARD\");",
											"});",
											"",
											"",
											"pm.test(\"Validate fees access\", function () {",
											"    pm.expect(jsonData.xerce.feesAccess).to.eql(\"CAN_VOID\");",
											"});",
											"",
											"pm.test(\"Validate title\", function () {",
											"    pm.expect(jsonData.title).to.eql(\"Manager\");",
											"});",
											"",
											"pm.environment.set(\"siteproduct_active_id\",jsonData.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token_super_admin_email_test}}"
									},
									{
										"key": "",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"firstName\": \"Active\",\n  \"lastName\": \"Site + Product\",\n  \"email\": \"comcateuser@gmail.com\",\n  \"phone\": \"1234567890\",\n  \"title\": \"Manager\",\n  \"department\": \"Research\",\n  \"isActive\": true,\n  \"isSiteAdmin\": true,\n  \"xerce\": {\n    \"xerceId\": {{email_agency_xerce_id}},\n    \"isActive\": true,\n    \"isProductAdmin\": true,\n    \"reportAccess\": \"NO_ACCESS\",\n    \"dashboardAccess\": \"SELF_DASHBOARD\",\n    \"feesAccess\": \"CAN_VOID\",\n    \"violationTypePermissions\": [\n      {\n                \"id\": 1,\n                \"configXerceViolationTypeId\": {{email_test_violation_type_1}},\n                \"violationTypeAccess\": \"BASIC\"\n            },\n            {\n                \"id\": 2,\n                \"configXerceViolationTypeId\": {{email_test_violation_type_2}},\n                \"violationTypeAccess\": \"BASIC\"\n            },\n            {\n                \"id\": 3,\n                \"configXerceViolationTypeId\": {{email_test_violation_type_3}},\n                \"violationTypeAccess\": \"BASIC\"\n            },\n            {\n                \"id\": 4,\n                \"configXerceViolationTypeId\": {{email_test_violation_type_4}},\n                \"violationTypeAccess\": \"BASIC\"\n            },\n            {\n                \"id\": 5,\n                \"configXerceViolationTypeId\": {{email_test_violation_type_5}},\n                \"violationTypeAccess\": \"READ_ONLY\"\n            }\n    ]\n\t}\n  }"
								},
								"url": {
									"raw": "http://{{env}}/users/{{siteproduct_inactive_id_email_test}}",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"users",
										"{{siteproduct_inactive_id_email_test}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Reset Password Email",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "89a893ce-93af-49e8-b809-f812210acd8c",
										"exec": [
											"",
											"var jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(jsonData.response).to.include(\"ok\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token_super_admin_email_test}}"
									},
									{
										"key": "",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{env}}/users/{{siteproduct_inactive_id_email_test}}/reset-password",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"users",
										"{{siteproduct_inactive_id_email_test}}",
										"reset-password"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deactivate Site and Product Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "019fb691-e484-417c-8cdd-b12c53b1e09b",
										"exec": [
											"var expectedSchema = ",
											"{",
											"  \"definitions\": {},",
											"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
											"  \"$id\": \"http://example.com\",",
											"  \"type\": \"object\",",
											"  \"required\": [",
											"    \"id\",",
											"    \"firstName\",",
											"    \"lastName\",",
											"    \"email\",",
											"    \"phone\",",
											"    \"title\",",
											"    \"department\",",
											"    \"isActive\",",
											"    \"isSiteAdmin\",",
											"    \"xerce\"",
											"  ],",
											"  \"properties\": {",
											"    \"id\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"firstName\": {",
											"      \"type\": \"string\",",
											"      \"pattern\": \"\"",
											"    },",
											"    \"lastName\": {",
											"      \"type\": \"string\",",
											"      \"pattern\": \"\"",
											"    },",
											"    \"email\": {",
											"      \"type\": \"string\",",
											"      \"pattern\": \"\"",
											"    },",
											"    \"phone\": {",
											"      \"type\": \"string\",",
											"      \"pattern\": \"\"",
											"    },",
											"    \"title\": {",
											"      \"type\": \"string\",",
											"      \"pattern\": \"\"",
											"    },",
											"    \"department\": {",
											"      \"type\": \"string\",",
											"      \"pattern\": \"\"",
											"    },",
											"    \"isActive\": {",
											"      \"type\": \"boolean\"",
											"    },",
											"    \"isSiteAdmin\": {",
											"      \"type\": \"boolean\"",
											"    },",
											"    \"xerce\": {",
											"      \"type\": \"object\",",
											"      \"required\": [",
											"        \"id\",",
											"        \"xerceId\",",
											"        \"isActive\",",
											"        \"isProductAdmin\",",
											"        \"reportAccess\",",
											"        \"dashboardAccess\",",
											"        \"feesAccess\",",
											"        \"violationTypePermissions\"",
											"      ],",
											"      \"properties\": {",
											"        \"id\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"xerceId\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"isActive\": {",
											"          \"type\": \"boolean\"",
											"        },",
											"        \"isProductAdmin\": {",
											"          \"type\": \"boolean\"",
											"        },",
											"        \"reportAccess\": {",
											"          \"type\": \"string\",",
											"          \"pattern\": \"\"",
											"        },",
											"        \"dashboardAccess\": {",
											"          \"type\": \"string\",",
											"          \"pattern\": \"\"",
											"        },",
											"        \"feesAccess\": {",
											"          \"type\": \"string\",",
											"          \"pattern\": \"\"",
											"        },",
											"        \"violationTypePermissions\": {",
											"          \"type\": \"array\",",
											"          \"items\": {",
											"            \"type\": \"object\",",
											"            \"required\": [",
											"              \"id\",",
											"              \"configXerceViolationTypeId\",",
											"              \"violationTypeAccess\"",
											"            ],",
											"            \"properties\": {",
											"              \"id\": {",
											"                \"type\": \"integer\"",
											"              },",
											"              \"configXerceViolationTypeId\": {",
											"                \"type\": \"integer\"",
											"              },",
											"              \"violationTypeAccess\": {",
											"                \"type\": \"string\",",
											"                \"pattern\": \"\"",
											"              }",
											"            }",
											"          }",
											"        }",
											"      }",
											"    }",
											"  }",
											"};",
											"",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
											"",
											"});",
											"",
											"",
											"pm.test(\"Validate active\", function () {",
											"    pm.expect(jsonData.isActive).to.eql(false);",
											"});",
											"",
											"",
											"pm.test(\"Validate if site admin\", function () {",
											"    pm.expect(jsonData.isSiteAdmin).to.eql(true);",
											"});",
											"",
											"pm.test(\"Validate if product admin\", function () {",
											"    pm.expect(jsonData.xerce.isProductAdmin).to.eql(true);",
											"});",
											"",
											"pm.test(\"Validate if product active\", function () {",
											"    pm.expect(jsonData.xerce.isActive).to.eql(true);",
											"});",
											"",
											"pm.test(\"Validate report access\", function () {",
											"    pm.expect(jsonData.xerce.reportAccess).to.eql(\"NO_ACCESS\");",
											"});",
											"",
											"pm.test(\"Validate dashboard access\", function () {",
											"    pm.expect(jsonData.xerce.dashboardAccess).to.eql(\"SELF_DASHBOARD\");",
											"});",
											"",
											"",
											"pm.test(\"Validate fees access\", function () {",
											"    pm.expect(jsonData.xerce.feesAccess).to.eql(\"CAN_VOID\");",
											"});",
											"",
											"pm.test(\"Validate title\", function () {",
											"    pm.expect(jsonData.title).to.eql(\"Manager\");",
											"});",
											"",
											"pm.environment.set(\"siteproduct_active_id\",jsonData.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token_super_admin_email_test}}"
									},
									{
										"key": "",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"firstName\": \"Active\",\n  \"lastName\": \"Site + Product\",\n  \"email\": \"comcateuser@gmail.com\",\n  \"phone\": \"1234567890\",\n  \"title\": \"Manager\",\n  \"department\": \"Research\",\n  \"isActive\": false,\n  \"isSiteAdmin\": true,\n  \"xerce\": {\n    \"xerceId\": {{email_agency_xerce_id}},\n    \"isActive\": true,\n    \"isProductAdmin\": true,\n    \"reportAccess\": \"NO_ACCESS\",\n    \"dashboardAccess\": \"SELF_DASHBOARD\",\n    \"feesAccess\": \"CAN_VOID\",\n    \"violationTypePermissions\": [\n      {\n                \"id\": 1,\n                \"configXerceViolationTypeId\": {{email_test_violation_type_1}},\n                \"violationTypeAccess\": \"BASIC\"\n            },\n            {\n                \"id\": 2,\n                \"configXerceViolationTypeId\": {{email_test_violation_type_2}},\n                \"violationTypeAccess\": \"BASIC\"\n            },\n            {\n                \"id\": 3,\n                \"configXerceViolationTypeId\": {{email_test_violation_type_3}},\n                \"violationTypeAccess\": \"BASIC\"\n            },\n            {\n                \"id\": 4,\n                \"configXerceViolationTypeId\": {{email_test_violation_type_4}},\n                \"violationTypeAccess\": \"BASIC\"\n            },\n            {\n                \"id\": 5,\n                \"configXerceViolationTypeId\": {{email_test_violation_type_5}},\n                \"violationTypeAccess\": \"READ_ONLY\"\n            }\n    ]\n\t}\n  }"
								},
								"url": {
									"raw": "http://{{env}}/users/{{siteproduct_inactive_id_email_test}}",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"users",
										"{{siteproduct_inactive_id_email_test}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Re-activate Site and Product Admin - No Welcome email",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8e2bf230-8eef-4aac-8147-cf31c49a8d89",
										"exec": [
											"var expectedSchema = ",
											"{",
											"  \"definitions\": {},",
											"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
											"  \"$id\": \"http://example.com\",",
											"  \"type\": \"object\",",
											"  \"required\": [",
											"    \"id\",",
											"    \"firstName\",",
											"    \"lastName\",",
											"    \"email\",",
											"    \"phone\",",
											"    \"title\",",
											"    \"department\",",
											"    \"isActive\",",
											"    \"isSiteAdmin\",",
											"    \"xerce\"",
											"  ],",
											"  \"properties\": {",
											"    \"id\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"firstName\": {",
											"      \"type\": \"string\",",
											"      \"pattern\": \"\"",
											"    },",
											"    \"lastName\": {",
											"      \"type\": \"string\",",
											"      \"pattern\": \"\"",
											"    },",
											"    \"email\": {",
											"      \"type\": \"string\",",
											"      \"pattern\": \"\"",
											"    },",
											"    \"phone\": {",
											"      \"type\": \"string\",",
											"      \"pattern\": \"\"",
											"    },",
											"    \"title\": {",
											"      \"type\": \"string\",",
											"      \"pattern\": \"\"",
											"    },",
											"    \"department\": {",
											"      \"type\": \"string\",",
											"      \"pattern\": \"\"",
											"    },",
											"    \"isActive\": {",
											"      \"type\": \"boolean\"",
											"    },",
											"    \"isSiteAdmin\": {",
											"      \"type\": \"boolean\"",
											"    },",
											"    \"xerce\": {",
											"      \"type\": \"object\",",
											"      \"required\": [",
											"        \"id\",",
											"        \"xerceId\",",
											"        \"isActive\",",
											"        \"isProductAdmin\",",
											"        \"reportAccess\",",
											"        \"dashboardAccess\",",
											"        \"feesAccess\",",
											"        \"violationTypePermissions\"",
											"      ],",
											"      \"properties\": {",
											"        \"id\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"xerceId\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"isActive\": {",
											"          \"type\": \"boolean\"",
											"        },",
											"        \"isProductAdmin\": {",
											"          \"type\": \"boolean\"",
											"        },",
											"        \"reportAccess\": {",
											"          \"type\": \"string\",",
											"          \"pattern\": \"\"",
											"        },",
											"        \"dashboardAccess\": {",
											"          \"type\": \"string\",",
											"          \"pattern\": \"\"",
											"        },",
											"        \"feesAccess\": {",
											"          \"type\": \"string\",",
											"          \"pattern\": \"\"",
											"        },",
											"        \"violationTypePermissions\": {",
											"          \"type\": \"array\",",
											"          \"items\": {",
											"            \"type\": \"object\",",
											"            \"required\": [",
											"              \"id\",",
											"              \"configXerceViolationTypeId\",",
											"              \"violationTypeAccess\"",
											"            ],",
											"            \"properties\": {",
											"              \"id\": {",
											"                \"type\": \"integer\"",
											"              },",
											"              \"configXerceViolationTypeId\": {",
											"                \"type\": \"integer\"",
											"              },",
											"              \"violationTypeAccess\": {",
											"                \"type\": \"string\",",
											"                \"pattern\": \"\"",
											"              }",
											"            }",
											"          }",
											"        }",
											"      }",
											"    }",
											"  }",
											"};",
											"",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
											"",
											"});",
											"",
											"",
											"pm.test(\"Validate active\", function () {",
											"    pm.expect(jsonData.isActive).to.eql(true);",
											"});",
											"",
											"",
											"pm.test(\"Validate if site admin\", function () {",
											"    pm.expect(jsonData.isSiteAdmin).to.eql(true);",
											"});",
											"",
											"pm.test(\"Validate if product admin\", function () {",
											"    pm.expect(jsonData.xerce.isProductAdmin).to.eql(true);",
											"});",
											"",
											"pm.test(\"Validate if product active\", function () {",
											"    pm.expect(jsonData.xerce.isActive).to.eql(true);",
											"});",
											"",
											"pm.test(\"Validate report access\", function () {",
											"    pm.expect(jsonData.xerce.reportAccess).to.eql(\"NO_ACCESS\");",
											"});",
											"",
											"pm.test(\"Validate dashboard access\", function () {",
											"    pm.expect(jsonData.xerce.dashboardAccess).to.eql(\"SELF_DASHBOARD\");",
											"});",
											"",
											"",
											"pm.test(\"Validate fees access\", function () {",
											"    pm.expect(jsonData.xerce.feesAccess).to.eql(\"CAN_VOID\");",
											"});",
											"",
											"pm.test(\"Validate title\", function () {",
											"    pm.expect(jsonData.title).to.eql(\"Manager\");",
											"});",
											"",
											"pm.environment.set(\"siteproduct_active_id\",jsonData.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token_super_admin_email_test}}"
									},
									{
										"key": "",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"firstName\": \"Active\",\n  \"lastName\": \"Site + Product\",\n  \"email\": \"comcateuser@gmail.com\",\n  \"phone\": \"1234567890\",\n  \"title\": \"Manager\",\n  \"department\": \"Research\",\n  \"isActive\": true,\n  \"isSiteAdmin\": true,\n  \"xerce\": {\n    \"xerceId\": {{email_agency_xerce_id}},\n    \"isActive\": true,\n    \"isProductAdmin\": true,\n    \"reportAccess\": \"NO_ACCESS\",\n    \"dashboardAccess\": \"SELF_DASHBOARD\",\n    \"feesAccess\": \"CAN_VOID\",\n    \"violationTypePermissions\": [\n      {\n                \"id\": 1,\n                \"configXerceViolationTypeId\": {{email_test_violation_type_1}},\n                \"violationTypeAccess\": \"BASIC\"\n            },\n            {\n                \"id\": 2,\n                \"configXerceViolationTypeId\": {{email_test_violation_type_2}},\n                \"violationTypeAccess\": \"BASIC\"\n            },\n            {\n                \"id\": 3,\n                \"configXerceViolationTypeId\": {{email_test_violation_type_3}},\n                \"violationTypeAccess\": \"BASIC\"\n            },\n            {\n                \"id\": 4,\n                \"configXerceViolationTypeId\": {{email_test_violation_type_4}},\n                \"violationTypeAccess\": \"BASIC\"\n            },\n            {\n                \"id\": 5,\n                \"configXerceViolationTypeId\": {{email_test_violation_type_5}},\n                \"violationTypeAccess\": \"READ_ONLY\"\n            }\n    ]\n\t}\n  }"
								},
								"url": {
									"raw": "http://{{env}}/users/{{siteproduct_inactive_id_email_test}}",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"users",
										"{{siteproduct_inactive_id_email_test}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Forgot password request - User not present",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "67585d07-a11d-42eb-af93-9a5f53f222a4",
										"exec": [
											"",
											"var jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(jsonData.message).to.include(\"User account not found\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token_super_admin_email_test}}",
										"disabled": true
									},
									{
										"key": "",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"pratik@velotio.com\"\n}"
								},
								"url": {
									"raw": "http://{{env}}/agencies/{{aoh_agency_id}}/users/forgot-password",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"agencies",
										"{{aoh_agency_id}}",
										"users",
										"forgot-password"
									]
								}
							},
							"response": []
						},
						{
							"name": "Forgot password request - Incorrect email format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "95459883-43e4-4fc7-9832-41a4be069dad",
										"exec": [
											"",
											"var jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(jsonData.message).to.include(\"Invalid argument email. Object didn't pass validation for format email\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token_super_admin_email_test}}",
										"disabled": true
									},
									{
										"key": "",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"pratik.velotio.com\"\n}"
								},
								"url": {
									"raw": "http://{{env}}/agencies/{{email_agency_id}}/users/forgot-password",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"agencies",
										"{{email_agency_id}}",
										"users",
										"forgot-password"
									]
								}
							},
							"response": []
						},
						{
							"name": "Forgot password request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "66d736a0-830d-4b18-a828-62b7f2092e24",
										"exec": [
											"",
											"var jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(jsonData.response).to.include(\"ok\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token_super_admin_email_test}}",
										"disabled": true
									},
									{
										"key": "",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"comcateuser@gmail.com\"\n}"
								},
								"url": {
									"raw": "http://{{env}}/agencies/{{email_agency_id}}/users/forgot-password",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"agencies",
										"{{email_agency_id}}",
										"users",
										"forgot-password"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Product Settings",
			"item": [
				{
					"name": "Notice Form Sections",
					"item": [
						{
							"name": "Valid Header",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4fa733ae-56cf-4b0d-92aa-b78449286c56",
										"type": "text/javascript",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"var expectedSchema = {",
											"  \"type\": \"object\",",
											"  \"required\": [",
											"    \"id\",",
											"    \"label\",",
											"    \"sectionType\",",
											"    \"content\",",
											"    \"isActive\",",
											"    \"createdBy\",",
											"    \"updatedBy\",",
											"    \"createdAt\",",
											"    \"updatedAt\"",
											"  ],",
											"  \"properties\": {",
											"    \"id\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"label\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"sectionType\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"content\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"isActive\": {",
											"      \"type\": \"boolean\"",
											"    },",
											"    \"createdBy\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"updatedBy\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"createdAt\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"updatedAt\": {",
											"      \"type\": \"string\"",
											"    }",
											"  }",
											"};",
											"",
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
											"});",
											"",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
											"",
											"});",
											"",
											"pm.test(\"Validate label\", function () {",
											"    pm.expect(jsonData.label).to.eql(\"Valid Header\");",
											"});",
											"",
											"pm.test(\"Validate if active\", function () {",
											"    pm.expect(jsonData.isActive).to.eql(true);",
											"});",
											"",
											"pm.test(\"Validate section type\", function () {",
											"    pm.expect(jsonData.sectionType).to.eql(\"HEADER\");",
											"});",
											"",
											"pm.test(\"Validate content\", function () {",
											"    pm.expect(jsonData.content).to.eql(\"<html><head></head><body><h1>Default Header</h1></body></html>\");",
											"});",
											"",
											"pm.test(\"Validate created by\", function () {",
											"    pm.expect(jsonData.createdBy).to.eql(\"Product Only\");",
											"});",
											"",
											"pm.test(\"Validate updated by\", function () {",
											"    pm.expect(jsonData.updatedBy).to.eql(\"Product Only\");",
											"});",
											"",
											"postman.setEnvironmentVariable(\"valid_header_id\",jsonData.id);",
											"postman.setEnvironmentVariable(\"valid_header_content\",jsonData.content);",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_product_admin}}",
										"description": "}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token_super_admin}}",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"label\": \"Valid Header\",\n\t\"isActive\": true,\n\t\"sectionType\": \"HEADER\",\n    \"content\": \"<html><head></head><body><h1>Default Header</h1></body></html>\"\n}\n"
								},
								"url": {
									"raw": "http://{{env}}/xerce/config/notice-form-sections",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"xerce",
										"config",
										"notice-form-sections"
									]
								}
							},
							"response": []
						},
						{
							"name": "Valid Header II",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4fa733ae-56cf-4b0d-92aa-b78449286c56",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"var expectedSchema = {",
											"  \"type\": \"object\",",
											"  \"required\": [",
											"    \"id\",",
											"    \"label\",",
											"    \"sectionType\",",
											"    \"content\",",
											"    \"isActive\",",
											"    \"createdBy\",",
											"    \"updatedBy\",",
											"    \"createdAt\",",
											"    \"updatedAt\"",
											"  ],",
											"  \"properties\": {",
											"    \"id\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"label\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"sectionType\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"content\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"isActive\": {",
											"      \"type\": \"boolean\"",
											"    },",
											"    \"createdBy\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"updatedBy\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"createdAt\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"updatedAt\": {",
											"      \"type\": \"string\"",
											"    }",
											"  }",
											"};",
											"",
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
											"});",
											"",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
											"",
											"});",
											"",
											"pm.test(\"Validate label\", function () {",
											"    pm.expect(jsonData.label).to.eql(\"Valid Header II\");",
											"});",
											"",
											"pm.test(\"Validate if active\", function () {",
											"    pm.expect(jsonData.isActive).to.eql(true);",
											"});",
											"",
											"pm.test(\"Validate section type\", function () {",
											"    pm.expect(jsonData.sectionType).to.eql(\"HEADER\");",
											"});",
											"",
											"pm.test(\"Validate content\", function () {",
											"    pm.expect(jsonData.content).to.eql(\"<html><head></head><body><h1>Default Header II</h1></body></html>\");",
											"});",
											"",
											"pm.test(\"Validate created by\", function () {",
											"    pm.expect(jsonData.createdBy).to.eql(\"Product Only\");",
											"});",
											"",
											"pm.test(\"Validate updated by\", function () {",
											"    pm.expect(jsonData.updatedBy).to.eql(\"Product Only\");",
											"});",
											"",
											"postman.setEnvironmentVariable(\"valid_header_id_ii\",jsonData.id);",
											"postman.setEnvironmentVariable(\"valid_header_content_ii\",jsonData.content);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"description": "}",
										"key": "Authorization",
										"value": "{{token_product_admin}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token_super_admin}}",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"label\": \"Valid Header II\",\n\t\"isActive\": true,\n\t\"sectionType\": \"HEADER\",\n    \"content\": \"<html><head></head><body><h1>Default Header II</h1></body></html>\"\n}\n"
								},
								"url": {
									"raw": "http://{{env}}/xerce/config/notice-form-sections",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"xerce",
										"config",
										"notice-form-sections"
									]
								}
							},
							"response": []
						},
						{
							"name": "Valid header - Inactive",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d7a73842-ef1a-42d7-a97f-28c40d654f67",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"var expectedSchema = {",
											"  \"type\": \"object\",",
											"  \"required\": [",
											"    \"id\",",
											"    \"label\",",
											"    \"sectionType\",",
											"    \"content\",",
											"    \"isActive\",",
											"    \"createdBy\",",
											"    \"updatedBy\",",
											"    \"createdAt\",",
											"    \"updatedAt\"",
											"  ],",
											"  \"properties\": {",
											"    \"id\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"label\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"sectionType\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"content\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"isActive\": {",
											"      \"type\": \"boolean\"",
											"    },",
											"    \"createdBy\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"updatedBy\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"createdAt\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"updatedAt\": {",
											"      \"type\": \"string\"",
											"    }",
											"  }",
											"};",
											"",
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
											"});",
											"",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
											"",
											"});",
											"",
											"pm.test(\"Validate label\", function () {",
											"    pm.expect(jsonData.label).to.eql(\"Valid Header Inactive\");",
											"});",
											"",
											"pm.test(\"Validate if active\", function () {",
											"    pm.expect(jsonData.isActive).to.eql(false);",
											"});",
											"",
											"pm.test(\"Validate section type\", function () {",
											"    pm.expect(jsonData.sectionType).to.eql(\"HEADER\");",
											"});",
											"",
											"pm.test(\"Validate content\", function () {",
											"    pm.expect(jsonData.content).to.eql(\"<html><head></head><body><h1>Default Inactive Header</h1></body></html>\");",
											"});",
											"",
											"pm.test(\"Validate created by\", function () {",
											"    pm.expect(jsonData.createdBy).to.eql(\"Product Only\");",
											"});",
											"",
											"pm.test(\"Validate updated by\", function () {",
											"    pm.expect(jsonData.updatedBy).to.eql(\"Product Only\");",
											"});",
											"",
											"postman.setEnvironmentVariable(\"valid_inactive_header_id\",jsonData.id);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_product_admin}}",
										"description": "}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token_super_admin}}",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"label\": \"Valid Header Inactive\",\n\t\"isActive\": false,\n\t\"sectionType\": \"HEADER\",\n    \"content\": \"<html><head></head><body><h1>Default Inactive Header</h1></body></html>\"\n}\n"
								},
								"url": {
									"raw": "http://{{env}}/xerce/config/notice-form-sections",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"xerce",
										"config",
										"notice-form-sections"
									]
								}
							},
							"response": []
						},
						{
							"name": "Valid Footer",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e27187ba-a83f-4061-83c9-8d34fc5af409",
										"type": "text/javascript",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"var expectedSchema = {",
											"  \"type\": \"object\",",
											"  \"required\": [",
											"    \"id\",",
											"    \"label\",",
											"    \"sectionType\",",
											"    \"content\",",
											"    \"isActive\",",
											"    \"createdBy\",",
											"    \"updatedBy\",",
											"    \"createdAt\",",
											"    \"updatedAt\"",
											"  ],",
											"  \"properties\": {",
											"    \"id\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"label\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"sectionType\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"content\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"isActive\": {",
											"      \"type\": \"boolean\"",
											"    },",
											"    \"createdBy\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"updatedBy\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"createdAt\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"updatedAt\": {",
											"      \"type\": \"string\"",
											"    }",
											"  }",
											"};",
											"",
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
											"});",
											"",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
											"",
											"});",
											"",
											"pm.test(\"Validate label\", function () {",
											"    pm.expect(jsonData.label).to.eql(\"Valid Footer\");",
											"});",
											"",
											"pm.test(\"Validate if active\", function () {",
											"    pm.expect(jsonData.isActive).to.eql(true);",
											"});",
											"",
											"pm.test(\"Validate section type\", function () {",
											"    pm.expect(jsonData.sectionType).to.eql(\"FOOTER\");",
											"});",
											"",
											"pm.test(\"Validate content\", function () {",
											"    pm.expect(jsonData.content).to.eql(\"<html><head></head><body><h1>Default Footer</h1></body></html>\");",
											"});",
											"",
											"pm.test(\"Validate created by\", function () {",
											"    pm.expect(jsonData.createdBy).to.eql(\"Product Only\");",
											"});",
											"",
											"pm.test(\"Validate updated by\", function () {",
											"    pm.expect(jsonData.updatedBy).to.eql(\"Product Only\");",
											"});",
											"",
											"postman.setEnvironmentVariable(\"valid_footer_id\",jsonData.id);",
											"postman.setEnvironmentVariable(\"valid_footer_content\",jsonData.content);",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_product_admin}}",
										"description": "}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token_super_admin}}",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"label\": \"Valid Footer\",\n\t\"isActive\": true,\n\t\"sectionType\": \"FOOTER\",\n    \"content\": \"<html><head></head><body><h1>Default Footer</h1></body></html>\"\n}\n"
								},
								"url": {
									"raw": "http://{{env}}/xerce/config/notice-form-sections",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"xerce",
										"config",
										"notice-form-sections"
									]
								}
							},
							"response": []
						},
						{
							"name": "Empty Label",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "154d3569-10bd-4c37-913d-3042f87b020a",
										"type": "text/javascript",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Throws error message\",function(){",
											"    pm.expect(jsonData.message).to.equal(\"Invalid argument label. String is too short (0 chars), minimum 1\");",
											"})",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_product_admin}}",
										"description": "}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token_super_admin}}",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"label\": \"\",\n\t\"isActive\": true,\n\t\"sectionType\": \"FOOTER\",\n    \"content\": \"<html><head></head><body><h1>Default Footer</h1></body></html>\"\n}\n"
								},
								"url": {
									"raw": "http://{{env}}/xerce/config/notice-form-sections/{{valid_footer_id}}",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"xerce",
										"config",
										"notice-form-sections",
										"{{valid_footer_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Label lengh more than maximum",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "12dcf67c-f6c8-4113-9b0f-a7b7a95df134",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Throws error message\",function(){",
											"    pm.expect(jsonData.message).to.equal(\"Invalid argument label. String is too long (574 chars), maximum 200\");",
											"})",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_product_admin}}",
										"description": "}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token_super_admin}}",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"label\": \"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.\",\n\t\"isActive\": true,\n\t\"sectionType\": \"FOOTER\",\n    \"content\": \"<html><head></head><body><h1>Default Footer</h1></body></html>\"\n}\n"
								},
								"url": {
									"raw": "http://{{env}}/xerce/config/notice-form-sections/{{valid_footer_id}}",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"xerce",
										"config",
										"notice-form-sections",
										"{{valid_footer_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Label Contains special charecters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a32aadab-6b6b-415d-87ed-856ad106da4e",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"var expectedSchema = {",
											"  \"type\": \"object\",",
											"  \"required\": [",
											"    \"id\",",
											"    \"label\",",
											"    \"sectionType\",",
											"    \"content\",",
											"    \"isActive\",",
											"    \"createdBy\",",
											"    \"updatedBy\",",
											"    \"createdAt\",",
											"    \"updatedAt\"",
											"  ],",
											"  \"properties\": {",
											"    \"id\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"label\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"sectionType\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"content\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"isActive\": {",
											"      \"type\": \"boolean\"",
											"    },",
											"    \"createdBy\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"updatedBy\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"createdAt\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"updatedAt\": {",
											"      \"type\": \"string\"",
											"    }",
											"  }",
											"};",
											"",
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,202]);",
											"});",
											"",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
											"",
											"});",
											"",
											"pm.test(\"Validate label\", function () {",
											"    pm.expect(jsonData.label).to.eql(\"$p3Cial C#R3ct3r$\");",
											"});",
											"",
											"pm.test(\"Validate if active\", function () {",
											"    pm.expect(jsonData.isActive).to.eql(true);",
											"});",
											"",
											"pm.test(\"Validate section type\", function () {",
											"    pm.expect(jsonData.sectionType).to.eql(\"HEADER\");",
											"});",
											"",
											"pm.test(\"Validate content\", function () {",
											"    pm.expect(jsonData.content).to.eql(\"<html><head></head><body><h1>Default Header</h1></body></html>\");",
											"});",
											"",
											"pm.test(\"Validate created by\", function () {",
											"    pm.expect(jsonData.createdBy).to.eql(\"Product Only\");",
											"});",
											"",
											"pm.test(\"Validate updated by\", function () {",
											"    pm.expect(jsonData.updatedBy).to.eql(\"Product Only\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_product_admin}}",
										"description": "}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token_super_admin}}",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"label\": \"$p3Cial C#R3ct3r$\",\n\t\"isActive\": true,\n\t\"sectionType\": \"HEADER\",\n    \"content\": \"<html><head></head><body><h1>Default Header</h1></body></html>\"\n}\n"
								},
								"url": {
									"raw": "http://{{env}}/xerce/config/notice-form-sections/{{valid_header_id}}",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"xerce",
										"config",
										"notice-form-sections",
										"{{valid_header_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Plain text content",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4cdd9195-c497-4f99-9ce5-c3a03106f3d5",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"var expectedSchema = {",
											"  \"type\": \"object\",",
											"  \"required\": [",
											"    \"id\",",
											"    \"label\",",
											"    \"sectionType\",",
											"    \"content\",",
											"    \"isActive\",",
											"    \"createdBy\",",
											"    \"updatedBy\",",
											"    \"createdAt\",",
											"    \"updatedAt\"",
											"  ],",
											"  \"properties\": {",
											"    \"id\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"label\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"sectionType\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"content\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"isActive\": {",
											"      \"type\": \"boolean\"",
											"    },",
											"    \"createdBy\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"updatedBy\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"createdAt\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"updatedAt\": {",
											"      \"type\": \"string\"",
											"    }",
											"  }",
											"};",
											"",
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,202]);",
											"});",
											"",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
											"",
											"});",
											"",
											"pm.test(\"Validate label\", function () {",
											"    pm.expect(jsonData.label).to.eql(\"Plain text Content\");",
											"});",
											"",
											"pm.test(\"Validate if active\", function () {",
											"    pm.expect(jsonData.isActive).to.eql(true);",
											"});",
											"",
											"pm.test(\"Validate section type\", function () {",
											"    pm.expect(jsonData.sectionType).to.eql(\"HEADER\");",
											"});",
											"",
											"pm.test(\"Validate content\", function () {",
											"    pm.expect(jsonData.content).to.eql(\"What is Lorem Ipsum? Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.\");",
											"});",
											"",
											"pm.test(\"Validate created by\", function () {",
											"    pm.expect(jsonData.createdBy).to.eql(\"Product Only\");",
											"});",
											"",
											"pm.test(\"Validate updated by\", function () {",
											"    pm.expect(jsonData.updatedBy).to.eql(\"Product Only\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_product_admin}}",
										"description": "}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token_super_admin}}",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"label\": \"Plain text Content\",\n\t\"isActive\": true,\n\t\"sectionType\": \"HEADER\",\n    \"content\": \"What is Lorem Ipsum? Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.\"\n}\n"
								},
								"url": {
									"raw": "http://{{env}}/xerce/config/notice-form-sections/{{valid_header_id}}",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"xerce",
										"config",
										"notice-form-sections",
										"{{valid_header_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "original header content",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0a505956-c574-48a4-be73-2795f8984637",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"var expectedSchema = {",
											"  \"type\": \"object\",",
											"  \"required\": [",
											"    \"id\",",
											"    \"label\",",
											"    \"sectionType\",",
											"    \"content\",",
											"    \"isActive\",",
											"    \"createdBy\",",
											"    \"updatedBy\",",
											"    \"createdAt\",",
											"    \"updatedAt\"",
											"  ],",
											"  \"properties\": {",
											"    \"id\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"label\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"sectionType\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"content\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"isActive\": {",
											"      \"type\": \"boolean\"",
											"    },",
											"    \"createdBy\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"updatedBy\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"createdAt\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"updatedAt\": {",
											"      \"type\": \"string\"",
											"    }",
											"  }",
											"};",
											"",
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,202]);",
											"});",
											"",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
											"",
											"});",
											"",
											"pm.test(\"Validate label\", function () {",
											"    pm.expect(jsonData.label).to.eql(\"Plain text Content\");",
											"});",
											"",
											"pm.test(\"Validate if active\", function () {",
											"    pm.expect(jsonData.isActive).to.eql(true);",
											"});",
											"",
											"pm.test(\"Validate section type\", function () {",
											"    pm.expect(jsonData.sectionType).to.eql(\"HEADER\");",
											"});",
											"",
											"pm.test(\"Validate content\", function () {",
											"    pm.expect(jsonData.content).to.eql(\"<html><head></head><body><h1>Default Header</h1></body></html>\");",
											"});",
											"",
											"pm.test(\"Validate created by\", function () {",
											"    pm.expect(jsonData.createdBy).to.eql(\"Product Only\");",
											"});",
											"",
											"pm.test(\"Validate updated by\", function () {",
											"    pm.expect(jsonData.updatedBy).to.eql(\"Product Only\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_product_admin}}",
										"description": "}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token_super_admin}}",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"label\": \"Plain text Content\",\n\t\"isActive\": true,\n\t\"sectionType\": \"HEADER\",\n    \"content\": \"<html><head></head><body><h1>Default Header</h1></body></html>\"\n}\n"
								},
								"url": {
									"raw": "http://{{env}}/xerce/config/notice-form-sections/{{valid_header_id}}",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"xerce",
										"config",
										"notice-form-sections",
										"{{valid_header_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "No Content",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7774eade-9533-441d-acfb-1456b23321e9",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Throws error message\",function(){",
											"    pm.expect(jsonData.message).to.equal(\"Invalid argument content. String is too short (0 chars), minimum 1\");",
											"});",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_product_admin}}",
										"description": "}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token_super_admin}}",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"label\": \"No Content\",\n\t\"isActive\": true,\n\t\"sectionType\": \"FOOTER\",\n    \"content\": \"\"\n}\n"
								},
								"url": {
									"raw": "http://{{env}}/xerce/config/notice-form-sections/{{valid_footer_id}}",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"xerce",
										"config",
										"notice-form-sections",
										"{{valid_footer_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "No Access",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "036d6e72-86cd-4cf1-af83-2e8f07551345",
										"type": "text/javascript",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Throws error message\",function(){",
											"    pm.expect(jsonData.message).to.equal(\"Unauthorized operation.\");",
											"});",
											"",
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_site_admin}}",
										"description": "}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token_super_admin}}",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"label\": \"Plain text Content\",\n\t\"isActive\": true,\n\t\"sectionType\": \"HEADER\",\n    \"content\": \"What is Lorem Ipsum? Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.\"\n}\n"
								},
								"url": {
									"raw": "http://{{env}}/xerce/config/notice-form-sections/{{valid_footer_id}}",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"xerce",
										"config",
										"notice-form-sections",
										"{{valid_footer_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Section",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4fa733ae-56cf-4b0d-92aa-b78449286c56",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"var expectedSchema = {",
											"  \"type\": \"object\",",
											"  \"required\": [",
											"    \"id\",",
											"    \"label\",",
											"    \"sectionType\",",
											"    \"content\",",
											"    \"isActive\",",
											"    \"createdBy\",",
											"    \"updatedBy\",",
											"    \"createdAt\",",
											"    \"updatedAt\"",
											"  ],",
											"  \"properties\": {",
											"    \"id\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"label\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"sectionType\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"content\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"isActive\": {",
											"      \"type\": \"boolean\"",
											"    },",
											"    \"createdBy\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"updatedBy\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"createdAt\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"updatedAt\": {",
											"      \"type\": \"string\"",
											"    }",
											"  }",
											"};",
											"",
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
											"",
											"});",
											"",
											"pm.test(\"Validate label\", function () {",
											"    pm.expect(jsonData.label).to.eql(\"Plain text Content\");",
											"});",
											"",
											"pm.test(\"Validate if active\", function () {",
											"    pm.expect(jsonData.isActive).to.eql(true);",
											"});",
											"",
											"pm.test(\"Validate section type\", function () {",
											"    pm.expect(jsonData.sectionType).to.eql(\"HEADER\");",
											"});",
											"",
											"pm.test(\"Validate content\", function () {",
											"    pm.expect(jsonData.content).to.eql(\"<html><head></head><body><h1>Default Header</h1></body></html>\");",
											"});",
											"",
											"pm.test(\"Validate created by\", function () {",
											"    pm.expect(jsonData.createdBy).to.eql(\"Product Only\");",
											"});",
											"",
											"pm.test(\"Validate updated by\", function () {",
											"    pm.expect(jsonData.updatedBy).to.eql(\"Product Only\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"description": "}",
										"key": "Authorization",
										"value": "{{token_product_admin}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token_super_admin}}",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{env}}/xerce/config/notice-form-sections/{{valid_header_id}}",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"xerce",
										"config",
										"notice-form-sections",
										"{{valid_header_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All Sections",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4fa733ae-56cf-4b0d-92aa-b78449286c56",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"var expectedSchema = {",
											"  \"type\": \"array\",",
											"  \"items\": {",
											"    \"$id\": \"#/items\",",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"      \"id\",",
											"      \"label\",",
											"      \"sectionType\",",
											"      \"content\",",
											"      \"isActive\",",
											"      \"createdBy\",",
											"      \"updatedBy\",",
											"      \"createdAt\",",
											"      \"updatedAt\"",
											"    ],",
											"    \"properties\": {",
											"      \"id\": {",
											"        \"type\": \"integer\"",
											"      },",
											"      \"label\": {",
											"        \"type\": \"string\"",
											"      },",
											"      \"sectionType\": {",
											"        \"type\": \"string\"",
											"      },",
											"      \"content\": {",
											"        \"type\": \"string\"",
											"      },",
											"      \"isActive\": {",
											"        \"type\": \"boolean\"",
											"      },",
											"      \"createdBy\": {",
											"        \"type\": \"string\"",
											"      },",
											"      \"updatedBy\": {",
											"        \"type\": \"string\"",
											"      },",
											"      \"createdAt\": {",
											"        \"type\": \"string\"",
											"      },",
											"      \"updatedAt\": {",
											"        \"type\": \"string\"",
											"      }",
											"    }",
											"  }",
											"};",
											"",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"description": "}",
										"key": "Authorization",
										"value": "{{token_product_admin}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token_super_admin}}",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{env}}/xerce/config/notice-form-sections",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"xerce",
										"config",
										"notice-form-sections"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Notices",
					"item": [
						{
							"name": "Valid Notice - NON_HTML",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bdfbe300-692e-4e8e-b770-78d01180fa9b",
										"type": "text/javascript",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"var expectedSchema = {",
											"  \"definitions\": {},",
											"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
											"  \"$id\": \"http://example.com/root.json\",",
											"  \"type\": \"object\",",
											"  \"required\": [",
											"    \"id\",",
											"    \"label\",",
											"    \"noticeType\",",
											"    \"sequence\",",
											"    \"proposeForcedAbatement\",",
											"    \"isActive\",",
											"    \"createdBy\",",
											"    \"updatedBy\",",
											"    \"createdAt\",",
											"    \"updatedAt\"",
											"  ],",
											"  \"properties\": {",
											"    \"id\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"label\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"noticeType\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"sequence\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"proposeForcedAbatement\": {",
											"      \"type\": \"boolean\"",
											"    },",
											"    \"isActive\": {",
											"      \"$id\": \"#/properties/isActive\",",
											"      \"type\": \"boolean\"",
											"    },",
											"    \"createdBy\": {",
											"      \"type\": \"object\"",
											"    },",
											"    \"updatedBy\": {",
											"      \"type\": \"object\"",
											"    },",
											"    \"createdAt\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"updatedAt\": {",
											"      \"type\": \"string\"",
											"    }",
											"  }",
											"};",
											"",
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
											"});",
											"",
											"pm.test(\"Validate Schema\", function() {",
											"    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
											"});",
											"",
											"pm.test(\"Validate label\", function () {",
											"    pm.expect(jsonData.label).to.eql(\"Warning\");",
											"});",
											"",
											"pm.test(\"Validate if active\", function () {",
											"    pm.expect(jsonData.isActive).to.eql(true);",
											"});",
											"",
											"pm.test(\"Validate created by\", function () {",
											"    pm.expect(jsonData.createdBy.firstName).to.eql(\"Product\");",
											"});",
											"",
											"pm.test(\"Validate created by\", function () {",
											"    pm.expect(jsonData.createdBy.lastName).to.eql(\"Only\");",
											"});",
											"",
											"pm.test(\"Validate created by\", function () {",
											"    pm.expect(jsonData.updatedBy.firstName).to.eql(\"Product\");",
											"});",
											"",
											"pm.test(\"Validate updated by\", function () {",
											"    pm.expect(jsonData.updatedBy.lastName).to.eql(\"Only\");",
											"});",
											"",
											"postman.setEnvironmentVariable(\"valid_non_html_notice_id\",jsonData.id);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token_product_admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"label\": \"Warning\",\n\t\"noticeType\": \"NON_HTML\",\n    \"isActive\": true\n}\n"
								},
								"url": {
									"raw": "http://{{env}}/xerce/config/notices",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"xerce",
										"config",
										"notices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Valid Notice - HTML",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "24512039-f4bf-4032-a5f1-d3f5d99381e9",
										"type": "text/javascript",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"var expectedSchema = {",
											"  \"type\": \"object\",",
											"  \"required\": [",
											"    \"id\",",
											"    \"label\",",
											"    \"content\",",
											"    \"noticeType\",",
											"    \"sequence\",",
											"    \"proposeForcedAbatement\",",
											"    \"isActive\",",
											"    \"noticeFormSectionHeader\",",
											"    \"noticeFormSectionFooter\",",
											"    \"createdBy\",",
											"    \"updatedBy\",",
											"    \"createdAt\",",
											"    \"updatedAt\"",
											"  ],",
											"  \"properties\": {",
											"    \"id\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"label\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"content\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"noticeType\": {",
											"      \"$id\": \"#/properties/noticeType\",",
											"      \"type\": \"string\",",
											"      \"pattern\": \"\"",
											"    },",
											"    \"sequence\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"proposeForcedAbatement\": {",
											"      \"type\": \"boolean\"",
											"    },",
											"    \"isActive\": {",
											"      \"type\": \"boolean\"",
											"    },",
											"    \"noticeFormSectionHeader\": {",
											"      \"type\": \"object\",",
											"      \"required\": [",
											"        \"id\",",
											"        \"content\"",
											"      ],",
											"      \"properties\": {",
											"        \"id\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"content\": {",
											"          \"type\": \"string\"",
											"        }",
											"      }",
											"    },",
											"    \"noticeFormSectionFooter\": {",
											"      \"type\": \"object\",",
											"      \"required\": [",
											"        \"id\",",
											"        \"content\"",
											"      ],",
											"      \"properties\": {",
											"        \"id\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"content\": {",
											"          \"type\": \"string\"",
											"        }",
											"      }",
											"    },",
											"    \"createdBy\": {",
											"      \"type\": \"object\"",
											"    },",
											"    \"updatedBy\": {",
											"      \"type\": \"object\"",
											"    },",
											"    \"createdAt\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"updatedAt\": {",
											"      \"type\": \"string\"",
											"    }",
											"  }",
											"};",
											"",
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
											"});",
											"",
											"pm.test(\"Validate Schema\", function() {",
											"    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
											"});",
											"",
											"pm.test(\"Validate label\", function () {",
											"    pm.expect(jsonData.label).to.eql(\"Initial Notice\");",
											"});",
											"",
											"pm.test(\"Validate if active\", function () {",
											"    pm.expect(jsonData.isActive).to.eql(true);",
											"});",
											"",
											"pm.test(\"Validate header section id\", function() {",
											"    pm.expect(jsonData.noticeFormSectionHeader.id == pm.environment.get(\"valid_header_id\")).to.be.true;",
											"});",
											"",
											"pm.test(\"Validate footer section id\", function() {",
											"    pm.expect(jsonData.noticeFormSectionFooter.id == pm.environment.get(\"valid_footer_id\")).to.be.true;",
											"});",
											"",
											"pm.test(\"Validate header section content\", function () {",
											"    pm.expect(jsonData.noticeFormSectionHeader.content).to.eql(pm.environment.get(\"valid_header_content\"));",
											"});",
											"",
											"pm.test(\"Validate footer section content\", function () {",
											"    pm.expect(jsonData.noticeFormSectionFooter.content).to.eql(pm.environment.get(\"valid_footer_content\"));",
											"});",
											"",
											"pm.test(\"Validate created by\", function () {",
											"    pm.expect(jsonData.createdBy.firstName).to.eql(\"Product\");",
											"});",
											"",
											"pm.test(\"Validate created by\", function () {",
											"    pm.expect(jsonData.createdBy.lastName).to.eql(\"Only\");",
											"});",
											"",
											"pm.test(\"Validate created by\", function () {",
											"    pm.expect(jsonData.updatedBy.firstName).to.eql(\"Product\");",
											"});",
											"",
											"pm.test(\"Validate updated by\", function () {",
											"    pm.expect(jsonData.updatedBy.lastName).to.eql(\"Only\");",
											"});",
											"",
											"postman.setEnvironmentVariable(\"valid_html_notice_id\",jsonData.id);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token_product_admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"label\": \"Initial Notice\",\n\t\"noticeType\": \"HTML\",\n    \"isActive\": true,\n    \"content\": \"<html><head></head><body><h1>Default Header</h1><img src='https://cdn.colorlib.com/wp/wp-content/uploads/sites/2/ContactFrom-v1.jpg' scale='0'></body></html>\",\n    \"noticeFormSectionHeaderId\": {{valid_header_id}},\n    \"noticeFormSectionFooterId\": {{valid_footer_id}},\n    \"associatedFeeIds\": []\n}\n"
								},
								"url": {
									"raw": "http://{{env}}/xerce/config/notices",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"xerce",
										"config",
										"notices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Valid Inactive Notice - NON_HTML",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "19d91a0d-dfdd-42d2-8276-6c6a842a7a95",
										"type": "text/javascript",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"var expectedSchema = {",
											"  \"definitions\": {},",
											"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
											"  \"$id\": \"http://example.com/root.json\",",
											"  \"type\": \"object\",",
											"  \"required\": [",
											"    \"id\",",
											"    \"label\",",
											"    \"noticeType\",",
											"    \"sequence\",",
											"    \"proposeForcedAbatement\",",
											"    \"isActive\",",
											"    \"createdBy\",",
											"    \"updatedBy\",",
											"    \"createdAt\",",
											"    \"updatedAt\"",
											"  ],",
											"  \"properties\": {",
											"    \"id\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"label\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"noticeType\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"sequence\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"proposeForcedAbatement\": {",
											"      \"type\": \"boolean\"",
											"    },",
											"    \"isActive\": {",
											"      \"$id\": \"#/properties/isActive\",",
											"      \"type\": \"boolean\"",
											"    },",
											"    \"createdBy\": {",
											"      \"type\": \"object\"",
											"    },",
											"    \"updatedBy\": {",
											"      \"type\": \"object\"",
											"    },",
											"    \"createdAt\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"updatedAt\": {",
											"      \"type\": \"string\"",
											"    }",
											"  }",
											"};",
											"",
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
											"});",
											"",
											"pm.test(\"Validate Schema\", function() {",
											"    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
											"});",
											"",
											"pm.test(\"Validate label\", function () {",
											"    pm.expect(jsonData.label).to.eql(\"Inactive Warning\");",
											"});",
											"",
											"pm.test(\"Validate if active\", function () {",
											"    pm.expect(jsonData.isActive).to.eql(false);",
											"});",
											"",
											"pm.test(\"Validate created by\", function () {",
											"    pm.expect(jsonData.createdBy.firstName).to.eql(\"Product\");",
											"});",
											"",
											"pm.test(\"Validate created by\", function () {",
											"    pm.expect(jsonData.createdBy.lastName).to.eql(\"Only\");",
											"});",
											"",
											"pm.test(\"Validate created by\", function () {",
											"    pm.expect(jsonData.updatedBy.firstName).to.eql(\"Product\");",
											"});",
											"",
											"pm.test(\"Validate updated by\", function () {",
											"    pm.expect(jsonData.updatedBy.lastName).to.eql(\"Only\");",
											"});",
											"",
											"postman.setEnvironmentVariable(\"valid_non_html_inactive_notice_id\",jsonData.id);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token_product_admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"label\": \"Inactive Warning\",\n\t\"noticeType\": \"NON_HTML\",\n    \"isActive\": false\n}\n"
								},
								"url": {
									"raw": "http://{{env}}/xerce/config/notices",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"xerce",
										"config",
										"notices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Valid Inactive Notice - HTML",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bd144cbc-1e7a-42d6-ac1f-c2fabf505da6",
										"type": "text/javascript",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"var expectedSchema = {",
											"  \"type\": \"object\",",
											"  \"required\": [",
											"    \"id\",",
											"    \"label\",",
											"    \"content\",",
											"    \"noticeType\",",
											"    \"sequence\",",
											"    \"proposeForcedAbatement\",",
											"    \"isActive\",",
											"    \"noticeFormSectionHeader\",",
											"    \"noticeFormSectionFooter\",",
											"    \"createdBy\",",
											"    \"updatedBy\",",
											"    \"createdAt\",",
											"    \"updatedAt\"",
											"  ],",
											"  \"properties\": {",
											"    \"id\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"label\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"content\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"noticeType\": {",
											"      \"$id\": \"#/properties/noticeType\",",
											"      \"type\": \"string\",",
											"      \"pattern\": \"\"",
											"    },",
											"    \"sequence\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"proposeForcedAbatement\": {",
											"      \"type\": \"boolean\"",
											"    },",
											"    \"isActive\": {",
											"      \"type\": \"boolean\"",
											"    },",
											"    \"noticeFormSectionHeader\": {",
											"      \"type\": \"object\",",
											"      \"required\": [",
											"        \"id\",",
											"        \"content\"",
											"      ],",
											"      \"properties\": {",
											"        \"id\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"content\": {",
											"          \"type\": \"string\"",
											"        }",
											"      }",
											"    },",
											"    \"noticeFormSectionFooter\": {",
											"      \"type\": \"object\",",
											"      \"required\": [",
											"        \"id\",",
											"        \"content\"",
											"      ],",
											"      \"properties\": {",
											"        \"id\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"content\": {",
											"          \"type\": \"string\"",
											"        }",
											"      }",
											"    },",
											"    \"createdBy\": {",
											"      \"type\": \"object\"",
											"    },",
											"    \"updatedBy\": {",
											"      \"type\": \"object\"",
											"    },",
											"    \"createdAt\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"updatedAt\": {",
											"      \"type\": \"string\"",
											"    }",
											"  }",
											"};",
											"",
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
											"});",
											"",
											"pm.test(\"Validate Schema\", function() {",
											"    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
											"});",
											"",
											"pm.test(\"Validate label\", function () {",
											"    pm.expect(jsonData.label).to.eql(\"Inactive Initial Notice\");",
											"});",
											"",
											"pm.test(\"Validate if active\", function () {",
											"    pm.expect(jsonData.isActive).to.eql(false);",
											"});",
											"",
											"pm.test(\"Validate header section id\", function() {",
											"    pm.expect(jsonData.noticeFormSectionHeader.id == pm.environment.get(\"valid_header_id\")).to.be.true;",
											"});",
											"",
											"pm.test(\"Validate footer section id\", function() {",
											"    pm.expect(jsonData.noticeFormSectionFooter.id == pm.environment.get(\"valid_footer_id\")).to.be.true;",
											"});",
											"",
											"pm.test(\"Validate header section content\", function () {",
											"    pm.expect(jsonData.noticeFormSectionHeader.content).to.eql(pm.environment.get(\"valid_header_content\"));",
											"});",
											"",
											"pm.test(\"Validate footer section content\", function () {",
											"    pm.expect(jsonData.noticeFormSectionFooter.content).to.eql(pm.environment.get(\"valid_footer_content\"));",
											"});",
											"",
											"pm.test(\"Validate created by\", function () {",
											"    pm.expect(jsonData.createdBy.firstName).to.eql(\"Product\");",
											"});",
											"",
											"pm.test(\"Validate created by\", function () {",
											"    pm.expect(jsonData.createdBy.lastName).to.eql(\"Only\");",
											"});",
											"",
											"pm.test(\"Validate created by\", function () {",
											"    pm.expect(jsonData.updatedBy.firstName).to.eql(\"Product\");",
											"});",
											"",
											"pm.test(\"Validate updated by\", function () {",
											"    pm.expect(jsonData.updatedBy.lastName).to.eql(\"Only\");",
											"});",
											"",
											"postman.setEnvironmentVariable(\"valid_inactive_html_notice_id\",jsonData.id);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token_product_admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"label\": \"Inactive Initial Notice\",\n\t\"noticeType\": \"HTML\",\n    \"isActive\": false,\n    \"content\": \"<html><head></head><body><h1>Default Header</h1><img src='https://cdn.colorlib.com/wp/wp-content/uploads/sites/2/ContactFrom-v1.jpg' scale='0'></body></html>\",\n    \"noticeFormSectionHeaderId\": {{valid_header_id}},\n    \"noticeFormSectionFooterId\": {{valid_footer_id}},\n    \"associatedFeeIds\": []\n}\n"
								},
								"url": {
									"raw": "http://{{env}}/xerce/config/notices",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"xerce",
										"config",
										"notices"
									]
								}
							},
							"response": []
						},
						{
							"name": "No Header and Footer - HTML",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e174f5b0-6bd2-4ea9-a305-41d6f0bccb0f",
										"type": "text/javascript",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"var expectedSchema = {",
											"  \"type\": \"object\",",
											"  \"required\": [",
											"    \"id\",",
											"    \"label\",",
											"    \"content\",",
											"    \"noticeType\",",
											"    \"sequence\",",
											"    \"proposeForcedAbatement\",",
											"    \"isActive\",",
											"    \"createdBy\",",
											"    \"updatedBy\",",
											"    \"createdAt\",",
											"    \"updatedAt\"",
											"  ],",
											"  \"properties\": {",
											"    \"id\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"label\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"content\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"noticeType\": {",
											"      \"type\": \"string\",",
											"    },",
											"    \"sequence\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"proposeForcedAbatement\": {",
											"      \"type\": \"boolean\"",
											"    },",
											"    \"isActive\": {",
											"      \"type\": \"boolean\"",
											"    },",
											"    \"createdBy\": {",
											"      \"type\": \"object\"",
											"    },",
											"    \"updatedBy\": {",
											"      \"type\": \"object\"",
											"    },",
											"    \"createdAt\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"updatedAt\": {",
											"      \"type\": \"string\"",
											"    }",
											"  }",
											"};",
											"",
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,202]);",
											"});",
											"",
											"pm.test(\"Validate Schema\", function() {",
											"    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
											"});",
											"",
											"pm.test(\"Validate label\", function () {",
											"    pm.expect(jsonData.label).to.eql(\"Inactive Initial Notice\");",
											"});",
											"",
											"pm.test(\"Validate if active\", function () {",
											"    pm.expect(jsonData.isActive).to.eql(false);",
											"});",
											"",
											"pm.test(\"Validate created by\", function () {",
											"    pm.expect(jsonData.createdBy.firstName).to.eql(\"Product\");",
											"});",
											"",
											"pm.test(\"Validate created by\", function () {",
											"    pm.expect(jsonData.createdBy.lastName).to.eql(\"Only\");",
											"});",
											"",
											"pm.test(\"Validate created by\", function () {",
											"    pm.expect(jsonData.updatedBy.firstName).to.eql(\"Product\");",
											"});",
											"",
											"pm.test(\"Validate updated by\", function () {",
											"    pm.expect(jsonData.updatedBy.lastName).to.eql(\"Only\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token_product_admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"label\": \"Inactive Initial Notice\",\n\t\"noticeType\": \"HTML\",\n    \"isActive\": false,\n    \"content\": \"<html><head></head><body><h1>Default Header</h1><img src='https://cdn.colorlib.com/wp/wp-content/uploads/sites/2/ContactFrom-v1.jpg' scale='0'></body></html>\",\n    \"associatedFeeIds\": []\n}\n"
								},
								"url": {
									"raw": "http://{{env}}/xerce/config/notices/{{valid_inactive_html_notice_id}}",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"xerce",
										"config",
										"notices",
										"{{valid_inactive_html_notice_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Content in NON_HTML notice",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d424484b-6206-4d9a-8150-467ef08f19a2",
										"type": "text/javascript",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"var expectedSchema = {",
											"  \"definitions\": {},",
											"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
											"  \"$id\": \"http://example.com/root.json\",",
											"  \"type\": \"object\",",
											"  \"required\": [",
											"    \"id\",",
											"    \"label\",",
											"    \"noticeType\",",
											"    \"sequence\",",
											"    \"proposeForcedAbatement\",",
											"    \"isActive\",",
											"    \"createdBy\",",
											"    \"updatedBy\",",
											"    \"createdAt\",",
											"    \"updatedAt\"",
											"  ],",
											"  \"properties\": {",
											"    \"id\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"label\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"noticeType\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"sequence\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"proposeForcedAbatement\": {",
											"      \"type\": \"boolean\"",
											"    },",
											"    \"isActive\": {",
											"      \"$id\": \"#/properties/isActive\",",
											"      \"type\": \"boolean\"",
											"    },",
											"    \"createdBy\": {",
											"      \"type\": \"object\"",
											"    },",
											"    \"updatedBy\": {",
											"      \"type\": \"object\"",
											"    },",
											"    \"createdAt\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"updatedAt\": {",
											"      \"type\": \"string\"",
											"    }",
											"  }",
											"};",
											"",
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,202]);",
											"});",
											"",
											"pm.test(\"Validate Schema\", function() {",
											"    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
											"});",
											"",
											"pm.test(\"Validate label\", function () {",
											"    pm.expect(jsonData.label).to.eql(\"Content in non html notice\");",
											"});",
											"",
											"pm.test(\"Validate if active\", function () {",
											"    pm.expect(jsonData.isActive).to.eql(false);",
											"});",
											"",
											"pm.test(\"Validate created by\", function () {",
											"    pm.expect(jsonData.createdBy.firstName).to.eql(\"Product\");",
											"});",
											"",
											"pm.test(\"Validate created by\", function () {",
											"    pm.expect(jsonData.createdBy.lastName).to.eql(\"Only\");",
											"});",
											"",
											"pm.test(\"Validate created by\", function () {",
											"    pm.expect(jsonData.updatedBy.firstName).to.eql(\"Product\");",
											"});",
											"",
											"pm.test(\"Validate updated by\", function () {",
											"    pm.expect(jsonData.updatedBy.lastName).to.eql(\"Only\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token_product_admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"label\": \"Content in non html notice\",\n\t\"noticeType\": \"NON_HTML\",\n\t\"content\":\"<html><head><h1>Content in non html notices</h1></head></html>\",\n    \"isActive\": false\n}\n"
								},
								"url": {
									"raw": "http://{{env}}/xerce/config/notices/{{valid_non_html_inactive_notice_id}}",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"xerce",
										"config",
										"notices",
										"{{valid_non_html_inactive_notice_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit Notice Header",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "311c558e-6ab7-469b-aa09-489d30d5d0af",
										"type": "text/javascript",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"var expectedSchema = {",
											"  \"type\": \"object\",",
											"  \"required\": [",
											"    \"id\",",
											"    \"label\",",
											"    \"content\",",
											"    \"noticeType\",",
											"    \"sequence\",",
											"    \"proposeForcedAbatement\",",
											"    \"isActive\",",
											"    \"noticeFormSectionHeader\",",
											"    \"noticeFormSectionFooter\",",
											"    \"createdBy\",",
											"    \"updatedBy\",",
											"    \"createdAt\",",
											"    \"updatedAt\"",
											"  ],",
											"  \"properties\": {",
											"    \"id\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"label\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"content\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"noticeType\": {",
											"      \"$id\": \"#/properties/noticeType\",",
											"      \"type\": \"string\",",
											"      \"pattern\": \"\"",
											"    },",
											"    \"sequence\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"proposeForcedAbatement\": {",
											"      \"type\": \"boolean\"",
											"    },",
											"    \"isActive\": {",
											"      \"type\": \"boolean\"",
											"    },",
											"    \"noticeFormSectionHeader\": {",
											"      \"type\": \"object\",",
											"      \"required\": [",
											"        \"id\",",
											"        \"content\"",
											"      ],",
											"      \"properties\": {",
											"        \"id\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"content\": {",
											"          \"type\": \"string\"",
											"        }",
											"      }",
											"    },",
											"    \"noticeFormSectionFooter\": {",
											"      \"type\": \"object\",",
											"      \"required\": [",
											"        \"id\",",
											"        \"content\"",
											"      ],",
											"      \"properties\": {",
											"        \"id\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"content\": {",
											"          \"type\": \"string\"",
											"        }",
											"      }",
											"    },",
											"    \"createdBy\": {",
											"      \"type\": \"object\"",
											"    },",
											"    \"updatedBy\": {",
											"      \"type\": \"object\"",
											"    },",
											"    \"createdAt\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"updatedAt\": {",
											"      \"type\": \"string\"",
											"    }",
											"  }",
											"};",
											"",
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Validate Schema\", function() {",
											"    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
											"});",
											"",
											"pm.test(\"Validate label\", function () {",
											"    pm.expect(jsonData.label).to.eql(\"Initial Notice\");",
											"});",
											"",
											"pm.test(\"Validate if active\", function () {",
											"    pm.expect(jsonData.isActive).to.eql(true);",
											"});",
											"",
											"pm.test(\"Validate header section id\", function() {",
											"    pm.expect(jsonData.noticeFormSectionHeader.id == pm.environment.get(\"valid_header_id_ii\")).to.be.true;",
											"});",
											"",
											"pm.test(\"Validate footer section id\", function() {",
											"    pm.expect(jsonData.noticeFormSectionFooter.id == pm.environment.get(\"valid_footer_id\")).to.be.true;",
											"});",
											"",
											"pm.test(\"Validate header section content\", function () {",
											"    pm.expect(jsonData.noticeFormSectionHeader.content).to.eql(pm.environment.get(\"valid_header_content_ii\"));",
											"});",
											"",
											"pm.test(\"Validate footer section content\", function () {",
											"    pm.expect(jsonData.noticeFormSectionFooter.content).to.eql(pm.environment.get(\"valid_footer_content\"));",
											"});",
											"",
											"pm.test(\"Validate created by\", function () {",
											"    pm.expect(jsonData.createdBy.firstName).to.eql(\"Product\");",
											"});",
											"",
											"pm.test(\"Validate created by\", function () {",
											"    pm.expect(jsonData.createdBy.lastName).to.eql(\"Only\");",
											"});",
											"",
											"pm.test(\"Validate created by\", function () {",
											"    pm.expect(jsonData.updatedBy.firstName).to.eql(\"Product\");",
											"});",
											"",
											"pm.test(\"Validate updated by\", function () {",
											"    pm.expect(jsonData.updatedBy.lastName).to.eql(\"Only\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token_product_admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"label\": \"Initial Notice\",\n\t\"noticeType\": \"HTML\",\n    \"isActive\": true,\n    \"content\": \"<html><head></head><body><h1>Default Header</h1><img src='https://cdn.colorlib.com/wp/wp-content/uploads/sites/2/ContactFrom-v1.jpg' scale='0'></body></html>\",\n    \"noticeFormSectionHeaderId\": {{valid_header_id_ii}},\n    \"noticeFormSectionFooterId\": {{valid_footer_id}},\n    \"associatedFeeIds\": []\n}\n"
								},
								"url": {
									"raw": "http://{{env}}/xerce/config/notices/{{valid_html_notice_id}}",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"xerce",
										"config",
										"notices",
										"{{valid_html_notice_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Non-HTML Notice",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a0e11992-8e54-4ff2-a888-af62712b0db6",
										"type": "text/javascript",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"var expectedSchema = {",
											"  \"definitions\": {},",
											"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
											"  \"$id\": \"http://example.com/root.json\",",
											"  \"type\": \"object\",",
											"  \"required\": [",
											"    \"id\",",
											"    \"label\",",
											"    \"noticeType\",",
											"    \"sequence\",",
											"    \"proposeForcedAbatement\",",
											"    \"isActive\",",
											"    \"createdBy\",",
											"    \"updatedBy\",",
											"    \"createdAt\",",
											"    \"updatedAt\"",
											"  ],",
											"  \"properties\": {",
											"    \"id\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"label\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"noticeType\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"sequence\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"proposeForcedAbatement\": {",
											"      \"type\": \"boolean\"",
											"    },",
											"    \"isActive\": {",
											"      \"$id\": \"#/properties/isActive\",",
											"      \"type\": \"boolean\"",
											"    },",
											"    \"createdBy\": {",
											"      \"type\": \"object\"",
											"    },",
											"    \"updatedBy\": {",
											"      \"type\": \"object\"",
											"    },",
											"    \"createdAt\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"updatedAt\": {",
											"      \"type\": \"string\"",
											"    }",
											"  }",
											"};",
											"",
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Validate Schema\", function() {",
											"    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
											"});",
											"",
											"pm.test(\"Validate label\", function () {",
											"    pm.expect(jsonData.label).to.eql(\"Warning\");",
											"});",
											"",
											"pm.test(\"Validate if active\", function () {",
											"    pm.expect(jsonData.isActive).to.eql(true);",
											"});",
											"",
											"pm.test(\"Validate created by\", function () {",
											"    pm.expect(jsonData.createdBy.firstName).to.eql(\"Product\");",
											"});",
											"",
											"pm.test(\"Validate created by\", function () {",
											"    pm.expect(jsonData.createdBy.lastName).to.eql(\"Only\");",
											"});",
											"",
											"pm.test(\"Validate created by\", function () {",
											"    pm.expect(jsonData.updatedBy.firstName).to.eql(\"Product\");",
											"});",
											"",
											"pm.test(\"Validate updated by\", function () {",
											"    pm.expect(jsonData.updatedBy.lastName).to.eql(\"Only\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token_product_admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{env}}/xerce/config/notices/{{valid_non_html_notice_id}}",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"xerce",
										"config",
										"notices",
										"{{valid_non_html_notice_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get HTML Notice",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c8f0243d-e91b-4f35-846c-60a7e6b5f4c5",
										"type": "text/javascript",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"var expectedSchema = {",
											"  \"type\": \"object\",",
											"  \"required\": [",
											"    \"id\",",
											"    \"label\",",
											"    \"content\",",
											"    \"noticeType\",",
											"    \"sequence\",",
											"    \"proposeForcedAbatement\",",
											"    \"isActive\",",
											"    \"noticeFormSectionHeader\",",
											"    \"noticeFormSectionFooter\",",
											"    \"createdBy\",",
											"    \"updatedBy\",",
											"    \"createdAt\",",
											"    \"updatedAt\"",
											"  ],",
											"  \"properties\": {",
											"    \"id\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"label\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"content\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"noticeType\": {",
											"      \"$id\": \"#/properties/noticeType\",",
											"      \"type\": \"string\",",
											"      \"pattern\": \"\"",
											"    },",
											"    \"sequence\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"proposeForcedAbatement\": {",
											"      \"type\": \"boolean\"",
											"    },",
											"    \"isActive\": {",
											"      \"type\": \"boolean\"",
											"    },",
											"    \"noticeFormSectionHeader\": {",
											"      \"type\": \"object\",",
											"      \"required\": [",
											"        \"id\",",
											"        \"content\"",
											"      ],",
											"      \"properties\": {",
											"        \"id\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"content\": {",
											"          \"type\": \"string\"",
											"        }",
											"      }",
											"    },",
											"    \"noticeFormSectionFooter\": {",
											"      \"type\": \"object\",",
											"      \"required\": [",
											"        \"id\",",
											"        \"content\"",
											"      ],",
											"      \"properties\": {",
											"        \"id\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"content\": {",
											"          \"type\": \"string\"",
											"        }",
											"      }",
											"    },",
											"    \"createdBy\": {",
											"      \"type\": \"object\"",
											"    },",
											"    \"updatedBy\": {",
											"      \"type\": \"object\"",
											"    },",
											"    \"createdAt\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"updatedAt\": {",
											"      \"type\": \"string\"",
											"    }",
											"  }",
											"};",
											"",
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Validate Schema\", function() {",
											"    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
											"});",
											"",
											"pm.test(\"Validate label\", function () {",
											"    pm.expect(jsonData.label).to.eql(\"Initial Notice\");",
											"});",
											"",
											"pm.test(\"Validate if active\", function () {",
											"    pm.expect(jsonData.isActive).to.eql(true);",
											"});",
											"",
											"pm.test(\"Validate header section id\", function() {",
											"    pm.expect(jsonData.noticeFormSectionHeader.id == pm.environment.get(\"valid_header_id_ii\")).to.be.true;",
											"});",
											"",
											"pm.test(\"Validate footer section id\", function() {",
											"    pm.expect(jsonData.noticeFormSectionFooter.id == pm.environment.get(\"valid_footer_id\")).to.be.true;",
											"});",
											"",
											"pm.test(\"Validate header section content\", function () {",
											"    pm.expect(jsonData.noticeFormSectionHeader.content).to.eql(pm.environment.get(\"valid_header_content_ii\"));",
											"});",
											"",
											"pm.test(\"Validate footer section content\", function () {",
											"    pm.expect(jsonData.noticeFormSectionFooter.content).to.eql(pm.environment.get(\"valid_footer_content\"));",
											"});",
											"",
											"pm.test(\"Validate created by\", function () {",
											"    pm.expect(jsonData.createdBy.firstName).to.eql(\"Product\");",
											"});",
											"",
											"pm.test(\"Validate created by\", function () {",
											"    pm.expect(jsonData.createdBy.lastName).to.eql(\"Only\");",
											"});",
											"",
											"pm.test(\"Validate created by\", function () {",
											"    pm.expect(jsonData.updatedBy.firstName).to.eql(\"Product\");",
											"});",
											"",
											"pm.test(\"Validate updated by\", function () {",
											"    pm.expect(jsonData.updatedBy.lastName).to.eql(\"Only\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token_product_admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{env}}/xerce/config/notices/{{valid_html_notice_id}}",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"xerce",
										"config",
										"notices",
										"{{valid_html_notice_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all Notices",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8317eb9d-8307-4c08-bb66-72e0f01181e9",
										"type": "text/javascript",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"var expectedSchema = {",
											"  \"type\": \"array\",",
											"  \"items\": {",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"      \"id\",",
											"      \"label\",",
											"      \"noticeType\",",
											"      \"sequence\",",
											"      \"proposeForcedAbatement\",",
											"      \"isActive\",",
											"      \"createdBy\",",
											"      \"updatedBy\",",
											"      \"createdAt\",",
											"      \"updatedAt\"",
											"    ],",
											"    \"properties\": {",
											"      \"id\": {",
											"        \"type\": \"integer\"",
											"      },",
											"      \"label\": {",
											"        \"type\": \"string\"",
											"      },",
											"      \"noticeType\": {",
											"        \"type\": \"string\"",
											"      },",
											"      \"sequence\": {",
											"        \"type\": \"integer\"",
											"      },",
											"      \"proposeForcedAbatement\": {",
											"        \"type\": \"boolean\"",
											"      },",
											"      \"isActive\": {",
											"        \"type\": \"boolean\"",
											"      },",
											"      \"createdBy\": {",
											"        \"type\": \"object\"",
											"      },",
											"      \"updatedBy\": {",
											"        \"type\": \"object\"",
											"      },",
											"      \"createdAt\": {",
											"        \"type\": \"string\"",
											"      },",
											"      \"updatedAt\": {",
											"        \"type\": \"string\"",
											"      }",
											"    }",
											"  }",
											"};",
											"",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token_product_admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{env}}/xerce/config/notices",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"xerce",
										"config",
										"notices"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Html Form Images",
					"item": [
						{
							"name": "Valid Image - png",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "02e20c92-51ce-407c-bcc1-b1042b4b75f9",
										"type": "text/javascript",
										"exec": [
											"var expectedSchema = {",
											"  \"type\": \"array\",",
											"  \"items\": {",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"      \"id\",",
											"      \"description\",",
											"      \"fileName\",",
											"      \"fileURL\",",
											"      \"fileSize\",",
											"      \"mimeType\",",
											"      \"createdBy\",",
											"      \"updatedBy\",",
											"      \"createdAt\",",
											"      \"updatedAt\"",
											"    ],",
											"    \"properties\": {",
											"      \"id\": {",
											"        \"type\": \"integer\"",
											"      },",
											"      \"label\": {",
											"        \"type\": \"string\"",
											"      },",
											"      \"description\": {",
											"        \"type\": \"null\"",
											"      },",
											"      \"fileName\": {",
											"        \"type\": \"string\"",
											"      },",
											"      \"fileURL\": {",
											"        \"type\": \"string\"",
											"      },",
											"      \"fileSize\": {",
											"        \"type\": \"string\"",
											"      },",
											"      \"mimeType\": {",
											"        \"type\": \"string\"",
											"      },",
											"      \"createdBy\": {",
											"        \"type\": \"object\"",
											"      },",
											"      \"updatedBy\": {",
											"        \"type\": \"object\"",
											"      },",
											"      \"createdAt\": {",
											"        \"type\": \"string\"",
											"      },",
											"      \"updatedAt\": {",
											"        \"type\": \"string\"",
											"      }",
											"    }",
											"  }",
											"};",
											"",
											"var responseJson = pm.response.json();",
											"var jsonData = responseJson[0];",
											"",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(responseJson, expectedSchema)).to.be.true;",
											"",
											"});",
											"",
											"pm.test(\"Successful POST response\", function() {",
											"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
											"});",
											"",
											"pm.test(\"Validate label\", function() {",
											"    pm.expect(jsonData.label).to.eql(\"agency logo png\");",
											"});",
											"",
											"pm.test(\"Validate description\", function() {",
											"    pm.expect(jsonData.description).to.eql(null);",
											"});",
											"",
											"pm.test(\"Validate file name\", function() {",
											"    pm.expect(jsonData.fileName).to.eql(\"agency_logo.png\");",
											"});",
											"",
											"pm.test(\"Validate fileURL\", function() {",
											"   pm.expect(jsonData.fileURL).to.eql(\"https://cyberdyne-dev.s3.amazonaws.com/dev/agency_31/html_form_images/agency_logo.png\");",
											"});",
											"",
											"pm.test(\"Validate file size\", function() {",
											"    pm.expect(jsonData.fileSize).to.eql(\"500Kb\");",
											"});",
											"",
											"pm.test(\"Validate mime type\", function() {",
											"    pm.expect(jsonData.mimeType).to.eql(\"image/png\");",
											"});",
											"",
											"pm.environment.set(\"valid_image_id\",jsonData.id);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token_product_admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"images\": [\n\t\t{\n\t\t\t\"label\": \"agency logo png\",\n\t\t\t\"description\": null,\n\t\t\t\"fileName\": \"agency_logo.png\",\n\t\t\t\"fileSize\": \"500Kb\",\n\t\t\t\"fileURL\": \"https://cyberdyne-dev.s3.amazonaws.com/dev/agency_31/staging/html_form_images/agency_logo.png\"\n\t\t}\n\t]\n}\n"
								},
								"url": {
									"raw": "http://{{env}}/xerce/config/html-form-images",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"xerce",
										"config",
										"html-form-images"
									]
								}
							},
							"response": []
						},
						{
							"name": "Name more than max charecters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8cf45fbf-02c3-41ec-93ed-fc2be878dc8d",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Bad request response\", function() {",
											"    pm.expect(pm.response.code).to.be.oneOf([400]);",
											"});",
											"",
											"pm.test(\"Validate message\", function() {",
											"    pm.expect(jsonData.message).to.eql(\"Invalid argument images. String is too long (56 chars), maximum 50\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token_product_admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"images\": [\n\t\t{\n\t\t\t\"label\": \"agency logo name which is greater than thirty charecters\",\n\t\t\t\"description\": \"Agency \",\n\t\t\t\"fileName\": \"test.png\",\n\t\t\t\"fileSize\": \"500Kb\",\n\t\t\t\"fileURL\": \"https://cyberdyne-dev.s3.amazonaws.com/dev/agency_1/staging/html_form_images/test.png\"\n\t\t}\n\t]\n}\n"
								},
								"url": {
									"raw": "http://{{env}}/xerce/config/html-form-images",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"xerce",
										"config",
										"html-form-images"
									]
								}
							},
							"response": []
						},
						{
							"name": "Name with special charecters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2217d7e4-1461-4a64-8de1-7eb1e4e279f6",
										"type": "text/javascript",
										"exec": [
											"var expectedSchema = {",
											"  \"type\": \"array\",",
											"  \"items\": {",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"      \"id\",",
											"      \"label\",",
											"      \"description\",",
											"      \"fileName\",",
											"      \"fileURL\",",
											"      \"fileSize\",",
											"      \"mimeType\",",
											"      \"createdBy\",",
											"      \"updatedBy\",",
											"      \"createdAt\",",
											"      \"updatedAt\"",
											"    ],",
											"    \"properties\": {",
											"      \"id\": {",
											"        \"type\": \"integer\"",
											"      },",
											"      \"label\": {",
											"        \"type\": \"string\"",
											"      },",
											"      \"description\": {",
											"        \"type\": \"string\"",
											"      },",
											"      \"fileName\": {",
											"        \"type\": \"string\"",
											"      },",
											"      \"fileURL\": {",
											"        \"type\": \"string\"",
											"      },",
											"      \"fileSize\": {",
											"        \"type\": \"string\"",
											"      },",
											"      \"mimeType\": {",
											"        \"type\": \"string\"",
											"      },",
											"      \"createdBy\": {",
											"        \"type\": \"object\"",
											"      },",
											"      \"updatedBy\": {",
											"        \"type\": \"object\"",
											"      },",
											"      \"createdAt\": {",
											"        \"type\": \"string\"",
											"      },",
											"      \"updatedAt\": {",
											"        \"type\": \"string\"",
											"      }",
											"    }",
											"  }",
											"};",
											"",
											"var responseJson = pm.response.json();",
											"var jsonData = responseJson[0];",
											"",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(responseJson, expectedSchema)).to.be.true;",
											"",
											"});",
											"",
											"pm.test(\"Successful POST response\", function() {",
											"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
											"});",
											"",
											"pm.test(\"Validate label\", function() {",
											"    pm.expect(jsonData.label).to.eql(\"$p3Cial C#R3ct3r$\");",
											"});",
											"",
											"pm.test(\"Validate description\", function() {",
											"    pm.expect(jsonData.description).to.eql(\"Agency Logo JPEG\");",
											"});",
											"",
											"pm.test(\"Validate file name\", function() {",
											"    pm.expect(jsonData.fileName).to.eql(\"agency_logo.jpeg\");",
											"});",
											"",
											"pm.test(\"Validate fileURL\", function() {",
											"   pm.expect(jsonData.fileURL).to.eql(\"https://cyberdyne-dev.s3.amazonaws.com/dev/agency_31/html_form_images/agency_logo.jpeg\");",
											"});",
											"",
											"pm.test(\"Validate file size\", function() {",
											"    pm.expect(jsonData.fileSize).to.eql(\"500Kb\");",
											"});",
											"",
											"pm.test(\"Validate mime type\", function() {",
											"    pm.expect(jsonData.mimeType).to.eql(\"image/jpeg\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token_product_admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"images\": [\n\t\t{\n\t\t\t\"label\": \"$p3Cial C#R3ct3r$\",\n\t\t\t\"description\": \"Agency Logo JPEG\",\n\t\t\t\"fileName\": \"agency_logo.jpeg\",\n\t\t\t\"fileSize\": \"500Kb\",\n\t\t\t\"fileURL\": \"https://cyberdyne-dev.s3.amazonaws.com/dev/agency_31/staging/html_form_images/agency_logo.jpeg\"\n\t\t}\n\t]\n}\n"
								},
								"url": {
									"raw": "http://{{env}}/xerce/config/html-form-images",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"xerce",
										"config",
										"html-form-images"
									]
								}
							},
							"response": []
						},
						{
							"name": "Valid image - jpg",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "974a16b0-033d-48e0-ba52-471cf5f331bc",
										"type": "text/javascript",
										"exec": [
											"var expectedSchema = {",
											"  \"type\": \"array\",",
											"  \"items\": {",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"      \"id\",",
											"      \"label\",",
											"      \"description\",",
											"      \"fileName\",",
											"      \"fileURL\",",
											"      \"fileSize\",",
											"      \"mimeType\",",
											"      \"createdBy\",",
											"      \"updatedBy\",",
											"      \"createdAt\",",
											"      \"updatedAt\"",
											"    ],",
											"    \"properties\": {",
											"      \"id\": {",
											"        \"type\": \"integer\"",
											"      },",
											"      \"label\": {",
											"        \"type\": \"string\"",
											"      },",
											"      \"description\": {",
											"        \"type\": \"string\"",
											"      },",
											"      \"fileName\": {",
											"        \"type\": \"string\"",
											"      },",
											"      \"fileURL\": {",
											"        \"type\": \"string\"",
											"      },",
											"      \"fileSize\": {",
											"        \"type\": \"string\"",
											"      },",
											"      \"mimeType\": {",
											"        \"type\": \"string\"",
											"      },",
											"      \"createdBy\": {",
											"        \"type\": \"object\"",
											"      },",
											"      \"updatedBy\": {",
											"        \"type\": \"object\"",
											"      },",
											"      \"createdAt\": {",
											"        \"type\": \"string\"",
											"      },",
											"      \"updatedAt\": {",
											"        \"type\": \"string\"",
											"      }",
											"    }",
											"  }",
											"};",
											"",
											"var responseJson = pm.response.json();",
											"var jsonData = responseJson[0];",
											"",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(responseJson, expectedSchema)).to.be.true;",
											"",
											"});",
											"",
											"pm.test(\"Successful POST response\", function() {",
											"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
											"});",
											"",
											"pm.test(\"Validate label\", function() {",
											"    pm.expect(jsonData.label).to.eql(\"agency logo jpg\");",
											"});",
											"",
											"pm.test(\"Validate description\", function() {",
											"    pm.expect(jsonData.description).to.eql(\"Agency Logo JPG\");",
											"});",
											"",
											"pm.test(\"Validate file name\", function() {",
											"    pm.expect(jsonData.fileName).to.eql(\"agency_logo.jpg\");",
											"});",
											"",
											"pm.test(\"Validate fileURL\", function() {",
											"   pm.expect(jsonData.fileURL).to.eql(\"https://cyberdyne-dev.s3.amazonaws.com/dev/agency_31/html_form_images/agency_logo.jpg\");",
											"});",
											"",
											"pm.test(\"Validate file size\", function() {",
											"    pm.expect(jsonData.fileSize).to.eql(\"1Mb\");",
											"});",
											"",
											"pm.test(\"Validate mime type\", function() {",
											"    pm.expect(jsonData.mimeType).to.eql(\"image/jpeg\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token_product_admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"images\": [\n\t\t{\n\t\t\t\"label\": \"agency logo jpg\",\n\t\t\t\"description\": \"Agency Logo JPG\",\n\t\t\t\"fileName\": \"agency_logo.jpg\",\n\t\t\t\"fileSize\": \"1Mb\",\n\t\t\t\"fileURL\": \"https://cyberdyne-dev.s3.amazonaws.com/dev/agency_31/staging/html_form_images/agency_logo.jpg\"\n\t\t}\n\t]\n}\n"
								},
								"url": {
									"raw": "http://{{env}}/xerce/config/html-form-images",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"xerce",
										"config",
										"html-form-images"
									]
								}
							},
							"response": []
						},
						{
							"name": "Valid image - jpe",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "427cfef2-f295-4a7e-adb4-fbed93671269",
										"type": "text/javascript",
										"exec": [
											"var expectedSchema = {",
											"  \"type\": \"array\",",
											"  \"items\": {",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"      \"id\",",
											"      \"label\",",
											"      \"description\",",
											"      \"fileName\",",
											"      \"fileURL\",",
											"      \"fileSize\",",
											"      \"mimeType\",",
											"      \"createdBy\",",
											"      \"updatedBy\",",
											"      \"createdAt\",",
											"      \"updatedAt\"",
											"    ],",
											"    \"properties\": {",
											"      \"id\": {",
											"        \"type\": \"integer\"",
											"      },",
											"      \"label\": {",
											"        \"type\": \"string\"",
											"      },",
											"      \"description\": {",
											"        \"type\": \"string\"",
											"      },",
											"      \"fileName\": {",
											"        \"type\": \"string\"",
											"      },",
											"      \"fileURL\": {",
											"        \"type\": \"string\"",
											"      },",
											"      \"fileSize\": {",
											"        \"type\": \"string\"",
											"      },",
											"      \"mimeType\": {",
											"        \"type\": \"string\"",
											"      },",
											"      \"createdBy\": {",
											"        \"type\": \"object\"",
											"      },",
											"      \"updatedBy\": {",
											"        \"type\": \"object\"",
											"      },",
											"      \"createdAt\": {",
											"        \"type\": \"string\"",
											"      },",
											"      \"updatedAt\": {",
											"        \"type\": \"string\"",
											"      }",
											"    }",
											"  }",
											"};",
											"",
											"var responseJson = pm.response.json();",
											"var jsonData = responseJson[0];",
											"",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(responseJson, expectedSchema)).to.be.true;",
											"",
											"});",
											"",
											"pm.test(\"Successful POST response\", function() {",
											"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
											"});",
											"",
											"pm.test(\"Validate label\", function() {",
											"    pm.expect(jsonData.label).to.eql(\"agency logo jpe\");",
											"});",
											"",
											"pm.test(\"Validate description\", function() {",
											"    pm.expect(jsonData.description).to.eql(\"Agency Logo JPE\");",
											"});",
											"",
											"pm.test(\"Validate file name\", function() {",
											"    pm.expect(jsonData.fileName).to.eql(\"agency_logo.jpe\");",
											"});",
											"",
											"pm.test(\"Validate fileURL\", function() {",
											"   pm.expect(jsonData.fileURL).to.eql(\"https://cyberdyne-dev.s3.amazonaws.com/dev/agency_31/html_form_images/agency_logo.jpe\");",
											"});",
											"",
											"pm.test(\"Validate file size\", function() {",
											"    pm.expect(jsonData.fileSize).to.eql(\"10Mb\");",
											"});",
											"",
											"pm.test(\"Validate mime type\", function() {",
											"    pm.expect(jsonData.mimeType).to.eql(\"image/jpeg\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token_product_admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"images\": [\n\t\t{\n\t\t\t\"label\": \"agency logo jpe\",\n\t\t\t\"description\": \"Agency Logo JPE\",\n\t\t\t\"fileName\": \"agency_logo.jpe\",\n\t\t\t\"fileSize\": \"10Mb\",\n\t\t\t\"fileURL\": \"https://cyberdyne-dev.s3.amazonaws.com/dev/agency_31/staging/html_form_images/agency_logo.jpe\"\n\t\t}\n\t]\n}\n"
								},
								"url": {
									"raw": "http://{{env}}/xerce/config/html-form-images",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"xerce",
										"config",
										"html-form-images"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid URL -  File does not exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "74048b8b-c10b-496e-96eb-093fca6c5040",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Bad request response\", function() {",
											"    pm.expect(pm.response.code).to.be.oneOf([400]);",
											"});",
											"",
											"pm.test(\"Validate message\", function() {",
											"    pm.expect(jsonData.message).to.eql(\"File URL is invalid\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token_product_admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"images\": [\n\t\t{\n\t\t\t\"label\": \"$p3Cial C#R3ct3r$\",\n\t\t\t\"description\": \"Agency \",\n\t\t\t\"fileName\": \"test.png\",\n\t\t\t\"fileSize\": \"500Kb\",\n\t\t\t\"fileURL\": \"https://cyberdyne-dev.s3.amazonaws.com/dev/agency_1/staging/html_form_images/test.png\"\n\t\t}\n\t]\n}\n"
								},
								"url": {
									"raw": "http://{{env}}/xerce/config/html-form-images",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"xerce",
										"config",
										"html-form-images"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Image",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0a4b577e-9c96-41fe-a671-93446ac85385",
										"exec": [
											"pm.test(\"Successful POST response\", function() {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token_product_admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{env}}/xerce/config/html-form-images/{{valid_image_id}}",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"xerce",
										"config",
										"html-form-images",
										"{{valid_image_id}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Config Municipal Code",
					"item": [
						{
							"name": "Create Municipal code",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "690adde2-b842-47ca-94ae-38915e2d2019",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"var expectedSchema = {",
											"  \"type\": \"object\",",
											"  \"required\": [",
											"    \"id\",",
											"    \"articleNumber\",",
											"    \"description\",",
											"    \"resolutionAction\"",
											"  ],",
											"  \"properties\": {",
											"    \"id\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"articleNumber\": {",
											"      \"type\": \"string\",",
											"      \"pattern\": \"\"",
											"    },",
											"    \"description\": {",
											"      \"type\": \"string\",",
											"      \"pattern\": \"\"",
											"    },",
											"    \"resolutionAction\": {",
											"      \"type\": \"string\",",
											"      \"pattern\": \"\"",
											"    }",
											"  }",
											"};",
											"",
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
											"});",
											"",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
											"",
											"});",
											"",
											"pm.test(\"Validate article number\", function () {",
											"    pm.expect(jsonData.articleNumber).to.eql(\"10.7.1234\");",
											"});",
											"",
											"pm.test(\"Validate article description\", function () {",
											"    pm.expect(jsonData.description).to.eql(\"Pet Snake attack\");",
											"});",
											"",
											"pm.test(\"Validate resolution\", function () {",
											"    pm.expect(jsonData.resolutionAction).to.eql(\"Fine the owner and send off the snake to the jungle\");",
											"});",
											"",
											"postman.setEnvironmentVariable(\"pet_snake_id\",jsonData.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token_super_admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"articleNumber\": \"10.7.1234\",\n    \"description\": \"Pet Snake attack\",\n    \"resolutionAction\": \"Fine the owner and send off the snake to the jungle\"\n}\n"
								},
								"url": {
									"raw": "http://{{env}}/xerce/config/municipal-codes",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"xerce",
										"config",
										"municipal-codes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Municipal code 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "690adde2-b842-47ca-94ae-38915e2d2019",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"var expectedSchema = {",
											"  \"type\": \"object\",",
											"  \"required\": [",
											"    \"id\",",
											"    \"articleNumber\",",
											"    \"description\",",
											"    \"resolutionAction\"",
											"  ],",
											"  \"properties\": {",
											"    \"id\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"articleNumber\": {",
											"      \"type\": \"string\",",
											"      \"pattern\": \"\"",
											"    },",
											"    \"description\": {",
											"      \"type\": \"string\",",
											"      \"pattern\": \"\"",
											"    },",
											"    \"resolutionAction\": {",
											"      \"type\": \"string\",",
											"      \"pattern\": \"\"",
											"    }",
											"  }",
											"};",
											"",
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
											"});",
											"",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
											"",
											"});",
											"",
											"pm.test(\"Validate article number\", function () {",
											"    pm.expect(jsonData.articleNumber).to.eql(\"8.48.015 G\");",
											"});",
											"",
											"pm.test(\"Validate article description\", function () {",
											"    pm.expect(jsonData.description).to.eql(\"Overgrown, Dead, or Dying Vegetation\");",
											"});",
											"",
											"pm.test(\"Validate resolution\", function () {",
											"    pm.expect(jsonData.resolutionAction).to.eql(\"Fine the owner\");",
											"});",
											"",
											"postman.setEnvironmentVariable(\"vegetation_id\",jsonData.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token_super_admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"articleNumber\": \"8.48.015 G\",\n    \"description\": \"Overgrown, Dead, or Dying Vegetation\",\n    \"resolutionAction\": \"Fine the owner\"\n}\n"
								},
								"url": {
									"raw": "http://{{env}}/xerce/config/municipal-codes",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"xerce",
										"config",
										"municipal-codes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get  Municipal codes",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "88cec5d2-7a3d-4433-ad5b-4641d4f6de9b",
										"exec": [
											"var expectedSchema = {",
											" ",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"count\": {",
											"      \"$id\": \"#/properties/count\",",
											"      \"type\": \"integer\"",
											"    },",
											"    \"data\": {",
											"      \"$id\": \"#/properties/data\",",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"$id\": \"#/properties/data/items\",",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"          \"id\": {",
											"            \"$id\": \"#/properties/data/items/properties/id\",",
											"            \"type\": \"integer\"",
											"          },",
											"          \"articleNumber\": {",
											"            \"$id\": \"#/properties/data/items/properties/articleNumber\",",
											"            \"type\": \"string\",",
											"            \"pattern\": \"^(.*)$\"",
											"          },",
											"          \"description\": {",
											"            \"$id\": \"#/properties/data/items/properties/description\",",
											"            \"type\": \"string\",",
											"            \"pattern\": \"^(.*)$\"",
											"          },",
											"          \"resolutionAction\": {",
											"            \"$id\": \"#/properties/data/items/properties/resolutionAction\",",
											"            \"type\": \"string\",",
											"            \"pattern\": \"^(.*)$\"",
											"          }",
											"        }",
											"      }",
											"    }",
											"  }",
											"};",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
											"  ",
											"});",
											"",
											"pm.test('Count is correct', function() {",
											"  pm.expect(jsonData.count===2).to.be.true;",
											"  ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_super_admin}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{env}}/xerce/config/municipal-codes",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"xerce",
										"config",
										"municipal-codes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get  Municipal code - Site Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c010388e-1930-4c43-8f56-f254bdde5de6",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Validate Error Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Unauthorized operation.\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_site_admin}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{env}}/xerce/config/municipal-codes/1",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"xerce",
										"config",
										"municipal-codes",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get  Municipal code - Product Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b77bb076-3e1e-493d-8f8d-4ba4af14e51c",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var expectedSchema = {",
											"  \"type\": \"object\",",
											"  \"required\": [",
											"    \"id\",",
											"    \"articleNumber\",",
											"    \"resolutionAction\",",
											"    \"description\"",
											"  ],",
											"  \"properties\": {",
											"    \"id\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"articleNumber\": {",
											"      \"type\": \"string\",",
											"      \"pattern\": \"\"",
											"    },",
											"    \"resolutionAction\": {",
											"      \"type\": \"string\",",
											"      \"pattern\": \"\"",
											"    },",
											"    \"description\": {",
											"      \"type\": \"string\",",
											"      \"pattern\": \"\"",
											"    }",
											"  }",
											"};",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
											"});",
											"",
											"console.log(tv4.error);"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_product_admin}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{env}}/xerce/config/municipal-codes/1",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"xerce",
										"config",
										"municipal-codes",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "edit  muncipal code",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0a445098-cf66-4655-80e0-4efd8b4581dc",
										"type": "text/javascript",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"var expectedSchema = {",
											"  \"type\": \"object\",",
											"  \"required\": [",
											"    \"id\",",
											"    \"articleNumber\",",
											"    \"description\",",
											"    \"resolutionAction\"",
											"  ],",
											"  \"properties\": {",
											"    \"id\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"articleNumber\": {",
											"      \"type\": \"string\",",
											"      \"pattern\": \"\"",
											"    },",
											"    \"description\": {",
											"      \"type\": \"string\",",
											"      \"pattern\": \"\"",
											"    },",
											"    \"resolutionAction\": {",
											"      \"type\": \"string\",",
											"      \"pattern\": \"\"",
											"    }",
											"  }",
											"};",
											"",
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
											"",
											"});",
											"",
											"pm.test(\"Validate article number\", function () {",
											"    pm.expect(jsonData.articleNumber).to.eql(\"10.7.1234\");",
											"});",
											"",
											"",
											"pm.test(\"Validate article description\", function () {",
											"    pm.expect(jsonData.description).to.eql(\"Updated Description\");",
											"});",
											"",
											"pm.test(\"Validate resolution\", function () {",
											"    pm.expect(jsonData.resolutionAction).to.eql(\"Fine the owner and send off the snake to the jungle\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_product_admin}}",
										"description": "}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "",
										"value": ""
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"description\": \"Updated Description\"\n}\n"
								},
								"url": {
									"raw": "http://{{env}}/xerce/config/municipal-codes/{{pet_snake_id}}",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"xerce",
										"config",
										"municipal-codes",
										"{{pet_snake_id}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Config Violation",
					"item": [
						{
							"name": "create valid vehicle violation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a91b5d70-c23d-4604-8e08-9905eafce7f2",
										"exec": [
											"var expectedSchema = {",
											"  \"type\": \"object\",",
											"  \"required\": [",
											"    \"id\",",
											"    \"label\",",
											"    \"configMunicipalCodeId\",",
											"    \"configViolationTypeId\",",
											"    \"isActive\",",
											"    \"complyByDays\",",
											"    \"sequence\"",
											"  ],",
											"  \"properties\": {",
											"    \"id\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"label\": {",
											"      \"type\": \"string\",",
											"    },",
											"    \"configMunicipalCodeId\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"configViolationTypeId\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"isActive\": {",
											"      \"type\": \"boolean\"",
											"    },",
											"    \"complyByDays\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"sequence\": {",
											"      \"type\": \"integer\"",
											"    }",
											"  }",
											"};",
											"",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
											"});",
											"",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
											"",
											"});",
											"",
											"pm.test(\"Validate label\", function () {",
											"    pm.expect(jsonData.label).to.eql(\"Vehicle Violation\");",
											"});",
											"",
											"pm.test(\"Validate if active\", function () {",
											"    pm.expect(jsonData.isActive).to.eql(true);",
											"});",
											"",
											"pm.test(\"Validate sequence\", function() {",
											"    pm.expect(jsonData.sequence == 1).to.be.true;",
											"});",
											"",
											"pm.test(\"Validate config Municipal Code Id\", function () {",
											"    pm.expect(jsonData.configMunicipalCodeId).to.eql(2);",
											"});",
											"",
											"pm.test(\"Validate config Violation Type Id\", function () {",
											"    pm.expect(jsonData.configViolationTypeId).to.eql(17);",
											"});",
											"",
											"pm.test(\"Validate comply By Days\", function () {",
											"    pm.expect(jsonData.complyByDays).to.eql(9);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token_product_admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"label\": \"Vehicle Violation\",\n\t\"configMunicipalCodeId\": 2,\n\t\"configViolationTypeId\": 17,\n\t\"isActive\": true,\n\t\"complyByDays\": 9\n}\n\n"
								},
								"url": {
									"raw": "http://{{env}}/xerce/config/violations",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"xerce",
										"config",
										"violations"
									]
								}
							},
							"response": []
						},
						{
							"name": "create duplicate violation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "39304b1b-5831-486a-8be8-295aaa1fe765",
										"type": "text/javascript",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Throws error message\",function(){",
											"    pm.expect(jsonData.message).to.equal('Violation should be unique');",
											"});",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(409);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token_product_admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"label\": \"Vehicle Violation\",\n\t\"configMunicipalCodeId\": 2,\n\t\"configViolationTypeId\": 17,\n\t\"isActive\": true,\n\t\"complyByDays\": 9\n}\n\n"
								},
								"url": {
									"raw": "http://{{env}}/xerce/config/violations",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"xerce",
										"config",
										"violations"
									]
								}
							},
							"response": []
						},
						{
							"name": "create violation - invalid violation type and disposition id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a91b5d70-c23d-4604-8e08-9905eafce7f2",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Throws error message\",function(){",
											"    pm.expect(jsonData.message).to.equal('Xerce or violation type or municipal code not found');",
											"});",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token_product_admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"label\": \"Vehicle Violation\",\n\t\"configMunicipalCodeId\": 53,\n\t\"configViolationTypeId\": 93,\n\t\"isActive\": true,\n\t\"complyByDays\": 9\n}\n\n"
								},
								"url": {
									"raw": "http://{{env}}/xerce/config/violations",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"xerce",
										"config",
										"violations"
									]
								}
							},
							"response": []
						},
						{
							"name": "create violation with special characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fb5cb5f7-ec59-47cd-91ec-b9e60ac99e39",
										"type": "text/javascript",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Throws error message\",function(){",
											"    pm.expect(jsonData.message).to.equal( 'Invalid argument label. String does not match pattern ^[a-zA-Z]+[ a-zA-Z]*[a-zA-Z]$: V!@#$%^&*(');",
											"});",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token_product_admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"label\": \"V!@#$%^&*(\",\n\t\"configMunicipalCodeId\": 2,\n\t\"configViolationTypeId\": 17,\n\t\"isActive\": true,\n\t\"complyByDays\": 9\n}\n\n"
								},
								"url": {
									"raw": "http://{{env}}/xerce/config/violations",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"xerce",
										"config",
										"violations"
									]
								}
							},
							"response": []
						},
						{
							"name": "create violation empty label (spaces)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "942064de-e399-4cf7-8c3d-2b50247df047",
										"type": "text/javascript",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Throws error message\",function(){",
											"    pm.expect(jsonData.message).to.equal( 'Invalid argument label. String does not match pattern ^[a-zA-Z]+[ a-zA-Z]*[a-zA-Z]$:   ');",
											"});",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token_product_admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"label\": \"  \",\n\t\"configMunicipalCodeId\": 2,\n\t\"configViolationTypeId\": 17,\n\t\"isActive\": true,\n\t\"complyByDays\": 9\n}\n\n"
								},
								"url": {
									"raw": "http://{{env}}/xerce/config/violations",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"xerce",
										"config",
										"violations"
									]
								}
							},
							"response": []
						},
						{
							"name": "create valid vehicle violation - inactive status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c2835c24-b15d-400c-ab8b-6a0e36365136",
										"exec": [
											"var expectedSchema = {",
											"  \"type\": \"object\",",
											"  \"required\": [",
											"    \"id\",",
											"    \"label\",",
											"    \"configMunicipalCodeId\",",
											"    \"configViolationTypeId\",",
											"    \"isActive\",",
											"    \"complyByDays\",",
											"    \"sequence\"",
											"  ],",
											"  \"properties\": {",
											"    \"id\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"label\": {",
											"      \"type\": \"string\",",
											"    },",
											"    \"configMunicipalCodeId\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"configViolationTypeId\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"isActive\": {",
											"      \"type\": \"boolean\"",
											"    },",
											"    \"complyByDays\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"sequence\": {",
											"      \"type\": \"integer\"",
											"    }",
											"  }",
											"};",
											"",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
											"});",
											"",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
											"",
											"});",
											"",
											"pm.test(\"Validate label\", function () {",
											"    pm.expect(jsonData.label).to.eql(\"Old Vehicle\");",
											"});",
											"",
											"pm.test(\"Validate if inactive\", function () {",
											"    pm.expect(jsonData.isActive).to.eql(false);",
											"});",
											"",
											"pm.test(\"Validate sequence\", function() {",
											"    pm.expect(jsonData.sequence == 2).to.be.true;",
											"});",
											"",
											"pm.test(\"Validate config Municipal Code Id\", function () {",
											"    pm.expect(jsonData.configMunicipalCodeId).to.eql(2);",
											"});",
											"",
											"pm.test(\"Validate config Violation Type Id\", function () {",
											"    pm.expect(jsonData.configViolationTypeId).to.eql(17);",
											"});",
											"",
											"pm.test(\"Validate comply By Days\", function () {",
											"    pm.expect(jsonData.complyByDays).to.eql(9);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token_product_admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"label\": \"Old Vehicle\",\n\t\"configMunicipalCodeId\": 2,\n\t\"configViolationTypeId\": 17,\n\t\"isActive\": false,\n\t\"complyByDays\": 9\n}\n\n"
								},
								"url": {
									"raw": "http://{{env}}/xerce/config/violations",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"xerce",
										"config",
										"violations"
									]
								}
							},
							"response": []
						},
						{
							"name": "create violation - no label",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a91b5d70-c23d-4604-8e08-9905eafce7f2",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Throws error message\",function(){",
											"    pm.expect(jsonData.message).to.equal( \"Invalid request. Missing required property: label\");",
											"});",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token_product_admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"configMunicipalCodeId\": 2,\n\t\"configViolationTypeId\": 17,\n\t\"isActive\": true,\n\t\"complyByDays\": 9\n}"
								},
								"url": {
									"raw": "http://{{env}}/xerce/config/violations",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"xerce",
										"config",
										"violations"
									]
								}
							},
							"response": []
						},
						{
							"name": "create valid Animal violation without comply days",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a91b5d70-c23d-4604-8e08-9905eafce7f2",
										"exec": [
											"var expectedSchema = {",
											"  \"type\": \"object\",",
											"  \"required\": [",
											"    \"id\",",
											"    \"label\",",
											"    \"configMunicipalCodeId\",",
											"    \"configViolationTypeId\",",
											"    \"isActive\",",
											"    \"complyByDays\",",
											"    \"sequence\"",
											"  ],",
											"  \"properties\": {",
											"    \"id\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"label\": {",
											"      \"type\": \"string\",",
											"    },",
											"    \"configMunicipalCodeId\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"configViolationTypeId\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"isActive\": {",
											"      \"type\": \"boolean\"",
											"    },",
											"    \"complyByDays\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"sequence\": {",
											"      \"type\": \"integer\"",
											"    }",
											"  }",
											"};",
											"",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
											"});",
											"",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
											"",
											"});",
											"",
											"pm.test(\"Validate label\", function () {",
											"    pm.expect(jsonData.label).to.eql(\"Animal Violation\");",
											"});",
											"",
											"pm.test(\"Validate if active\", function () {",
											"    pm.expect(jsonData.isActive).to.eql(true);",
											"});",
											"",
											"pm.test(\"Validate sequence\", function() {",
											"    pm.expect(jsonData.sequence == 3).to.be.true;",
											"});",
											"",
											"pm.test(\"Validate config Municipal Code Id\", function () {",
											"    pm.expect(jsonData.configMunicipalCodeId).to.eql(2);",
											"});",
											"",
											"pm.test(\"Validate config Violation Type Id\", function () {",
											"    pm.expect(jsonData.configViolationTypeId).to.eql(16);",
											"});",
											"",
											"pm.test(\"Validate comply By Days\", function () {",
											"    pm.expect(jsonData.complyByDays).to.eql(7);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token_product_admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"label\": \"Animal Violation\",\n\t\"configMunicipalCodeId\": 2,\n\t\"configViolationTypeId\": 16,\n\t\"isActive\": true\n}\n\n"
								},
								"url": {
									"raw": "http://{{env}}/xerce/config/violations",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"xerce",
										"config",
										"violations"
									]
								}
							},
							"response": []
						},
						{
							"name": "validate create violation without violation type id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a91b5d70-c23d-4604-8e08-9905eafce7f2",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Throws error message\",function(){",
											"    pm.expect(jsonData.message).to.equal( \"Invalid request. Missing required property: configViolationTypeId\");",
											"});",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token_product_admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"label\": \"Bear Protection\",\n\t\"configMunicipalCodeId\": 2,\n\t\"isActive\": true,\n\t\"complyByDays\": 3\n}\n\n"
								},
								"url": {
									"raw": "http://{{env}}/xerce/config/violations",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"xerce",
										"config",
										"violations"
									]
								}
							},
							"response": []
						},
						{
							"name": "search vehicle violations",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5e2564ba-ad46-4ea9-953c-b19f655ae093",
										"exec": [
											"var expectedSchema = {",
											"  \"type\": \"array\",",
											"  \"items\": {",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"      \"id\",",
											"      \"label\",",
											"      \"complyByDays\",",
											"      \"configMunicipalCode\",",
											"      \"configViolationType\"",
											"    ],",
											"    \"properties\": {",
											"      \"id\": {",
											"        \"type\": \"integer\"",
											"      },",
											"      \"label\": {",
											"        \"type\": \"string\"",
											"      },",
											"      \"complyByDays\": {",
											"        \"type\": \"integer\"",
											"      },",
											"      \"configMunicipalCode\": {",
											"        \"type\": \"object\",",
											"        \"required\": [",
											"          \"id\",",
											"          \"articleNumber\",",
											"          \"description\",",
											"          \"resolutionAction\"",
											"        ],",
											"        \"properties\": {",
											"          \"id\": {",
											"            \"type\": \"integer\"",
											"          },",
											"          \"articleNumber\": {",
											"            \"type\": \"string\"",
											"          },",
											"          \"description\": {",
											"            \"type\": \"string\"",
											"          },",
											"          \"resolutionAction\": {",
											"            \"type\": \"string\"",
											"          }",
											"        }",
											"      },",
											"      \"configViolationType\": {",
											"        \"type\": \"object\",",
											"        \"required\": [",
											"          \"id\",",
											"          \"label\",",
											"          \"iconURL\"",
											"        ],",
											"        \"properties\": {",
											"          \"id\": {",
											"            \"type\": \"integer\"",
											"          },",
											"          \"label\": {",
											"            \"type\": \"string\"",
											"          },",
											"          \"iconURL\": {",
											"            \"type\": \"string\"",
											"          }",
											"        }",
											"      }",
											"    }",
											"  }",
											"};",
											"",
											"var jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,202]);",
											"});",
											"",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
											"",
											"});",
											"",
											"pm.test(\"Validate length\", function () {",
											"    pm.expect(jsonData.length).to.eql(1);",
											"});",
											"",
											"pm.test(\"Validate label\", function () {",
											"    pm.expect(jsonData[0].label).to.eql(\"Vehicle Violation\");",
											"});",
											"",
											"pm.test(\"Validate config Municipal Code Id\", function () {",
											"    pm.expect(jsonData[0].configMunicipalCode.id).to.eql(2);",
											"});",
											"",
											"pm.test(\"Validate config Municipal Code article number\", function () {",
											"    pm.expect(jsonData[0].configMunicipalCode.articleNumber).to.eql('8.48.015 G');",
											"});",
											"",
											"pm.test(\"Validate config Municipal Code description\", function () {",
											"    pm.expect(jsonData[0].configMunicipalCode.description).to.eql('Overgrown, Dead, or Dying Vegetation');",
											"});",
											"",
											"pm.test(\"Validate config Municipal Code resolution action\", function () {",
											"    pm.expect(jsonData[0].configMunicipalCode.resolutionAction).to.eql('Fine the owner');",
											"});",
											"",
											"pm.test(\"Validate config Violation Type Id\", function () {",
											"    pm.expect(jsonData[0].configViolationType.id).to.eql(17);",
											"});",
											"",
											"pm.test(\"Validate config Violation Type label\", function () {",
											"    pm.expect(jsonData[0].configViolationType.label).to.eql('Vehicle');",
											"});",
											"",
											"pm.test(\"Validate config Violation Type icon URL\", function () {",
											"    pm.expect(jsonData[0].configViolationType.iconURL).to.eql('https://cyberdyne-dev.s3.amazonaws.com/agency_0/system_icon/vehicle.png');",
											"});",
											"",
											"pm.test(\"Validate comply By Days\", function () {",
											"    pm.expect(jsonData[0].complyByDays).to.eql(9);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token_product_admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{env}}/xerce/violations?search=Vehicle%20Violation",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"xerce",
										"violations"
									],
									"query": [
										{
											"key": "search",
											"value": "Vehicle%20Violation"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search violations",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5e2564ba-ad46-4ea9-953c-b19f655ae093",
										"exec": [
											"var expectedSchema = {",
											"  \"type\": \"array\",",
											"  \"items\": {",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"      \"id\",",
											"      \"label\",",
											"      \"complyByDays\",",
											"      \"configMunicipalCode\",",
											"      \"configViolationType\"",
											"    ],",
											"    \"properties\": {",
											"      \"id\": {",
											"        \"type\": \"integer\"",
											"      },",
											"      \"label\": {",
											"        \"type\": \"string\"",
											"      },",
											"      \"complyByDays\": {",
											"        \"type\": \"integer\"",
											"      },",
											"      \"configMunicipalCode\": {",
											"        \"type\": \"object\",",
											"        \"required\": [",
											"          \"id\",",
											"          \"articleNumber\",",
											"          \"description\",",
											"          \"resolutionAction\"",
											"        ],",
											"        \"properties\": {",
											"          \"id\": {",
											"            \"type\": \"integer\"",
											"          },",
											"          \"articleNumber\": {",
											"            \"type\": \"string\"",
											"          },",
											"          \"description\": {",
											"            \"type\": \"string\"",
											"          },",
											"          \"resolutionAction\": {",
											"            \"type\": \"string\"",
											"          }",
											"        }",
											"      },",
											"      \"configViolationType\": {",
											"        \"type\": \"object\",",
											"        \"required\": [",
											"          \"id\",",
											"          \"label\",",
											"          \"iconURL\"",
											"        ],",
											"        \"properties\": {",
											"          \"id\": {",
											"            \"type\": \"integer\"",
											"          },",
											"          \"label\": {",
											"            \"type\": \"string\"",
											"          },",
											"          \"iconURL\": {",
											"            \"type\": \"string\"",
											"          }",
											"        }",
											"      }",
											"    }",
											"  }",
											"};",
											"",
											"var jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,202]);",
											"});",
											"",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
											"",
											"});",
											"",
											"pm.test(\"Validate number of search violation\", function () {",
											"    pm.expect(jsonData.length).to.eql(2);",
											"});",
											"",
											"pm.test(\"Validate vehicle violation label\", function () {",
											"    pm.expect(jsonData[0].label).to.eql(\"Vehicle Violation\");",
											"});",
											"",
											"pm.test(\"Validate animal violation label\", function () {",
											"    pm.expect(jsonData[1].label).to.eql(\"Animal Violation\");",
											"});",
											"",
											"pm.test(\"Validate config Municipal Code Id\", function () {",
											"    pm.expect(jsonData[0].configMunicipalCode.id).to.eql(2);",
											"});",
											"",
											"pm.test(\"Validate config Municipal Code article number\", function () {",
											"    pm.expect(jsonData[0].configMunicipalCode.articleNumber).to.eql('8.48.015 G');",
											"});",
											"",
											"pm.test(\"Validate config Municipal Code description\", function () {",
											"    pm.expect(jsonData[0].configMunicipalCode.description).to.eql('Overgrown, Dead, or Dying Vegetation');",
											"});",
											"",
											"pm.test(\"Validate config Municipal Code resolution action\", function () {",
											"    pm.expect(jsonData[0].configMunicipalCode.resolutionAction).to.eql('Fine the owner');",
											"});",
											"",
											"pm.test(\"Validate config Violation Type Id\", function () {",
											"    pm.expect(jsonData[0].configViolationType.id).to.eql(17);",
											"});",
											"",
											"pm.test(\"Validate config Violation Type label\", function () {",
											"    pm.expect(jsonData[0].configViolationType.label).to.eql('Vehicle');",
											"});",
											"",
											"pm.test(\"Validate config Violation Type icon URL\", function () {",
											"    pm.expect(jsonData[0].configViolationType.iconURL).to.eql('https://cyberdyne-dev.s3.amazonaws.com/agency_0/system_icon/vehicle.png');",
											"});",
											"",
											"pm.test(\"Validate comply By Days\", function () {",
											"    pm.expect(jsonData[0].complyByDays).to.eql(9);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token_product_admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{env}}/xerce/violations?search=violation",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"xerce",
										"violations"
									],
									"query": [
										{
											"key": "search",
											"value": "violation"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search violations - single character",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5e2564ba-ad46-4ea9-953c-b19f655ae093",
										"exec": [
											"var expectedSchema = {",
											"  \"type\": \"array\",",
											"  \"items\": {",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"      \"id\",",
											"      \"label\",",
											"      \"complyByDays\",",
											"      \"configMunicipalCode\",",
											"      \"configViolationType\"",
											"    ],",
											"    \"properties\": {",
											"      \"id\": {",
											"        \"type\": \"integer\"",
											"      },",
											"      \"label\": {",
											"        \"type\": \"string\"",
											"      },",
											"      \"complyByDays\": {",
											"        \"type\": \"integer\"",
											"      },",
											"      \"configMunicipalCode\": {",
											"        \"type\": \"object\",",
											"        \"required\": [",
											"          \"id\",",
											"          \"articleNumber\",",
											"          \"description\",",
											"          \"resolutionAction\"",
											"        ],",
											"        \"properties\": {",
											"          \"id\": {",
											"            \"type\": \"integer\"",
											"          },",
											"          \"articleNumber\": {",
											"            \"type\": \"string\"",
											"          },",
											"          \"description\": {",
											"            \"type\": \"string\"",
											"          },",
											"          \"resolutionAction\": {",
											"            \"type\": \"string\"",
											"          }",
											"        }",
											"      },",
											"      \"configViolationType\": {",
											"        \"type\": \"object\",",
											"        \"required\": [",
											"          \"id\",",
											"          \"label\",",
											"          \"iconURL\"",
											"        ],",
											"        \"properties\": {",
											"          \"id\": {",
											"            \"type\": \"integer\"",
											"          },",
											"          \"label\": {",
											"            \"type\": \"string\"",
											"          },",
											"          \"iconURL\": {",
											"            \"type\": \"string\"",
											"          }",
											"        }",
											"      }",
											"    }",
											"  }",
											"};",
											"",
											"var jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,202]);",
											"});",
											"",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
											"",
											"});",
											"",
											"pm.test(\"Validate number of search violation\", function () {",
											"    pm.expect(jsonData.length).to.eql(2);",
											"});",
											"",
											"pm.test(\"Validate label\", function () {",
											"    pm.expect(jsonData[0].label).to.eql(\"Vehicle Violation\");",
											"});",
											"",
											"pm.test(\"Validate label\", function () {",
											"    pm.expect(jsonData[1].label).to.eql(\"Animal Violation\");",
											"});",
											"",
											"pm.test(\"Validate config Municipal Code Id\", function () {",
											"    pm.expect(jsonData[0].configMunicipalCode.id).to.eql(2);",
											"});",
											"",
											"pm.test(\"Validate config Municipal Code article number\", function () {",
											"    pm.expect(jsonData[0].configMunicipalCode.articleNumber).to.eql('8.48.015 G');",
											"});",
											"",
											"pm.test(\"Validate config Municipal Code description\", function () {",
											"    pm.expect(jsonData[0].configMunicipalCode.description).to.eql('Overgrown, Dead, or Dying Vegetation');",
											"});",
											"",
											"pm.test(\"Validate config Municipal Code resolution action\", function () {",
											"    pm.expect(jsonData[0].configMunicipalCode.resolutionAction).to.eql('Fine the owner');",
											"});",
											"",
											"pm.test(\"Validate config Violation Type Id\", function () {",
											"    pm.expect(jsonData[0].configViolationType.id).to.eql(17);",
											"});",
											"",
											"pm.test(\"Validate config Violation Type label\", function () {",
											"    pm.expect(jsonData[0].configViolationType.label).to.eql('Vehicle');",
											"});",
											"",
											"pm.test(\"Validate config Violation Type icon URL\", function () {",
											"    pm.expect(jsonData[0].configViolationType.iconURL).to.eql('https://cyberdyne-dev.s3.amazonaws.com/agency_0/system_icon/vehicle.png');",
											"});",
											"",
											"pm.test(\"Validate comply By Days\", function () {",
											"    pm.expect(jsonData[0].complyByDays).to.eql(9);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token_product_admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{env}}/xerce/violations?search=v",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"xerce",
										"violations"
									],
									"query": [
										{
											"key": "search",
											"value": "v"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search violations - not exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5e2564ba-ad46-4ea9-953c-b19f655ae093",
										"exec": [
											"var jsonData = pm.response.json();",
											"console.log(jsonData);",
											"pm.test(\"Get empty array\",function(){",
											"    pm.expect(jsonData).that.eql([]);",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token_product_admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{env}}/xerce/violations?search=testapi",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"xerce",
										"violations"
									],
									"query": [
										{
											"key": "search",
											"value": "testapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7bcbf0af-322c-4fab-b60a-b7d45f2fc297",
										"exec": [
											"var expectedSchema = {",
											"  \"type\": \"array\",",
											"  \"items\": {",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"      \"id\",",
											"      \"label\",",
											"      \"configMunicipalCodeId\",",
											"      \"configViolationTypeId\",",
											"      \"complyByDays\",",
											"      \"sequence\",",
											"      \"isActive\"",
											"    ],",
											"    \"properties\": {",
											"      \"id\": {",
											"        \"type\": \"integer\"",
											"      },",
											"      \"label\": {",
											"        \"type\": \"string\"",
											"      },",
											"      \"configMunicipalCodeId\": {",
											"        \"type\": \"integer\"",
											"      },",
											"      \"configViolationTypeId\": {",
											"        \"type\": \"integer\"",
											"      },",
											"      \"complyByDays\": {",
											"        \"type\": \"integer\"",
											"      },",
											"      \"sequence\": {",
											"        \"type\": \"integer\"",
											"      },",
											"      \"isActive\": {",
											"        \"type\": \"boolean\"",
											"      }",
											"    }",
											"  }",
											"};",
											"",
											"var jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,202]);",
											"});",
											"",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
											"});",
											"",
											"pm.test(\"Validate number of search violation\", function () {",
											"    pm.expect(jsonData.length).to.eql(3);",
											"});",
											"",
											"pm.test(\"Validate vehicle violation label\", function () {",
											"    pm.expect(jsonData[0].label).to.eql(\"Vehicle Violation\");",
											"});",
											"",
											"pm.test(\"Validate old vehicle violation label\", function () {",
											"    pm.expect(jsonData[1].label).to.eql(\"Old Vehicle\");",
											"});",
											"",
											"pm.test(\"Validate animal violation label\", function () {",
											"    pm.expect(jsonData[2].label).to.eql(\"Animal Violation\");",
											"});",
											"",
											"pm.test(\"Validate old vehicle if inactive\", function () {",
											"    pm.expect(jsonData[1].isActive).to.eql(false);",
											"});",
											"",
											"pm.test(\"Validate config Municipal Code Id\", function () {",
											"    pm.expect(jsonData[0].configMunicipalCodeId).to.eql(2);",
											"});",
											"",
											"pm.test(\"Validate config Violation Type Id\", function () {",
											"    pm.expect(jsonData[0].configViolationTypeId).to.eql(17);",
											"});",
											"",
											"pm.test(\"Validate comply By Days\", function () {",
											"    pm.expect(jsonData[2].complyByDays).to.eql(7);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_staff}}",
										"description": "}",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token_super_admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{env}}/xerce/config/violations",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"xerce",
										"config",
										"violations"
									]
								}
							},
							"response": []
						},
						{
							"name": "edit label, status and comply by day",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7fe32203-3e51-4f0a-b940-0d50dd9937cd",
										"exec": [
											"var expectedSchema = {",
											"  \"type\": \"object\",",
											"  \"required\": [",
											"    \"id\",",
											"    \"label\",",
											"    \"configMunicipalCodeId\",",
											"    \"configViolationTypeId\",",
											"    \"isActive\",",
											"    \"complyByDays\",",
											"    \"sequence\"",
											"  ],",
											"  \"properties\": {",
											"    \"id\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"label\": {",
											"      \"type\": \"string\",",
											"    },",
											"    \"configMunicipalCodeId\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"configViolationTypeId\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"isActive\": {",
											"      \"type\": \"boolean\"",
											"    },",
											"    \"complyByDays\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"sequence\": {",
											"      \"type\": \"integer\"",
											"    }",
											"  }",
											"};",
											"",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,202]);",
											"});",
											"",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
											"",
											"});",
											"",
											"pm.test(\"Validate label\", function () {",
											"    pm.expect(jsonData.label).to.eql(\"Unlawful Riding\");",
											"});",
											"",
											"pm.test(\"Validate if active\", function () {",
											"    pm.expect(jsonData.isActive).to.eql(false);",
											"});",
											"",
											"pm.test(\"Validate sequence\", function() {",
											"    pm.expect(jsonData.sequence == 1).to.be.true;",
											"});",
											"",
											"pm.test(\"Validate config Municipal Code Id\", function () {",
											"    pm.expect(jsonData.configMunicipalCodeId).to.eql(2);",
											"});",
											"",
											"pm.test(\"Validate config Violation Type Id\", function () {",
											"    pm.expect(jsonData.configViolationTypeId).to.eql(17);",
											"});",
											"",
											"pm.test(\"Validate comply By Days\", function () {",
											"    pm.expect(jsonData.complyByDays).to.eql(5);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token_product_admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"label\": \"Unlawful Riding\",\n\t\"configMunicipalCodeId\": 2,\n\t\"configViolationTypeId\": 17,\n\t\"isActive\": false,\n\t\"complyByDays\": 5\n}\n\n"
								},
								"url": {
									"raw": "http://{{env}}/xerce/config/violations/1",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"xerce",
										"config",
										"violations",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "edit violation - duplicate label",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cd10f2dd-3c46-429f-a676-a44e390f8526",
										"type": "text/javascript",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Throws error message\",function(){",
											"    pm.expect(jsonData.message).to.equal( 'Violation should be unique');",
											"});",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(409);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token_product_admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"label\": \"Animal Violation\",\n\t\"configMunicipalCodeId\": 2,\n\t\"configViolationTypeId\": 17,\n\t\"isActive\": false,\n\t\"complyByDays\": 5\n}\n\n"
								},
								"url": {
									"raw": "http://{{env}}/xerce/config/violations/1",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"xerce",
										"config",
										"violations",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "validate search- after edit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5e2564ba-ad46-4ea9-953c-b19f655ae093",
										"exec": [
											"var expectedSchema = {",
											"  \"type\": \"array\",",
											"  \"items\": {",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"      \"id\",",
											"      \"label\",",
											"      \"complyByDays\",",
											"      \"configMunicipalCode\",",
											"      \"configViolationType\"",
											"    ],",
											"    \"properties\": {",
											"      \"id\": {",
											"        \"type\": \"integer\"",
											"      },",
											"      \"label\": {",
											"        \"type\": \"string\"",
											"      },",
											"      \"complyByDays\": {",
											"        \"type\": \"integer\"",
											"      },",
											"      \"configMunicipalCode\": {",
											"        \"type\": \"object\",",
											"        \"required\": [",
											"          \"id\",",
											"          \"articleNumber\",",
											"          \"description\",",
											"          \"resolutionAction\"",
											"        ],",
											"        \"properties\": {",
											"          \"id\": {",
											"            \"type\": \"integer\"",
											"          },",
											"          \"articleNumber\": {",
											"            \"type\": \"string\"",
											"          },",
											"          \"description\": {",
											"            \"type\": \"string\"",
											"          },",
											"          \"resolutionAction\": {",
											"            \"type\": \"string\"",
											"          }",
											"        }",
											"      },",
											"      \"configViolationType\": {",
											"        \"type\": \"object\",",
											"        \"required\": [",
											"          \"id\",",
											"          \"label\",",
											"          \"iconURL\"",
											"        ],",
											"        \"properties\": {",
											"          \"id\": {",
											"            \"type\": \"integer\"",
											"          },",
											"          \"label\": {",
											"            \"type\": \"string\"",
											"          },",
											"          \"iconURL\": {",
											"            \"type\": \"string\"",
											"          }",
											"        }",
											"      }",
											"    }",
											"  }",
											"};",
											"",
											"var jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,202]);",
											"});",
											"",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
											"",
											"});",
											"",
											"pm.test(\"Validate number of search violation\", function () {",
											"    pm.expect(jsonData.length).to.eql(1);",
											"});",
											"",
											"pm.test(\"Validate label\", function () {",
											"    pm.expect(jsonData[0].label).to.eql(\"Animal Violation\");",
											"});",
											"",
											"pm.test(\"Validate config Municipal Code Id\", function () {",
											"    pm.expect(jsonData[0].configMunicipalCode.id).to.eql(2);",
											"});",
											"",
											"pm.test(\"Validate config Municipal Code article number\", function () {",
											"    pm.expect(jsonData[0].configMunicipalCode.articleNumber).to.eql('8.48.015 G');",
											"});",
											"",
											"pm.test(\"Validate config Municipal Code description\", function () {",
											"    pm.expect(jsonData[0].configMunicipalCode.description).to.eql('Overgrown, Dead, or Dying Vegetation');",
											"});",
											"",
											"pm.test(\"Validate config Municipal Code resolution action\", function () {",
											"    pm.expect(jsonData[0].configMunicipalCode.resolutionAction).to.eql('Fine the owner');",
											"});",
											"",
											"pm.test(\"Validate config Violation Type Id\", function () {",
											"    pm.expect(jsonData[0].configViolationType.id).to.eql(16);",
											"});",
											"",
											"pm.test(\"Validate config Violation Type label\", function () {",
											"    pm.expect(jsonData[0].configViolationType.label).to.eql('Animal C');",
											"});",
											"",
											"pm.test(\"Validate config Violation Type icon URL\", function () {",
											"    pm.expect(jsonData[0].configViolationType.iconURL).to.eql('https://cyberdyne-dev.s3.amazonaws.com/agency_0/system_icon/animal.png');",
											"});",
											"",
											"pm.test(\"Validate comply By Days\", function () {",
											"    pm.expect(jsonData[0].complyByDays).to.eql(7);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token_product_admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{env}}/xerce/violations?search=a",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"xerce",
										"violations"
									],
									"query": [
										{
											"key": "search",
											"value": "a"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Config Case Custom TIle",
					"item": [
						{
							"name": "create valid case custom tile",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "43f3528e-0b12-4fd9-9414-07a58a66720b",
										"exec": [
											"var expectedSchema = {",
											"  \"type\": \"object\",",
											"  \"required\": [",
											"    \"id\",",
											"    \"isActive\",",
											"    \"label\",",
											"    \"caseCustomFields\"",
											"  ],",
											"  \"properties\": {",
											"    \"id\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"isActive\": {",
											"      \"type\": \"boolean\"",
											"    },",
											"    \"isMergeField\": {",
											"      \"type\": \"boolean\"",
											"    },",
											"    \"label\": {",
											"      \"type\": \"string\",",
											"    },",
											"    \"caseCustomFields\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"object\",",
											"        \"required\": [",
											"          \"id\",",
											"          \"isActive\",",
											"          \"isMergeField\",",
											"          \"label\",",
											"          \"options\",",
											"          \"type\",",
											"          \"sequence\"",
											"        ],",
											"        \"properties\": {",
											"          \"id\": {",
											"            \"type\": \"integer\"",
											"          },",
											"          \"isActive\": {",
											"            \"type\": \"boolean\"",
											"          },",
											"          \"isMergeField\": {",
											"             \"type\": \"boolean\"",
											"          },",
											"          \"label\": {",
											"            \"type\": \"string\"",
											"          },",
											"          \"options\": {",
											"            \"type\": \"array\"",
											"          },",
											"          \"type\": {",
											"            \"type\": \"string\"",
											"          },",
											"          \"sequence\": {",
											"            \"type\": \"integer\"",
											"          }",
											"        }",
											"      }",
											"    }",
											"  }",
											"};",
											"",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
											"});",
											"",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
											"",
											"});",
											"",
											"pm.test(\"Validate label\", function () {",
											"    pm.expect(jsonData.label).to.eql(\"Common Forest\");",
											"});",
											"",
											"pm.test(\"Validate if active\", function () {",
											"    pm.expect(jsonData.isActive).to.eql(true);",
											"});",
											"",
											"pm.test(\"Validate Text field id\", function () {",
											"    pm.expect(jsonData.caseCustomFields[0].id).to.eql(1);",
											"});",
											"",
											"pm.test(\"Validate Text field label\", function () {",
											"    pm.expect(jsonData.caseCustomFields[0].label).to.eql(\"Registered Number\");",
											"});",
											"",
											"pm.test(\"Validate Text field if active\", function () {",
											"    pm.expect(jsonData.caseCustomFields[0].isActive).to.eql(true);",
											"});",
											"",
											"pm.test(\"Validate Number field if is merge field\", function () {",
											"    pm.expect(jsonData.caseCustomFields[0].isMergeField).to.eql(true);",
											"});",
											"",
											"pm.test(\"Validate Text field type\", function () {",
											"    pm.expect(jsonData.caseCustomFields[0].type).to.eql(\"TEXT\");",
											"});",
											"",
											"pm.test(\"Validate Text field options\", function () {",
											"    pm.expect(jsonData.caseCustomFields[0].options).to.be.eql([]);",
											"});",
											"",
											"pm.test(\"Validate Text field sequence\", function() {",
											"    pm.expect(jsonData.caseCustomFields[0].sequence == 1).to.be.true;",
											"});",
											"",
											"pm.test(\"Validate Text field id\", function () {",
											"    pm.expect(jsonData.caseCustomFields[1].id).to.eql(2);",
											"});",
											"",
											"pm.test(\"Validate Text field label\", function () {",
											"    pm.expect(jsonData.caseCustomFields[1].label).to.eql(\"Forest Name\");",
											"});",
											"",
											"pm.test(\"Validate Text field if active\", function () {",
											"    pm.expect(jsonData.caseCustomFields[1].isActive).to.eql(true);",
											"});",
											"",
											"pm.test(\"Validate Text field if is merge field\", function () {",
											"    pm.expect(jsonData.caseCustomFields[1].isMergeField).to.eql(true);",
											"});",
											"",
											"pm.test(\"Validate Text field type\", function () {",
											"    pm.expect(jsonData.caseCustomFields[1].type).to.eql(\"TEXT\");",
											"});",
											"",
											"pm.test(\"Validate Text field options\", function () {",
											"    pm.expect(jsonData.caseCustomFields[1].options).to.be.eql([]);",
											"});",
											"",
											"pm.test(\"Validate Text field sequence\", function() {",
											"    pm.expect(jsonData.caseCustomFields[1].sequence == 2).to.be.true;",
											"});",
											"",
											"pm.test(\"Validate Text field id\", function () {",
											"    pm.expect(jsonData.caseCustomFields[2].id).to.eql(3);",
											"});",
											"",
											"pm.test(\"Validate Number field label\", function () {",
											"    pm.expect(jsonData.caseCustomFields[2].label).to.eql(\"Forest license number\");",
											"});",
											"",
											"pm.test(\"Validate Number field if active\", function () {",
											"    pm.expect(jsonData.caseCustomFields[2].isActive).to.eql(true);",
											"});",
											"",
											"pm.test(\"Validate Number field if is merge field\", function () {",
											"    pm.expect(jsonData.caseCustomFields[2].isMergeField).to.eql(true);",
											"});",
											"",
											"pm.test(\"Validate Number field type\", function () {",
											"    pm.expect(jsonData.caseCustomFields[2].type).to.eql(\"NUMBER\");",
											"});",
											"",
											"pm.test(\"Validate Number field options\", function () {",
											"    pm.expect(jsonData.caseCustomFields[2].options).to.be.eql([]);",
											"});",
											"",
											"pm.test(\"Validate Number field sequence\", function() {",
											"    pm.expect(jsonData.caseCustomFields[2].sequence == 3).to.be.true;",
											"});",
											"",
											"pm.test(\"Validate Date field id\", function () {",
											"    pm.expect(jsonData.caseCustomFields[3].id).to.eql(4);",
											"});",
											"",
											"pm.test(\"Validate Date field label\", function () {",
											"    pm.expect(jsonData.caseCustomFields[3].label).to.eql('Supervisor');",
											"});",
											"",
											"pm.test(\"Validate Date field if active\", function () {",
											"    pm.expect(jsonData.caseCustomFields[3].isActive).to.eql(true);",
											"});",
											"",
											"pm.test(\"Validate Number field if is merge field\", function () {",
											"    pm.expect(jsonData.caseCustomFields[3].isMergeField).to.eql(true);",
											"});",
											"",
											"pm.test(\"Validate Date field type\", function () {",
											"    pm.expect(jsonData.caseCustomFields[3].type).to.eql(\"DATE\");",
											"});",
											"",
											"pm.test(\"Validate Date field options\", function () {",
											"    pm.expect(jsonData.caseCustomFields[3].options).to.be.eql([]);",
											"});",
											"",
											"pm.test(\"Validate Date field sequence\", function() {",
											"    pm.expect(jsonData.caseCustomFields[3].sequence == 4).to.be.true;",
											"});",
											"",
											"pm.test(\"Validate Picklist field id\", function () {",
											"    pm.expect(jsonData.caseCustomFields[4].id).to.eql(5);",
											"});",
											"",
											"pm.test(\"Validate Picklist field label\", function () {",
											"    pm.expect(jsonData.caseCustomFields[4].label).to.eql('Forest Gates');",
											"});",
											"",
											"pm.test(\"Validate Picklist field if active\", function () {",
											"    pm.expect(jsonData.caseCustomFields[4].isActive).to.eql(true);",
											"});",
											"",
											"pm.test(\"Validate Number field if is merge field\", function () {",
											"    pm.expect(jsonData.caseCustomFields[4].isMergeField).to.eql(true);",
											"});",
											"",
											"pm.test(\"Validate Picklist field type\", function () {",
											"    pm.expect(jsonData.caseCustomFields[4].type).to.eql(\"PICKLIST\");",
											"});",
											"",
											"pm.test(\"Validate Picklist field options\", function () {",
											"    pm.expect(jsonData.caseCustomFields[4].options).to.eql([\"GatTwo\", \"GateOne\"]);",
											"});",
											"",
											"pm.test(\"Validate Picklist field sequence\", function() {",
											"    pm.expect(jsonData.caseCustomFields[4].sequence == 5).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"description": "}",
										"key": "Authorization",
										"value": "{{token_staff}}",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token_product_admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"label\": \"Common Forest\",\n\t\"isActive\": true,\n\t\"caseCustomFields\": [\n\t\t{\n\t\t\t\"label\": \"Registered Number\",\n\t\t\t\"isActive\": true,\n\t\t\t\"isMergeField\": true,\n\t\t\t\"type\": \"TEXT\",\n\t\t\t\"options\":[],\n\t\t\t\"sequence\": 1\n\t\t},\n\t\t{\n\t\t\t\"label\": \"Forest Name\",\n\t\t\t\"isActive\": true,\n\t\t\t\"isMergeField\": true,\n\t\t\t\"type\": \"TEXT\",\n\t\t\t\"options\":[],\n\t\t\t\"sequence\": 2\n\t\t},\n\t\t{\n\t\t\t\"label\": \"Forest license number\",\n\t\t\t\"isActive\": true,\n\t\t\t\"isMergeField\": true,\n\t\t\t\"type\": \"NUMBER\",\n\t\t\t\"options\":[],\n\t\t\t\"sequence\": 3\n\t\t},\n\t\t{\n\t\t\t\"label\": \"Supervisor\",\n\t\t\t\"isActive\": true,\n\t\t\t\"isMergeField\": true,\n\t\t\t\"type\": \"DATE\",\n\t\t\t\"options\":[],\n\t\t\t\"sequence\": 4\n\t\t},\n\t\t{\n\t\t\t\"label\": \"Forest Gates\",\n\t\t\t\"isActive\": true,\n\t\t\t\"isMergeField\": true,\n\t\t\t\"type\": \"PICKLIST\",\n\t\t\t\"options\": [\"GatTwo\", \"GateOne\"],\n\t\t    \"sequence\": 5\n\t\t}\n\t]\n}\n"
								},
								"url": {
									"raw": "http://{{env}}/xerce/config/case-custom-tiles",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"xerce",
										"config",
										"case-custom-tiles"
									]
								}
							},
							"response": []
						},
						{
							"name": "create valid case custom tile - Inactive",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3432700d-35d7-4343-881c-eeb568602d63",
										"exec": [
											"var expectedSchema = {",
											"  \"type\": \"object\",",
											"  \"required\": [",
											"    \"id\",",
											"    \"isActive\",",
											"    \"label\",",
											"    \"caseCustomFields\"",
											"  ],",
											"  \"properties\": {",
											"    \"id\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"isActive\": {",
											"      \"type\": \"boolean\"",
											"    },",
											"    \"label\": {",
											"      \"type\": \"string\",",
											"    },",
											"    \"caseCustomFields\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"object\",",
											"        \"required\": [",
											"          \"id\",",
											"          \"isActive\",",
											"          \"isMergeField\",",
											"          \"label\",",
											"          \"options\",",
											"          \"type\",",
											"          \"sequence\"",
											"        ],",
											"        \"properties\": {",
											"          \"id\": {",
											"            \"type\": \"integer\"",
											"          },",
											"          \"isActive\": {",
											"            \"type\": \"boolean\"",
											"          },",
											"          \"isMergeField\" :{",
											"             \"type\": \"boolean\" ",
											"          },",
											"          \"label\": {",
											"            \"type\": \"string\"",
											"          },",
											"          \"options\": {",
											"            \"type\": \"array\"",
											"          },",
											"          \"type\": {",
											"            \"type\": \"string\"",
											"          },",
											"          \"sequence\": {",
											"            \"type\": \"integer\"",
											"          }",
											"        }",
											"      }",
											"    }",
											"  }",
											"};",
											"",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
											"});",
											"",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
											"",
											"});",
											"",
											"pm.test(\"Validate label\", function () {",
											"    pm.expect(jsonData.label).to.eql('Common Fire and Safety');",
											"});",
											"",
											"pm.test(\"Validate if active\", function () {",
											"    pm.expect(jsonData.isActive).to.eql(false);",
											"});",
											"",
											"pm.test(\"Validate Text field id\", function () {",
											"    pm.expect(jsonData.caseCustomFields[0].id).to.eql(6);",
											"});",
											"",
											"pm.test(\"Validate Text field label\", function () {",
											"    pm.expect(jsonData.caseCustomFields[0].label).to.eql(\"Brigade number\");",
											"});",
											"",
											"pm.test(\"Validate Text field if active\", function () {",
											"    pm.expect(jsonData.caseCustomFields[0].isActive).to.eql(true);",
											"});",
											"",
											"pm.test(\"Validate Number field if is merge field\", function () {",
											"    pm.expect(jsonData.caseCustomFields[0].isMergeField).to.eql(true);",
											"});",
											"",
											"pm.test(\"Validate Text field type\", function () {",
											"    pm.expect(jsonData.caseCustomFields[0].type).to.eql(\"NUMBER\");",
											"});",
											"",
											"pm.test(\"Validate Text field options\", function () {",
											"    pm.expect(jsonData.caseCustomFields[0].options).to.be.eql([]);",
											"});",
											"",
											"pm.test(\"Validate Text field sequence\", function() {",
											"    pm.expect(jsonData.caseCustomFields[0].sequence == 1).to.be.true;",
											"});",
											"",
											"pm.test(\"Validate Text field id\", function () {",
											"    pm.expect(jsonData.caseCustomFields[1].id).to.eql(7);",
											"});",
											"",
											"pm.test(\"Validate Text field label\", function () {",
											"    pm.expect(jsonData.caseCustomFields[1].label).to.eql(\"Brigade name\");",
											"});",
											"",
											"pm.test(\"Validate Text field if active\", function () {",
											"    pm.expect(jsonData.caseCustomFields[1].isActive).to.eql(true);",
											"});",
											"",
											"pm.test(\"Validate Number field if is merge field\", function () {",
											"    pm.expect(jsonData.caseCustomFields[1].isMergeField).to.eql(true);",
											"});",
											"",
											"pm.test(\"Validate Text field type\", function () {",
											"    pm.expect(jsonData.caseCustomFields[1].type).to.eql(\"TEXT\");",
											"});",
											"",
											"pm.test(\"Validate Text field options\", function () {",
											"    pm.expect(jsonData.caseCustomFields[1].options).to.be.eql([]);",
											"});",
											"",
											"pm.test(\"Validate Text field sequence\", function() {",
											"    pm.expect(jsonData.caseCustomFields[1].sequence == 2).to.be.true;",
											"});",
											"",
											"pm.test(\"Validate Text field id\", function () {",
											"    pm.expect(jsonData.caseCustomFields[2].id).to.eql(8);",
											"});",
											"",
											"pm.test(\"Validate Text field label\", function () {",
											"    pm.expect(jsonData.caseCustomFields[2].label).to.eql(\"Supervisor\");",
											"});",
											"",
											"pm.test(\"Validate Text field if active\", function () {",
											"    pm.expect(jsonData.caseCustomFields[2].isActive).to.eql(true);",
											"});",
											"",
											"pm.test(\"Validate Number field if is merge field\", function () {",
											"    pm.expect(jsonData.caseCustomFields[2].isMergeField).to.eql(true);",
											"});",
											"",
											"pm.test(\"Validate Text field type\", function () {",
											"    pm.expect(jsonData.caseCustomFields[2].type).to.eql(\"DATE\");",
											"});",
											"",
											"pm.test(\"Validate Text field options\", function () {",
											"    pm.expect(jsonData.caseCustomFields[2].options).to.be.eql([]);",
											"});",
											"",
											"pm.test(\"Validate Text field sequence\", function() {",
											"    pm.expect(jsonData.caseCustomFields[2].sequence == 3).to.be.true;",
											"});",
											"",
											"pm.test(\"Validate Text field id\", function () {",
											"    pm.expect(jsonData.caseCustomFields[3].id).to.eql(9);",
											"});",
											"",
											"pm.test(\"Validate Text field label\", function () {",
											"    pm.expect(jsonData.caseCustomFields[3].label).to.eql(\"Brigade Charges\");",
											"});",
											"",
											"pm.test(\"Validate Text field if active\", function () {",
											"    pm.expect(jsonData.caseCustomFields[3].isActive).to.eql(true);",
											"});",
											"",
											"pm.test(\"Validate Number field if is merge field\", function () {",
											"    pm.expect(jsonData.caseCustomFields[3].isMergeField).to.eql(true);",
											"});",
											"",
											"pm.test(\"Validate Text field type\", function () {",
											"    pm.expect(jsonData.caseCustomFields[3].type).to.eql(\"PICKLIST\");",
											"});",
											"",
											"pm.test(\"Validate Text field options\", function () {",
											"    pm.expect(jsonData.caseCustomFields[3].options).to.be.eql([\"5000\", \"10000\",\"20000\"]);",
											"});",
											"",
											"pm.test(\"Validate Text field sequence\", function() {",
											"    pm.expect(jsonData.caseCustomFields[3].sequence == 4).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"description": "}",
										"key": "Authorization",
										"value": "{{token_staff}}",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token_product_admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"label\": \"Common Fire and Safety\",\n\t\"isActive\": false,\n\t\"caseCustomFields\": [\n\t\t{\n\t\t\t\"label\": \"Brigade number\",\n\t\t\t\"isActive\": true,\n\t\t\t\"isMergeField\": true,\n\t\t\t\"type\": \"NUMBER\",\n\t\t\t\"options\":[],\n\t\t\t\"sequence\": 1\n\t\t},\n\t\t\t{\n\t\t\t\"label\": \"Brigade name\",\n\t\t\t\"isActive\": true,\n\t\t\t\"isMergeField\": true,\n\t\t\t\"type\": \"TEXT\",\n\t\t\t\"options\":[],\n\t\t\t\"sequence\": 2\n\t\t},\n\t\t{\n\t\t\t\"label\": \"Supervisor\",\n\t\t\t\"isActive\": true,\n\t\t\t\"isMergeField\": true,\n\t\t\t\"type\": \"DATE\",\n\t\t\t\"options\":[],\n\t\t\t\"sequence\": 3\n\t\t},\n\t\t{\n\t\t\t\"label\": \"Brigade Charges\",\n\t\t\t\"isActive\": true,\n\t\t\t\"isMergeField\": true,\n\t\t\t\"type\": \"PICKLIST\",\n\t\t\t\"options\": [\"5000\", \"10000\",\"20000\"],\n\t\t    \"sequence\": 4\n\t\t}\n\t]\n}\n"
								},
								"url": {
									"raw": "http://{{env}}/xerce/config/case-custom-tiles",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"xerce",
										"config",
										"case-custom-tiles"
									]
								}
							},
							"response": []
						},
						{
							"name": "create case custom tile - all inactive fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3432700d-35d7-4343-881c-eeb568602d63",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Throws error message\",function(){",
											"    pm.expect(jsonData.message).to.equal('Custom section can\\'t be created without at least one active field.');",
											"});",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"description": "}",
										"key": "Authorization",
										"value": "{{token_staff}}",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token_product_admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"label\": \"Private Firm\",\n\t\"isActive\": true,\n\t\"caseCustomFields\": [\n\t\t{\n\t\t\t\"label\": \"Firm number\",\n\t\t\t\"isActive\": false,\n\t\t\t\"isMergeField\": false,\n\t\t\t\"type\": \"NUMBER\",\n\t\t\t\"options\":[],\n\t\t\t\"sequence\": 1\n\t\t},\n\t\t\t{\n\t\t\t\"label\": \"Firm name\",\n\t\t\t\"isActive\": false,\n\t\t\t\"isMergeField\": false,\n\t\t\t\"type\": \"TEXT\",\n\t\t\t\"options\":[],\n\t\t\t\"sequence\": 2\n\t\t},\n\t\t{\n\t\t\t\"label\": \"Established In\",\n\t\t\t\"isActive\": false,\n\t\t\t\"isMergeField\": false,\n\t\t\t\"type\": \"DATE\",\n\t\t\t\"options\":[],\n\t\t\t\"sequence\": 3\n\t\t},\n\t\t{\n\t\t\t\"label\": \"Contacts\",\n\t\t\t\"isActive\": false,\n\t\t\t\"isMergeField\": false,\n\t\t\t\"type\": \"PICKLIST\",\n\t\t\t\"options\": [\"5000\", \"10000\",\"20000\"],\n\t\t    \"sequence\": 4\n\t\t}\n\t]\n}\n"
								},
								"url": {
									"raw": "http://{{env}}/xerce/config/case-custom-tiles",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"xerce",
										"config",
										"case-custom-tiles"
									]
								}
							},
							"response": []
						},
						{
							"name": "create case custom field - no label",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3432700d-35d7-4343-881c-eeb568602d63",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Throws error message\",function(){",
											"    pm.expect(jsonData.message).to.equal('Invalid request. Missing required property: label');",
											"});",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"description": "}",
										"key": "Authorization",
										"value": "{{token_staff}}",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token_product_admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"isActive\": true,\n\t\"caseCustomFields\": [\n\t\t{\n\t\t\t\"label\": \"Firm number\",\n\t\t\t\"isActive\": false,\n\t\t\t\"isMergeField\": false,\n\t\t\t\"type\": \"NUMBER\",\n\t\t\t\"options\":[],\n\t\t\t\"sequence\": 1\n\t\t},\n\t\t\t{\n\t\t\t\"label\": \"Firm name\",\n\t\t\t\"isActive\": false,\n\t\t\t\"isMergeField\": false,\n\t\t\t\"type\": \"TEXT\",\n\t\t\t\"options\":[],\n\t\t\t\"sequence\": 2\n\t\t},\n\t\t{\n\t\t\t\"label\": \"Established In\",\n\t\t\t\"isActive\": false,\n\t\t\t\"isMergeField\": false,\n\t\t\t\"type\": \"DATE\",\n\t\t\t\"options\":[],\n\t\t\t\"sequence\": 3\n\t\t},\n\t\t{\n\t\t\t\"label\": \"Contacts\",\n\t\t\t\"isActive\": false,\n\t\t\t\"isMergeField\": false,\n\t\t\t\"type\": \"PICKLIST\",\n\t\t\t\"options\": [\"5000\", \"10000\",\"20000\"],\n\t\t    \"sequence\": 4\n\t\t}\n\t]\n}\n"
								},
								"url": {
									"raw": "http://{{env}}/xerce/config/case-custom-tiles",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"xerce",
										"config",
										"case-custom-tiles"
									]
								}
							},
							"response": []
						},
						{
							"name": "create case custom field - special characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3432700d-35d7-4343-881c-eeb568602d63",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Throws error message\",function(){",
											"    pm.expect(jsonData.message).to.equal('Invalid argument label. String does not match pattern ^[a-zA-Z]+[ a-zA-Z]*$: !@#$%^&*(}');",
											"});",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"description": "}",
										"key": "Authorization",
										"value": "{{token_staff}}",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token_product_admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"label\": \"!@#$%^&*(}\",\n\t\"isActive\": true,\n\t\"caseCustomFields\": [\n\t\t{\n\t\t\t\"label\": \"Firm number\",\n\t\t\t\"isActive\": true,\n\t\t\t\"isMergeField\": true,\n\t\t\t\"type\": \"NUMBER\",\n\t\t\t\"options\":[],\n\t\t\t\"sequence\": 1\n\t\t},\n\t\t\t{\n\t\t\t\"label\": \"Firm name\",\n\t\t\t\"isActive\": false,\n\t\t\t\"isMergeField\": false,\n\t\t\t\"type\": \"TEXT\",\n\t\t\t\"options\":[],\n\t\t\t\"sequence\": 2\n\t\t},\n\t\t{\n\t\t\t\"label\": \"Established In\",\n\t\t\t\"isActive\": false,\n\t\t\t\"isMergeField\": false,\n\t\t\t\"type\": \"DATE\",\n\t\t\t\"options\":[],\n\t\t\t\"sequence\": 3\n\t\t},\n\t\t{\n\t\t\t\"label\": \"Contacts\",\n\t\t\t\"isActive\": false,\n\t\t\t\"isMergeField\": false,\n\t\t\t\"type\": \"PICKLIST\",\n\t\t\t\"options\": [\"5000\", \"10000\",\"20000\"],\n\t\t    \"sequence\": 4\n\t\t}\n\t]\n}\n"
								},
								"url": {
									"raw": "http://{{env}}/xerce/config/case-custom-tiles",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"xerce",
										"config",
										"case-custom-tiles"
									]
								}
							},
							"response": []
						},
						{
							"name": "create case custom field - no status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3432700d-35d7-4343-881c-eeb568602d63",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Throws error message\",function(){",
											"    pm.expect(jsonData.message).to.equal('Invalid request. Missing required property: isActive');",
											"});",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"description": "}",
										"key": "Authorization",
										"value": "{{token_staff}}",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token_product_admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"label\": \"Custom Field\",\n\t\"caseCustomFields\": [\n\t\t{\n\t\t\t\"label\": \"Firm number\",\n\t\t\t\"isActive\": false,\n\t\t\t\"isMergeField\": false,\n\t\t\t\"type\": \"NUMBER\",\n\t\t\t\"options\":[],\n\t\t\t\"sequence\": 1\n\t\t},\n\t\t\t{\n\t\t\t\"label\": \"Firm name\",\n\t\t\t\"isActive\": false,\n\t\t\t\"isMergeField\": false,\n\t\t\t\"type\": \"TEXT\",\n\t\t\t\"options\":[],\n\t\t\t\"sequence\": 2\n\t\t},\n\t\t{\n\t\t\t\"label\": \"Established In\",\n\t\t\t\"isActive\": false,\n\t\t\t\"isMergeField\": false,\n\t\t\t\"type\": \"DATE\",\n\t\t\t\"options\":[],\n\t\t\t\"sequence\": 3\n\t\t},\n\t\t{\n\t\t\t\"label\": \"Contacts\",\n\t\t\t\"isActive\": false,\n\t\t\t\"isMergeField\": false,\n\t\t\t\"type\": \"PICKLIST\",\n\t\t\t\"options\": [\"5000\", \"10000\",\"20000\"],\n\t\t    \"sequence\": 4\n\t\t}\n\t]\n}\n"
								},
								"url": {
									"raw": "http://{{env}}/xerce/config/case-custom-tiles",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"xerce",
										"config",
										"case-custom-tiles"
									]
								}
							},
							"response": []
						},
						{
							"name": "create case custom field - no fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3432700d-35d7-4343-881c-eeb568602d63",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Throws error message\",function(){",
											"    pm.expect(jsonData.message).to.equal('Invalid request. Missing required property: caseCustomFields');",
											"});",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"description": "}",
										"key": "Authorization",
										"value": "{{token_staff}}",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token_product_admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"label\": \"Custom Field\",\n\t\"isActive\":true\n}\n"
								},
								"url": {
									"raw": "http://{{env}}/xerce/config/case-custom-tiles",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"xerce",
										"config",
										"case-custom-tiles"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create case custom field - label with spaces",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3432700d-35d7-4343-881c-eeb568602d63",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Throws error message\",function(){",
											"    pm.expect(jsonData.message).to.equal('Invalid argument label. String does not match pattern ^[a-zA-Z]+[ a-zA-Z]*$:   ');",
											"});",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"description": "}",
										"key": "Authorization",
										"value": "{{token_staff}}",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token_product_admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"label\": \"  \",\n\t\"isActive\": true,\n\t\"caseCustomFields\": [\n\t\t{\n\t\t\t\"label\": \"Firm number\",\n\t\t\t\"isActive\": false,\n\t\t\t\"isMergeField\": false,\n\t\t\t\"type\": \"NUMBER\",\n\t\t\t\"options\":[],\n\t\t\t\"sequence\": 1\n\t\t},\n\t\t\t{\n\t\t\t\"label\": \"Firm name\",\n\t\t\t\"isActive\": false,\n\t\t\t\"isMergeField\": false,\n\t\t\t\"type\": \"TEXT\",\n\t\t\t\"options\":[],\n\t\t\t\"sequence\": 2\n\t\t},\n\t\t{\n\t\t\t\"label\": \"Established In\",\n\t\t\t\"isActive\": false,\n\t\t\t\"isMergeField\": false,\n\t\t\t\"type\": \"DATE\",\n\t\t\t\"options\":[],\n\t\t\t\"sequence\": 3\n\t\t},\n\t\t{\n\t\t\t\"label\": \"Contacts\",\n\t\t\t\"isActive\": false,\n\t\t\t\"isMergeField\": false,\n\t\t\t\"type\": \"PICKLIST\",\n\t\t\t\"options\": [\"5000\", \"10000\",\"20000\"],\n\t\t    \"sequence\": 4\n\t\t}\n\t]\n}\n"
								},
								"url": {
									"raw": "http://{{env}}/xerce/config/case-custom-tiles",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"xerce",
										"config",
										"case-custom-tiles"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create case custom field - Number in label",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3432700d-35d7-4343-881c-eeb568602d63",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Throws error message\",function(){",
											"    pm.expect(jsonData.message).to.equal('Invalid argument label. String does not match pattern ^[a-zA-Z]+[ a-zA-Z]*$: Forest123');",
											"});",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"description": "}",
										"key": "Authorization",
										"value": "{{token_staff}}",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token_product_admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"label\": \"Forest123\",\n\t\"isActive\": true,\n\t\"caseCustomFields\": [\n\t\t{\n\t\t\t\"label\": \"Firm number\",\n\t\t\t\"isActive\": false,\n\t\t\t\"isMergeField\": false,\n\t\t\t\"type\": \"NUMBER\",\n\t\t\t\"options\":[],\n\t\t\t\"sequence\": 1\n\t\t},\n\t\t\t{\n\t\t\t\"label\": \"Firm name\",\n\t\t\t\"isActive\": false,\n\t\t\t\"isMergeField\": false,\n\t\t\t\"type\": \"TEXT\",\n\t\t\t\"options\":[],\n\t\t\t\"sequence\": 2\n\t\t},\n\t\t{\n\t\t\t\"label\": \"Established In\",\n\t\t\t\"isActive\": false,\n\t\t\t\"isMergeField\": false,\n\t\t\t\"type\": \"DATE\",\n\t\t\t\"options\":[],\n\t\t\t\"sequence\": 3\n\t\t},\n\t\t{\n\t\t\t\"label\": \"Contacts\",\n\t\t\t\"isActive\": false,\n\t\t\t\"isMergeField\": false,\n\t\t\t\"type\": \"PICKLIST\",\n\t\t\t\"options\": [\"5000\", \"10000\",\"20000\"],\n\t\t    \"sequence\": 4\n\t\t}\n\t]\n}\n"
								},
								"url": {
									"raw": "http://{{env}}/xerce/config/case-custom-tiles",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"xerce",
										"config",
										"case-custom-tiles"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create case custom field - Number in field label",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3432700d-35d7-4343-881c-eeb568602d63",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Throws error message\",function(){",
											"    pm.expect(jsonData.message).to.equal('Invalid argument caseCustomFields. String does not match pattern ^[a-zA-Z]+[ a-zA-Z]*$: Contacts7');",
											"});",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"description": "}",
										"key": "Authorization",
										"value": "{{token_staff}}",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token_product_admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"label\": \"Forest\",\n\t\"isActive\": true,\n\t\"caseCustomFields\": [\n\t\t{\n\t\t\t\"label\": \"Firm1 number12\",\n\t\t\t\"isActive\": false,\n\t\t\t\"isMergeField\": false,\n\t\t\t\"type\": \"NUMBER\",\n\t\t\t\"options\":[],\n\t\t\t\"sequence\": 1\n\t\t},\n\t\t\t{\n\t\t\t\"label\": \"Firm7 name4\",\n\t\t\t\"isActive\": false,\n\t\t\t\"isMergeField\": false,\n\t\t\t\"type\": \"TEXT\",\n\t\t\t\"options\":[],\n\t\t\t\"sequence\": 2\n\t\t},\n\t\t{\n\t\t\t\"label\": \"Established7 In7\",\n\t\t\t\"isActive\": false,\n\t\t\t\"isMergeField\": false,\n\t\t\t\"type\": \"DATE\",\n\t\t\t\"options\":[],\n\t\t\t\"sequence\": 3\n\t\t},\n\t\t{\n\t\t\t\"label\": \"Contacts7\",\n\t\t\t\"isActive\": false,\n\t\t\t\"isMergeField\": false,\n\t\t\t\"type\": \"PICKLIST\",\n\t\t\t\"options\": [\"5000\", \"10000\",\"20000\"],\n\t\t    \"sequence\": 4\n\t\t}\n\t]\n}\n"
								},
								"url": {
									"raw": "http://{{env}}/xerce/config/case-custom-tiles",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"xerce",
										"config",
										"case-custom-tiles"
									]
								}
							},
							"response": []
						},
						{
							"name": "create case custom field - no PICKLIST options",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3432700d-35d7-4343-881c-eeb568602d63",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Throws error message\",function(){",
											"    pm.expect(jsonData.message).to.equal('Custom field of type PICKLIST should have options');",
											"});",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"description": "}",
										"key": "Authorization",
										"value": "{{token_staff}}",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token_product_admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"label\": \"Common\",\n\t\"isActive\": true,\n\t\"caseCustomFields\": [\n\t\t{\n\t\t\t\"label\": \"Contacts\",\n\t\t\t\"isActive\": false,\n\t\t\t\"isMergeField\": false,\n\t\t\t\"type\": \"PICKLIST\",\n\t\t\t\"options\": [],\n\t\t    \"sequence\": 4\n\t\t}\n\t]\n}\n"
								},
								"url": {
									"raw": "http://{{env}}/xerce/config/case-custom-tiles",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"xerce",
										"config",
										"case-custom-tiles"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create case custom field - special characters in field label",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3432700d-35d7-4343-881c-eeb568602d63",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Throws error message\",function(){",
											"    pm.expect(jsonData.message).to.equal('Invalid argument caseCustomFields. String does not match pattern ^[a-zA-Z]+[ a-zA-Z]*$: Contacts ^&%^&');",
											"});",
											"",
											"pm.test(\"Status code \", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([400,409]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"description": "}",
										"key": "Authorization",
										"value": "{{token_staff}}",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token_product_admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"label\": \"Forest\",\n\t\"isActive\": true,\n\t\"caseCustomFields\": [\n\t\t{\n\t\t\t\"label\": \"Firm1 number@#$%^&*(\",\n\t\t\t\"isActive\": false,\n\t\t\t\"isMergeField\": false,\n\t\t\t\"type\": \"NUMBER\",\n\t\t\t\"options\":[],\n\t\t\t\"sequence\": 1\n\t\t},\n\t\t\t{\n\t\t\t\"label\": \"Firm^&!@#$%^&*()\",\n\t\t\t\"isActive\": false,\n\t\t\t\"isMergeField\": false,\n\t\t\t\"type\": \"TEXT\",\n\t\t\t\"options\":[],\n\t\t\t\"sequence\": 2\n\t\t},\n\t\t{\n\t\t\t\"label\": \"Established (&\",\n\t\t\t\"isActive\": false,\n\t\t\t\"isMergeField\": false,\n\t\t\t\"type\": \"DATE\",\n\t\t\t\"options\":[],\n\t\t\t\"sequence\": 3\n\t\t},\n\t\t{\n\t\t\t\"label\": \"Contacts ^&%^&\",\n\t\t\t\"isActive\": false,\n\t\t\t\"isMergeField\": false,\n\t\t\t\"type\": \"PICKLIST\",\n\t\t\t\"options\": [\"5000\", \"10000\",\"20000\"],\n\t\t    \"sequence\": 4\n\t\t}\n\t]\n}\n"
								},
								"url": {
									"raw": "http://{{env}}/xerce/config/case-custom-tiles",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"xerce",
										"config",
										"case-custom-tiles"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create case custom field - Invalid sequence",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3432700d-35d7-4343-881c-eeb568602d63",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Throws error message\",function(){",
											"    pm.expect(jsonData.message).to.equal('Conflict occur while creating Case Custom tile.');",
											"});",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(409);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"description": "}",
										"key": "Authorization",
										"value": "{{token_staff}}",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token_product_admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"label\": \"Common Fire and Safety\",\n\t\"isActive\": false,\n\t\"caseCustomFields\": [\n\t\t{\n\t\t\t\"label\": \"Brigade number\",\n\t\t\t\"isActive\": true,\n\t\t\t\"isMergeField\": true,\n\t\t\t\"type\": \"NUMBER\",\n\t\t\t\"options\":[],\n\t\t\t\"sequence\": 1\n\t\t},\n\t\t\t{\n\t\t\t\"label\": \"Brigade name\",\n\t\t\t\"isActive\": true,\n\t\t\t\"isMergeField\": true,\n\t\t\t\"type\": \"TEXT\",\n\t\t\t\"options\":[],\n\t\t\t\"sequence\": 3\n\t\t},\n\t\t{\n\t\t\t\"label\": \"Supervisor\",\n\t\t\t\"isActive\": true,\n\t\t\t\"isMergeField\": true,\n\t\t\t\"type\": \"DATE\",\n\t\t\t\"options\":[],\n\t\t\t\"sequence\": 2\n\t\t},\n\t\t{\n\t\t\t\"label\": \"Brigade Charges\",\n\t\t\t\"isActive\": true,\n\t\t\t\"isMergeField\": true,\n\t\t\t\"type\": \"PICKLIST\",\n\t\t\t\"options\": [\"5000\", \"10000\",\"20000\"],\n\t\t    \"sequence\": 4\n\t\t}\n\t]\n}\n"
								},
								"url": {
									"raw": "http://{{env}}/xerce/config/case-custom-tiles",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"xerce",
										"config",
										"case-custom-tiles"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create case custom field - options to TEXT, NUMBER, DATE",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3432700d-35d7-4343-881c-eeb568602d63",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Throws error message\",function(){",
											"    pm.expect(jsonData.message).to.equal('Conflict occur while creating Case Custom tile.');",
											"});",
											"",
											"pm.test(\"Status code \", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([400,409,500]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"description": "}",
										"key": "Authorization",
										"value": "{{token_staff}}",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token_product_admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"label\": \"Common Fire and Safety\",\n\t\"isActive\": false,\n\t\"caseCustomFields\": [\n\t\t{\n\t\t\t\"label\": \"Brigade number\",\n\t\t\t\"isActive\": true,\n\t\t\t\"isMergeField\": true,\n\t\t\t\"type\": \"NUMBER\",\n\t\t\t\"options\":[\"Width\",\"Length\"],\n\t\t\t\"sequence\": 1\n\t\t},\n\t\t\t{\n\t\t\t\"label\": \"Brigade name\",\n\t\t\t\"isActive\": true,\n\t\t\t\"isMergeField\": true,\n\t\t\t\"type\": \"TEXT\",\n\t\t\t\"options\":[\"Sant John\",\"Roam\"],\n\t\t\t\"sequence\": 2\n\t\t},\n\t\t{\n\t\t\t\"label\": \"Supervisor\",\n\t\t\t\"isActive\": true,\n\t\t\t\"isMergeField\": true,\n\t\t\t\"type\": \"DATE\",\n\t\t\t\"options\":[\"1 Jan\",\"2 Jan\"],\n\t\t\t\"sequence\": 3\n\t\t}\n\t]\n}\n"
								},
								"url": {
									"raw": "http://{{env}}/xerce/config/case-custom-tiles",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"xerce",
										"config",
										"case-custom-tiles"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fa599cfc-b9c1-47dc-84ab-1e582386a3ec",
										"exec": [
											"var expectedSchema = {",
											"  \"type\": \"array\",",
											"  \"items\": {",
											"    \"$id\": \"#/items\",",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"      \"id\",",
											"      \"isActive\",",
											"      \"label\",",
											"      \"caseCustomFields\"",
											"    ],",
											"    \"properties\": {",
											"      \"id\": {",
											"        \"type\": \"integer\"",
											"      },",
											"      \"isActive\": {",
											"        \"type\": \"boolean\"",
											"      },",
											"      \"label\": {",
											"        \"type\": \"string\"",
											"      },",
											"      \"caseCustomFields\": {",
											"        \"type\": \"array\",",
											"        \"items\": {",
											"          \"type\": \"object\",",
											"          \"required\": [",
											"            \"id\",",
											"            \"isActive\",",
											"            \"label\",",
											"            \"options\",",
											"            \"type\",",
											"            \"sequence\"",
											"          ],",
											"          \"properties\": {",
											"            \"id\": {",
											"              \"type\": \"integer\"",
											"            },",
											"            \"isActive\": {",
											"              \"type\": \"boolean\"",
											"            },",
											"            \"label\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"options\": {",
											"              \"type\": \"array\"",
											"            },",
											"            \"type\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"sequence\": {",
											"              \"type\": \"integer\"",
											"            }",
											"          }",
											"        }",
											"      }",
											"    }",
											"  }",
											"}",
											";",
											"",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Successful GET request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
											"});",
											"",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
											"",
											"});",
											"",
											"pm.test(\"Validate result length\", function () {",
											"    pm.expect(jsonData.length).to.eql(2);",
											"});",
											"",
											"pm.test(\"Validate label\", function () {",
											"    pm.expect(jsonData[0].label).to.eql(\"Common Forest\");",
											"});",
											"",
											"pm.test(\"Validate if active\", function () {",
											"    pm.expect(jsonData[0].isActive).to.eql(true);",
											"});",
											"",
											"pm.test(\"Validate custom filed length\", function () {",
											"    pm.expect(jsonData[0].caseCustomFields.length).to.eql(5);",
											"});",
											"",
											"pm.test(\"Validate label\", function () {",
											"    pm.expect(jsonData[1].label).to.eql(\"Common Fire and Safety\");",
											"});",
											"",
											"pm.test(\"Validate if inactive\", function () {",
											"    pm.expect(jsonData[1].isActive).to.eql(false);",
											"});",
											"",
											"pm.test(\"Validate custom filed length\", function () {",
											"    pm.expect(jsonData[1].caseCustomFields.length).to.eql(4);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token_product_admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{env}}/xerce/config/case-custom-tiles",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"xerce",
										"config",
										"case-custom-tiles"
									]
								}
							},
							"response": []
						},
						{
							"name": "edit case custom tile",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cb7a5ec8-b03d-4c18-9378-f8eaa2e16d44",
										"exec": [
											"var expectedSchema = {",
											"  \"type\": \"object\",",
											"  \"required\": [",
											"    \"id\",",
											"    \"isActive\",",
											"    \"label\",",
											"    \"caseCustomFields\"",
											"  ],",
											"  \"properties\": {",
											"    \"id\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"isActive\": {",
											"      \"type\": \"boolean\"",
											"    },",
											"    \"label\": {",
											"      \"type\": \"string\",",
											"    },",
											"    \"caseCustomFields\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"object\",",
											"        \"required\": [",
											"          \"id\",",
											"          \"isActive\",",
											"          \"isMergeField\",",
											"          \"label\",",
											"          \"options\",",
											"          \"type\",",
											"          \"sequence\"",
											"        ],",
											"        \"properties\": {",
											"          \"id\": {",
											"            \"type\": \"integer\"",
											"          },",
											"          \"isActive\": {",
											"            \"type\": \"boolean\"",
											"          },",
											"           \"isMergeField\": {",
											"            \"type\": \"boolean\"",
											"          },",
											"          \"label\": {",
											"            \"type\": \"string\"",
											"          },",
											"          \"options\": {",
											"            \"type\": \"array\"",
											"          },",
											"          \"type\": {",
											"            \"type\": \"string\"",
											"          },",
											"          \"sequence\": {",
											"            \"type\": \"integer\"",
											"          }",
											"        }",
											"      }",
											"    }",
											"  }",
											"};",
											"",
											"",
											"var jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,202]);",
											"});",
											"",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
											"",
											"});",
											"",
											"pm.test(\"Validate label\", function () {",
											"    pm.expect(jsonData.label).to.eql( \"Common Woods\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"description": "}",
										"key": "Authorization",
										"value": "{{token_staff}}",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token_product_admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"label\": \"Common Woods\",\n\t\"isActive\": true,\n\t\"existingCaseCustomFields\": [\n\t\t{\n\t\t\t\"id\": 6,\n\t\t\t\"label\": \"Brigade number\",\n\t\t\t\"isActive\": true,\n\t\t\t\"isMergeField\": true,\n\t\t\t\"type\": \"NUMBER\",\n\t\t\t\"options\":[],\n\t\t\t\"sequence\": 1\n\t\t},\n\t\t{\n\t\t\t\"id\": 7,\n\t\t\t\"label\": \"Brigade name\",\n\t\t\t\"isActive\": true,\n\t\t\t\"isMergeField\": true,\n\t\t\t\"type\": \"TEXT\",\n\t\t\t\"options\":[],\n\t\t\t\"sequence\": 2\n\t\t},\n\t\t{\n\t\t\t\"id\": 8,\n\t\t\t\"label\": \"Supervisor\",\n\t\t\t\"isActive\": true,\n\t\t\t\"isMergeField\": true,\n\t\t\t\"type\": \"DATE\",\n\t\t\t\"options\":[],\n\t\t\t\"sequence\": 3\n\t\t},\n\t\t{\n\t\t\t\"id\": 9,\n\t\t\t\"label\": \"Brigade Charges\",\n\t\t\t\"isActive\": true,\n\t\t\t\"isMergeField\": true,\n\t\t\t\"type\": \"PICKLIST\",\n\t\t\t\"options\": [\"5000\", \"10000\",\"20000\"],\n\t\t    \"sequence\": 4\n\t\t}\n\t],\n\t\"newCaseCustomFields\": [\n    \t{\n\t\t\t\"label\": \"Forest Camp\",\n\t\t\t\"isActive\": true,\n\t\t\t\"isMergeField\": true,\n\t\t\t\"type\": \"TEXT\",\n\t\t\t\"options\":[],\n\t\t\t\"sequence\": 5\n\t\t}\n    ]\n}\n"
								},
								"url": {
									"raw": "http://{{env}}/xerce/config/case-custom-tiles/2",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"xerce",
										"config",
										"case-custom-tiles",
										"2"
									]
								}
							},
							"response": []
						},
						{
							"name": "edit case custom tile - change field label",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cb7a5ec8-b03d-4c18-9378-f8eaa2e16d44",
										"exec": [
											"var expectedSchema = {",
											"  \"type\": \"object\",",
											"  \"required\": [",
											"    \"id\",",
											"    \"isActive\",",
											"    \"label\",",
											"    \"caseCustomFields\"",
											"  ],",
											"  \"properties\": {",
											"    \"id\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"isActive\": {",
											"      \"type\": \"boolean\"",
											"    },",
											"    \"label\": {",
											"      \"type\": \"string\",",
											"    },",
											"    \"caseCustomFields\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"object\",",
											"        \"required\": [",
											"          \"id\",",
											"          \"isActive\",",
											"          \"isMergeField\",",
											"          \"label\",",
											"          \"options\",",
											"          \"type\",",
											"          \"sequence\"",
											"        ],",
											"        \"properties\": {",
											"          \"id\": {",
											"            \"type\": \"integer\"",
											"          },",
											"          \"isActive\": {",
											"            \"type\": \"boolean\"",
											"          },",
											"          \"isMergeField\": {",
											"            \"type\": \"boolean\"",
											"          },",
											"          \"label\": {",
											"            \"type\": \"string\"",
											"          },",
											"          \"options\": {",
											"            \"type\": \"array\"",
											"          },",
											"          \"type\": {",
											"            \"type\": \"string\"",
											"          },",
											"          \"sequence\": {",
											"            \"type\": \"integer\"",
											"          }",
											"        }",
											"      }",
											"    }",
											"  }",
											"};",
											"",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,202]);",
											"});",
											"",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
											"",
											"});",
											"",
											"pm.test(\"Validate label\", function () {",
											"    pm.expect(jsonData.label).to.eql( \"Common Woods\");",
											"});",
											"",
											"pm.test(\"Validate field label\", function () {",
											"    pm.expect(jsonData.caseCustomFields[0].label).to.eql( \"Wood number\");",
											"});",
											"",
											"pm.test(\"Validate field label\", function () {",
											"    pm.expect(jsonData.caseCustomFields[1].label).to.eql( \"Wood name\");",
											"});",
											"",
											"pm.test(\"Validate field label\", function () {",
											"    pm.expect(jsonData.caseCustomFields[2].label).to.eql(\"Date\");",
											"});",
											"",
											"pm.test(\"Validate field label\", function () {",
											"    pm.expect(jsonData.caseCustomFields[3].label).to.eql( \"Brigade Charges\");",
											"});",
											"",
											"pm.test(\"Validate field label\", function () {",
											"    pm.expect(jsonData.caseCustomFields[4].label).to.eql(  \"Wood Camp\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"description": "}",
										"key": "Authorization",
										"value": "{{token_staff}}",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token_product_admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"label\": \"Common Woods\",\n\t\"isActive\": true,\n\t\"existingCaseCustomFields\": [\n\t\t{\n\t\t\t\"id\": 6,\n\t\t\t\"label\": \"Wood number\",\n\t\t\t\"isActive\": true,\n\t\t\t\"isMergeField\": true,\n\t\t\t\"type\": \"NUMBER\",\n\t\t\t\"options\":[],\n\t\t\t\"sequence\": 1\n\t\t},\n\t\t{\n\t\t\t\"id\": 7,\n\t\t\t\"label\": \"Wood name\",\n\t\t\t\"isActive\": true,\n\t\t\t\"isMergeField\": true,\n\t\t\t\"type\": \"TEXT\",\n\t\t\t\"options\":[],\n\t\t\t\"sequence\": 2\n\t\t},\n\t\t{\n\t\t\t\"id\": 8,\n\t\t\t\"label\": \"Date\",\n\t\t\t\"isActive\": true,\n\t\t\t\"isMergeField\": true,\n\t\t\t\"type\": \"DATE\",\n\t\t\t\"options\":[],\n\t\t\t\"sequence\": 3\n\t\t},\n\t\t{\n\t\t\t\"id\": 9,\n\t\t\t\"label\": \"Brigade Charges\",\n\t\t\t\"isActive\": true,\n\t\t\t\"isMergeField\": true,\n\t\t\t\"type\": \"PICKLIST\",\n\t\t\t\"options\": [\"5000\", \"10000\",\"20000\"],\n\t\t    \"sequence\": 4\n\t\t},\n\t\t{\n\t\t\t\"id\": 10,\n\t\t\t\"label\": \"Wood Camp\",\n\t\t\t\"isActive\": true,\n\t\t\t\"isMergeField\": true,\n\t\t\t\"type\": \"TEXT\",\n\t\t\t\"options\":[],\n\t\t\t\"sequence\": 5\n\t\t}\n\t]\n}\n"
								},
								"url": {
									"raw": "http://{{env}}/xerce/config/case-custom-tiles/2",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"xerce",
										"config",
										"case-custom-tiles",
										"2"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit case custom tile - No label",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cb7a5ec8-b03d-4c18-9378-f8eaa2e16d44",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Throws error message\",function(){",
											"    pm.expect(jsonData.message).to.equal('Something went wrong. Please try again later.');",
											"});",
											"",
											"pm.test(\"Status code \", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([500]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"description": "}",
										"key": "Authorization",
										"value": "{{token_staff}}",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token_product_admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"isActive\": true,\n\t\"existingCaseCustomFields\": [\n\t\t{\n\t\t\t\"id\": 6,\n\t\t\t\"label\": \"Brigade number\",\n\t\t\t\"isActive\": true,\n\t\t\t\"isMergeField\": false,\n\t\t\t\"type\": \"NUMBER\",\n\t\t\t\"options\":[],\n\t\t\t\"sequence\": 1\n\t\t},\n\t\t{\n\t\t\t\"id\": 7,\n\t\t\t\"label\": \"Brigade name\",\n\t\t\t\"isActive\": true,\n\t\t\t\"isMergeField\": false,\n\t\t\t\"type\": \"TEXT\",\n\t\t\t\"options\":[],\n\t\t\t\"sequence\": 2\n\t\t},\n\t\t{\n\t\t\t\"id\": 8,\n\t\t\t\"label\": \"Supervisor\",\n\t\t\t\"isActive\": true,\n\t\t\t\"isMergeField\": false,\n\t\t\t\"type\": \"DATE\",\n\t\t\t\"options\":[],\n\t\t\t\"sequence\": 3\n\t\t},\n\t\t{\n\t\t\t\"id\": 9,\n\t\t\t\"label\": \"Brigade Charges\",\n\t\t\t\"isActive\": true,\n\t\t\t\"isMergeField\": false,\n\t\t\t\"type\": \"PICKLIST\",\n\t\t\t\"options\": [\"5000\", \"10000\",\"20000\"],\n\t\t    \"sequence\": 4\n\t\t}\n\t],\n\t\"newCaseCustomFields\": [\n    \t{\n\t\t\t\"label\": \"Forest Camp\",\n\t\t\t\"isActive\": true,\n\t\t\t\"isMergeField\": false,\n\t\t\t\"type\": \"TEXT\",\n\t\t\t\"options\":[],\n\t\t\t\"sequence\": 5\n\t\t}\n    ]\n}\n"
								},
								"url": {
									"raw": "http://{{env}}/xerce/config/case-custom-tiles/2",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"xerce",
										"config",
										"case-custom-tiles",
										"2"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit case custom tile - Number in label",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cb7a5ec8-b03d-4c18-9378-f8eaa2e16d44",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Throws error message\",function(){",
											"    pm.expect(jsonData.message).to.equal('Invalid argument label. String does not match pattern ^[a-zA-Z]+[ a-zA-Z]*$: Forest 34');",
											"});",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"description": "}",
										"key": "Authorization",
										"value": "{{token_staff}}",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token_product_admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"label\": \"Forest 34\",\n\t\"isActive\": true,\n\t\"existingCaseCustomFields\": [\n\t\t{\n\t\t\t\"id\": 6,\n\t\t\t\"label\": \"Brigade number\",\n\t\t\t\"isActive\": true,\n\t\t\t\"isMergeField\": false,\n\t\t\t\"type\": \"NUMBER\",\n\t\t\t\"options\":[],\n\t\t\t\"sequence\": 1\n\t\t},\n\t\t{\n\t\t\t\"id\": 7,\n\t\t\t\"label\": \"Brigade name\",\n\t\t\t\"isActive\": true,\n\t\t\t\"isMergeField\": false,\n\t\t\t\"type\": \"TEXT\",\n\t\t\t\"options\":[],\n\t\t\t\"sequence\": 2\n\t\t},\n\t\t{\n\t\t\t\"id\": 8,\n\t\t\t\"label\": \"Supervisor\",\n\t\t\t\"isActive\": true,\n\t\t\t\"isMergeField\": false,\n\t\t\t\"type\": \"DATE\",\n\t\t\t\"options\":[],\n\t\t\t\"sequence\": 3\n\t\t},\n\t\t{\n\t\t\t\"id\": 9,\n\t\t\t\"label\": \"Brigade Charges\",\n\t\t\t\"isActive\": true,\n\t\t\t\"isMergeField\": false,\n\t\t\t\"type\": \"PICKLIST\",\n\t\t\t\"options\": [\"5000\", \"10000\",\"20000\"],\n\t\t    \"sequence\": 4\n\t\t}\n\t],\n\t\"newCaseCustomFields\": [\n    \t{\n\t\t\t\"label\": \"Forest Camp\",\n\t\t\t\"isActive\": true,\n\t\t\t\"isMergeField\": false,\n\t\t\t\"type\": \"TEXT\",\n\t\t\t\"options\":[],\n\t\t\t\"sequence\": 5\n\t\t}\n    ]\n}\n"
								},
								"url": {
									"raw": "http://{{env}}/xerce/config/case-custom-tiles/2",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"xerce",
										"config",
										"case-custom-tiles",
										"2"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit case custom tile - no status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cb7a5ec8-b03d-4c18-9378-f8eaa2e16d44",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Throws error message\",function(){",
											"    pm.expect(jsonData.message).to.equal('Something went wrong. Please try again later.');",
											"});",
											"",
											"pm.test(\"Status code \", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([500]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"description": "}",
										"key": "Authorization",
										"value": "{{token_staff}}",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token_product_admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"label\": \"Camp\",\n\t\"existingCaseCustomFields\": [\n\t\t{\n\t\t\t\"id\": 6,\n\t\t\t\"label\": \"Brigade number\",\n\t\t\t\"isActive\": true,\n\t\t\t\"isMergeField\": false,\n\t\t\t\"type\": \"NUMBER\",\n\t\t\t\"options\":[],\n\t\t\t\"sequence\": 1\n\t\t},\n\t\t{\n\t\t\t\"id\": 7,\n\t\t\t\"label\": \"Brigade name\",\n\t\t\t\"isActive\": true,\n\t\t\t\"isMergeField\": false,\n\t\t\t\"type\": \"TEXT\",\n\t\t\t\"options\":[],\n\t\t\t\"sequence\": 2\n\t\t},\n\t\t{\n\t\t\t\"id\": 8,\n\t\t\t\"label\": \"Supervisor\",\n\t\t\t\"isActive\": true,\n\t\t\t\"isMergeField\": false,\n\t\t\t\"type\": \"DATE\",\n\t\t\t\"options\":[],\n\t\t\t\"sequence\": 3\n\t\t},\n\t\t{\n\t\t\t\"id\": 9,\n\t\t\t\"label\": \"Brigade Charges\",\n\t\t\t\"isActive\": true,\n\t\t\t\"isMergeField\": false,\n\t\t\t\"type\": \"PICKLIST\",\n\t\t\t\"options\": [\"5000\", \"10000\",\"20000\"],\n\t\t    \"sequence\": 4\n\t\t}\n\t],\n\t\"newCaseCustomFields\": [\n    \t{\n\t\t\t\"label\": \"Forest Camp\",\n\t\t\t\"isActive\": true,\n\t\t\t\"isMergeField\": false,\n\t\t\t\"type\": \"TEXT\",\n\t\t\t\"options\":[],\n\t\t\t\"sequence\": 5\n\t\t}\n    ]\n}\n"
								},
								"url": {
									"raw": "http://{{env}}/xerce/config/case-custom-tiles/2",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"xerce",
										"config",
										"case-custom-tiles",
										"2"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit case custom tile - No label, status options for fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cb7a5ec8-b03d-4c18-9378-f8eaa2e16d44",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Throws error message\",function(){",
											"    pm.expect(jsonData.message).to.equal('Something went wrong. Please try again later.');",
											"});",
											"",
											"pm.test(\"Status code \", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([400,409,500]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"description": "}",
										"key": "Authorization",
										"value": "{{token_staff}}",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token_product_admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"label\": \"Camp\",\n\t\"existingCaseCustomFields\": [\n\t\t{\n\t\t\t\"id\": 6,\n\t\t\t\"isActive\": true,\n\t\t\t\"isMergeField\": false,\n\t\t\t\"type\": \"NUMBER\",\n\t\t\t\"options\":[],\n\t\t\t\"sequence\": 1\n\t\t},\n\t\t{\n\t\t\t\"id\": 7,\n\t\t\t\"label\": \"Brigade name\",\n\t\t\t\"type\": \"TEXT\",\n\t\t\t\"options\":[],\n\t\t\t\"sequence\": 2\n\t\t},\n\t\t{\n\t\t\t\"id\": 8,\n\t\t\t\"label\": \"Supervisor\",\n\t\t\t\"isActive\": true,\n\t\t\t\"isMergeField\": false,\n\t\t\t\"options\":[],\n\t\t\t\"sequence\": 3\n\t\t},\n\t\t{\n\t\t\t\"id\": 9,\n\t\t\t\"label\": \"Brigade Charges\",\n\t\t\t\"isActive\": true,\n\t\t\t\"isMergeField\": false,\n\t\t\t\"type\": \"PICKLIST\",\n\t\t    \"sequence\": 4\n\t\t}\n\t]\n}\n"
								},
								"url": {
									"raw": "http://{{env}}/xerce/config/case-custom-tiles/2",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"xerce",
										"config",
										"case-custom-tiles",
										"2"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All after edit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fa599cfc-b9c1-47dc-84ab-1e582386a3ec",
										"exec": [
											"var expectedSchema = {",
											"  \"type\": \"array\",",
											"  \"items\": {",
											"    \"$id\": \"#/items\",",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"      \"id\",",
											"      \"isActive\",",
											"      \"label\",",
											"      \"caseCustomFields\"",
											"    ],",
											"    \"properties\": {",
											"      \"id\": {",
											"        \"type\": \"integer\"",
											"      },",
											"      \"isActive\": {",
											"        \"type\": \"boolean\"",
											"      },",
											"      \"label\": {",
											"        \"type\": \"string\"",
											"      },",
											"      \"caseCustomFields\": {",
											"        \"type\": \"array\",",
											"        \"items\": {",
											"          \"type\": \"object\",",
											"          \"required\": [",
											"            \"id\",",
											"            \"isActive\",",
											"            \"label\",",
											"            \"options\",",
											"            \"type\",",
											"            \"sequence\"",
											"          ],",
											"          \"properties\": {",
											"            \"id\": {",
											"              \"type\": \"integer\"",
											"            },",
											"            \"isActive\": {",
											"              \"type\": \"boolean\"",
											"            },",
											"            \"label\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"options\": {",
											"              \"type\": \"array\"",
											"            },",
											"            \"type\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"sequence\": {",
											"              \"type\": \"integer\"",
											"            }",
											"          }",
											"        }",
											"      }",
											"    }",
											"  }",
											"}",
											";",
											"",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Successful GET request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
											"});",
											"",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
											"",
											"});",
											"",
											"pm.test(\"Validate result length\", function () {",
											"    pm.expect(jsonData.length).to.eql(2);",
											"});",
											"",
											"pm.test(\"Validate label\", function () {",
											"    pm.expect(jsonData[0].label).to.eql(\"Common Forest\");",
											"});",
											"",
											"pm.test(\"Validate if active\", function () {",
											"    pm.expect(jsonData[0].isActive).to.eql(true);",
											"});",
											"",
											"pm.test(\"Validate custom filed length\", function () {",
											"    pm.expect(jsonData[0].caseCustomFields.length).to.eql(5);",
											"});",
											"",
											"pm.test(\"Validate label\", function () {",
											"    pm.expect(jsonData[1].label).to.eql('Common Woods');",
											"});",
											"",
											"pm.test(\"Validate if inactive\", function () {",
											"    pm.expect(jsonData[1].isActive).to.eql(true);",
											"});",
											"",
											"pm.test(\"Validate custom filed length\", function () {",
											"    pm.expect(jsonData[1].caseCustomFields.length).to.eql(5);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token_product_admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{env}}/xerce/config/case-custom-tiles",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"xerce",
										"config",
										"case-custom-tiles"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get case custom tile",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fc208573-d353-4e9d-964a-f448a58c06b8",
										"exec": [
											"var expectedSchema = {",
											"  \"type\": \"object\",",
											"  \"required\": [",
											"    \"id\",",
											"    \"isActive\",",
											"    \"label\",",
											"    \"caseCustomFields\"",
											"  ],",
											"  \"properties\": {",
											"    \"id\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"isActive\": {",
											"      \"type\": \"boolean\"",
											"    },",
											"    \"label\": {",
											"      \"type\": \"string\",",
											"    },",
											"    \"caseCustomFields\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"object\",",
											"        \"required\": [",
											"          \"id\",",
											"          \"isActive\",",
											"          \"label\",",
											"          \"options\",",
											"          \"type\",",
											"          \"sequence\"",
											"        ],",
											"        \"properties\": {",
											"          \"id\": {",
											"            \"type\": \"integer\"",
											"          },",
											"          \"isActive\": {",
											"            \"type\": \"boolean\"",
											"          },",
											"          \"label\": {",
											"            \"type\": \"string\"",
											"          },",
											"          \"options\": {",
											"            \"type\": \"array\"",
											"          },",
											"          \"type\": {",
											"            \"type\": \"string\"",
											"          },",
											"          \"sequence\": {",
											"            \"type\": \"integer\"",
											"          }",
											"        }",
											"      }",
											"    }",
											"  }",
											"};",
											"",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
											"});",
											"",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
											"",
											"});",
											"",
											"pm.test(\"Validate Picklist field id\", function () {",
											"    pm.expect(jsonData.id).to.eql(1);",
											"});",
											"",
											"pm.test(\"Validate label\", function () {",
											"    pm.expect(jsonData.label).to.eql(\"Common Forest\");",
											"});",
											"",
											"pm.test(\"Validate if active\", function () {",
											"    pm.expect(jsonData.isActive).to.eql(true);",
											"});",
											"",
											"pm.test(\"Validate Text field id\", function () {",
											"    pm.expect(jsonData.caseCustomFields[0].id).to.eql(1);",
											"});",
											"",
											"pm.test(\"Validate Text field label\", function () {",
											"    pm.expect(jsonData.caseCustomFields[0].label).to.eql(\"Registered Number\");",
											"});",
											"",
											"pm.test(\"Validate Text field if active\", function () {",
											"    pm.expect(jsonData.caseCustomFields[0].isActive).to.eql(true);",
											"});",
											"",
											"pm.test(\"Validate Text field type\", function () {",
											"    pm.expect(jsonData.caseCustomFields[0].type).to.eql(\"TEXT\");",
											"});",
											"",
											"pm.test(\"Validate Text field options\", function () {",
											"    pm.expect(jsonData.caseCustomFields[0].options).to.be.eql([]);",
											"});",
											"",
											"pm.test(\"Validate Text field sequence\", function() {",
											"    pm.expect(jsonData.caseCustomFields[0].sequence == 1).to.be.true;",
											"});",
											"",
											"pm.test(\"Validate Text field id\", function () {",
											"    pm.expect(jsonData.caseCustomFields[1].id).to.eql(2);",
											"});",
											"",
											"pm.test(\"Validate Text field label\", function () {",
											"    pm.expect(jsonData.caseCustomFields[1].label).to.eql(\"Forest Name\");",
											"});",
											"",
											"pm.test(\"Validate Text field if active\", function () {",
											"    pm.expect(jsonData.caseCustomFields[1].isActive).to.eql(true);",
											"});",
											"",
											"pm.test(\"Validate Text field type\", function () {",
											"    pm.expect(jsonData.caseCustomFields[1].type).to.eql(\"TEXT\");",
											"});",
											"",
											"pm.test(\"Validate Text field options\", function () {",
											"    pm.expect(jsonData.caseCustomFields[1].options).to.be.eql([]);",
											"});",
											"",
											"pm.test(\"Validate Text field sequence\", function() {",
											"    pm.expect(jsonData.caseCustomFields[1].sequence == 2).to.be.true;",
											"});",
											"",
											"pm.test(\"Validate Text field id\", function () {",
											"    pm.expect(jsonData.caseCustomFields[2].id).to.eql(3);",
											"});",
											"",
											"pm.test(\"Validate Number field label\", function () {",
											"    pm.expect(jsonData.caseCustomFields[2].label).to.eql(\"Forest license number\");",
											"});",
											"",
											"pm.test(\"Validate Number field if active\", function () {",
											"    pm.expect(jsonData.caseCustomFields[2].isActive).to.eql(true);",
											"});",
											"",
											"pm.test(\"Validate Number field type\", function () {",
											"    pm.expect(jsonData.caseCustomFields[2].type).to.eql(\"NUMBER\");",
											"});",
											"",
											"pm.test(\"Validate Number field options\", function () {",
											"    pm.expect(jsonData.caseCustomFields[2].options).to.be.eql([]);",
											"});",
											"",
											"pm.test(\"Validate Number field sequence\", function() {",
											"    pm.expect(jsonData.caseCustomFields[2].sequence == 3).to.be.true;",
											"});",
											"",
											"pm.test(\"Validate Date field id\", function () {",
											"    pm.expect(jsonData.caseCustomFields[3].id).to.eql(4);",
											"});",
											"",
											"pm.test(\"Validate Date field label\", function () {",
											"    pm.expect(jsonData.caseCustomFields[3].label).to.eql('Supervisor');",
											"});",
											"",
											"pm.test(\"Validate Date field if active\", function () {",
											"    pm.expect(jsonData.caseCustomFields[3].isActive).to.eql(true);",
											"});",
											"",
											"pm.test(\"Validate Date field type\", function () {",
											"    pm.expect(jsonData.caseCustomFields[3].type).to.eql(\"DATE\");",
											"});",
											"",
											"pm.test(\"Validate Date field options\", function () {",
											"    pm.expect(jsonData.caseCustomFields[3].options).to.be.eql([]);",
											"});",
											"",
											"pm.test(\"Validate Date field sequence\", function() {",
											"    pm.expect(jsonData.caseCustomFields[3].sequence == 4).to.be.true;",
											"});",
											"",
											"pm.test(\"Validate Picklist field id\", function () {",
											"    pm.expect(jsonData.caseCustomFields[4].id).to.eql(5);",
											"});",
											"",
											"pm.test(\"Validate Picklist field label\", function () {",
											"    pm.expect(jsonData.caseCustomFields[4].label).to.eql('Forest Gates');",
											"});",
											"",
											"pm.test(\"Validate Picklist field if active\", function () {",
											"    pm.expect(jsonData.caseCustomFields[4].isActive).to.eql(true);",
											"});",
											"",
											"pm.test(\"Validate Picklist field type\", function () {",
											"    pm.expect(jsonData.caseCustomFields[4].type).to.eql(\"PICKLIST\");",
											"});",
											"",
											"pm.test(\"Validate Picklist field options\", function () {",
											"    pm.expect(jsonData.caseCustomFields[4].options).to.eql([\"GatTwo\", \"GateOne\"]);",
											"});",
											"",
											"pm.test(\"Validate Picklist field sequence\", function() {",
											"    pm.expect(jsonData.caseCustomFields[4].sequence == 5).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"description": "}",
										"key": "Authorization",
										"value": "{{token_staff}}",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token_super_admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:3000/xerce/config/case-custom-tiles/1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"xerce",
										"config",
										"case-custom-tiles",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get case custom tile - not exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fc208573-d353-4e9d-964a-f448a58c06b8",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Throws error message\",function(){",
											"    pm.expect(jsonData.message).to.equal(\"Could not find the case custom tile.\");",
											"});",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"description": "}",
										"key": "Authorization",
										"value": "{{token_staff}}",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token_super_admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:3000/xerce/config/case-custom-tiles/5",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"xerce",
										"config",
										"case-custom-tiles",
										"5"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Xerce Case",
			"item": [
				{
					"name": "Contacts",
					"item": [
						{
							"name": "Create Valid Individual Contact",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2552ccbd-9d13-4b80-a762-b82cc13f3f70",
										"type": "text/javascript",
										"exec": [
											"var expectedSchema = {",
											"  \"type\": \"object\",",
											"  \"required\": [",
											"    \"id\",",
											"    \"name\",",
											"    \"email\",",
											"    \"contactType\",",
											"    \"isVendor\",",
											"    \"isGisPopulated\",",
											"    \"workPhone\",",
											"    \"cellPhone\",",
											"    \"streetAddress\",",
											"    \"city\",",
											"    \"state\",",
											"    \"zip\",",
											"    \"note\",",
											"    \"associatedContacts\"",
											"  ],",
											"  \"properties\": {",
											"    \"id\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"name\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"email\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"contactType\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"isVendor\": {",
											"      \"type\": \"boolean\"",
											"    },",
											"    \"isGisPopulated\": {",
											"        \"type\": \"boolean\"",
											"    },",
											"    \"workPhone\": {",
											"      \"type\": \"null\"",
											"    },",
											"    \"cellPhone\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"streetAddress\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"city\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"state\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"zip\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"note\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"associatedContacts\": {",
											"      \"type\": \"array\"",
											"    }",
											"  }",
											"};",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
											"",
											"});",
											"",
											"pm.test(\"Validate Name\", function () {",
											"    pm.expect(jsonData.name).to.eql(\"Aurthur Carton\");",
											"});",
											"",
											"pm.test(\"Validate Email\", function () {",
											"    pm.expect(jsonData.email).to.eql(\"aurthur@example.com\");",
											"});",
											"",
											"pm.test(\"Validate Contact Type\", function () {",
											"    pm.expect(jsonData.contactType).to.eql(\"INDIVIDUAL\");",
											"});",
											"",
											"pm.test(\"Validate if vendor\", function () {",
											"    pm.expect(jsonData.isVendor).to.eql(false);",
											"});",
											"",
											"pm.test(\"Validate if isGisPopulated\", function () {",
											"    pm.expect(jsonData.isGisPopulated).to.eql(false);",
											"});",
											"",
											"pm.test(\"Validate Cell Phone\", function () {",
											"    pm.expect(jsonData.cellPhone).to.eql(\"9898989898\");",
											"});",
											"",
											"pm.test(\"Validate Street Address\", function () {",
											"    pm.expect(jsonData.streetAddress).to.eql(\"221B Bakers St\");",
											"});",
											"",
											"pm.test(\"Validate City\", function () {",
											"    pm.expect(jsonData.city).to.eql(\"Minisota\");",
											"});",
											"",
											"pm.test(\"Validate State\", function () {",
											"    pm.expect(jsonData.state).to.eql(\"Minisota\");",
											"});",
											"",
											"pm.test(\"Validate Zip\", function () {",
											"    pm.expect(jsonData.zip).to.eql(\"12214\");",
											"});",
											"",
											"pm.test(\"Validate Note\", function () {",
											"    pm.expect(jsonData.note).to.eql(\"Some random contact note.\");",
											"});",
											"",
											"pm.environment.set(\"arthur_individual_contact_id\",jsonData.id);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token_staff}}",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "{{token_super_admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Aurthur Carton\",\n\t\"contactType\":\"INDIVIDUAL\",\n\t\"isVendor\": false,\n\t\"isGisPopulated\": false,\n\t\"email\": \"aurthur@example.com\",\n\t\"workPhone\": \"\",\n\t\"cellPhone\": \"9898989898\",\n\t\"streetAddress\": \"221B Bakers St\",\n    \"city\": \"Minisota\",\n    \"state\": \"Minisota\",\n    \"zip\": \"12214\",\n\t\"note\": \"Some random contact note.\",\n\t\"contactCustomFieldValues\": {},\n\t\"associatedContacts\": []\n}"
								},
								"url": {
									"raw": "http://{{env}}/contacts",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"contacts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Valid Legal Entity Contact",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a9312d14-c754-4c24-a6e3-42c51b531d4d",
										"type": "text/javascript",
										"exec": [
											"var expectedSchema = {",
											"  \"type\": \"object\",",
											"  \"required\": [",
											"    \"id\",",
											"    \"name\",",
											"    \"email\",",
											"    \"contactType\",",
											"    \"isVendor\",",
											"    \"isGisPopulated\",",
											"    \"workPhone\",",
											"    \"cellPhone\",",
											"    \"streetAddress\",",
											"    \"city\",",
											"    \"state\",",
											"    \"zip\",",
											"    \"note\",",
											"    \"associatedContacts\"",
											"  ],",
											"  \"properties\": {",
											"    \"id\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"name\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"email\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"contactType\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"isVendor\": {",
											"      \"type\": \"boolean\"",
											"    },",
											"    \"isGisPopulated\": {",
											"      \"type\": \"boolean\"",
											"    },",
											"    \"workPhone\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"cellPhone\": {",
											"      \"type\": \"null\"",
											"    },",
											"    \"streetAddress\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"city\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"state\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"zip\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"note\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"associatedContacts\": {",
											"      \"type\": \"array\"",
											"    }",
											"  }",
											"};",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
											"",
											"});",
											"",
											"pm.test(\"Validate Name\", function () {",
											"    pm.expect(jsonData.name).to.eql(\"Monsters Inc\");",
											"});",
											"",
											"pm.test(\"Validate Email\", function () {",
											"    pm.expect(jsonData.email).to.eql(\"monster@example.com\");",
											"});",
											"",
											"pm.test(\"Validate Contact Type\", function () {",
											"    pm.expect(jsonData.contactType).to.eql(\"LEGAL_ENTITY\");",
											"});",
											"",
											"pm.test(\"Validate if vendor\", function () {",
											"    pm.expect(jsonData.isVendor).to.eql(false);",
											"});",
											"",
											"pm.test(\"Validate if isGisPopulated\", function () {",
											"    pm.expect(jsonData.isGisPopulated).to.eql(false);",
											"});",
											"",
											"pm.test(\"Validate Work Phone\", function () {",
											"    pm.expect(jsonData.workPhone).to.eql(\"8989898998\");",
											"});",
											"",
											"pm.test(\"Validate Street Address\", function () {",
											"    pm.expect(jsonData.streetAddress).to.eql(\"Roosewelt St\");",
											"});",
											"",
											"pm.test(\"Validate City\", function () {",
											"    pm.expect(jsonData.city).to.eql(\"New York\");",
											"});",
											"",
											"pm.test(\"Validate State\", function () {",
											"    pm.expect(jsonData.state).to.eql(\"New York\");",
											"});",
											"",
											"pm.test(\"Validate Zip\", function () {",
											"    pm.expect(jsonData.zip).to.eql(\"78459\");",
											"});",
											"",
											"pm.test(\"Validate Note\", function () {",
											"    pm.expect(jsonData.note).to.eql(\"Some random contact note.\");",
											"});",
											"",
											"pm.environment.set(\"monster_legal_entity_contact_id\",jsonData.id);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token_staff}}",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "{{token_super_admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Monsters Inc\",\n\t\"contactType\":\"LEGAL_ENTITY\",\n\t\"isVendor\": false,\n\t\"isGisPopulated\": false,\n\t\"email\": \"monster@example.com\",\n\t\"workPhone\": \"8989898998\",\n\t\"cellPhone\": \"\",\n\t\"streetAddress\": \"Roosewelt St\",\n    \"city\": \"New York\",\n    \"state\": \"New York\",\n    \"zip\": \"78459\",\n\t\"note\": \"Some random contact note.\",\n\t\"contactCustomFieldValues\": {},\n\t\"associatedContacts\": []\n}"
								},
								"url": {
									"raw": "http://{{env}}/contacts",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"contacts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Valid Individual Contact - Associate Entity",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d357ed22-e464-4c53-b81a-ff61285b01c2",
										"type": "text/javascript",
										"exec": [
											"var expectedSchema = {",
											"  \"type\": \"object\",",
											"  \"required\": [",
											"    \"id\",",
											"    \"name\",",
											"    \"email\",",
											"    \"contactType\",",
											"    \"isVendor\",",
											"    \"isGisPopulated\",",
											"    \"workPhone\",",
											"    \"cellPhone\",",
											"    \"streetAddress\",",
											"    \"city\",",
											"    \"state\",",
											"    \"zip\",",
											"    \"note\",",
											"    \"associatedContacts\"",
											"  ],",
											"  \"properties\": {",
											"    \"id\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"name\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"email\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"contactType\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"isVendor\": {",
											"      \"type\": \"boolean\"",
											"    },",
											"    \"isGisPopulated\": {",
											"      \"type\": \"boolean\"",
											"    },",
											"    \"workPhone\": {",
											"      \"type\": \"null\"",
											"    },",
											"    \"cellPhone\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"streetAddress\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"city\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"state\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"zip\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"note\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"associatedContacts\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"object\",",
											"        \"required\": [",
											"          \"isPrimary\",",
											"          \"id\"",
											"        ],",
											"        \"properties\": {",
											"          \"isPrimary\": {",
											"            \"type\": \"boolean\"",
											"          },",
											"          \"id\": {",
											"            \"type\": \"integer\"",
											"          }",
											"        }",
											"      }",
											"    }",
											"  }",
											"};",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
											"",
											"});",
											"",
											"pm.test(\"Validate Name\", function () {",
											"    pm.expect(jsonData.name).to.eql(\"Tom Cruise\");",
											"});",
											"",
											"pm.test(\"Validate Email\", function () {",
											"    pm.expect(jsonData.email).to.eql(\"tom@example.com\");",
											"});",
											"",
											"pm.test(\"Validate Contact Type\", function () {",
											"    pm.expect(jsonData.contactType).to.eql(\"INDIVIDUAL\");",
											"});",
											"",
											"pm.test(\"Validate if vendor\", function () {",
											"    pm.expect(jsonData.isVendor).to.eql(false);",
											"});",
											"",
											"pm.test(\"Validate if isGisPopulated\", function () {",
											"    pm.expect(jsonData.isGisPopulated).to.eql(false);",
											"});",
											"",
											"pm.test(\"Validate Cell Phone\", function () {",
											"    pm.expect(jsonData.cellPhone).to.eql(\"9898989898\");",
											"});",
											"",
											"pm.test(\"Validate Street Address\", function () {",
											"    pm.expect(jsonData.streetAddress).to.eql(\"221B Bakers St\");",
											"});",
											"",
											"pm.test(\"Validate City\", function () {",
											"    pm.expect(jsonData.city).to.eql(\"Minisota\");",
											"});",
											"",
											"pm.test(\"Validate State\", function () {",
											"    pm.expect(jsonData.state).to.eql(\"Minisota\");",
											"});",
											"",
											"pm.test(\"Validate Zip\", function () {",
											"    pm.expect(jsonData.zip).to.eql(\"12214\");",
											"});",
											"",
											"pm.test(\"Validate Note\", function () {",
											"    pm.expect(jsonData.note).to.eql(\"Some random contact note.\");",
											"});",
											"",
											"pm.test(\"Validate Association\", function () {",
											"    pm.expect(jsonData.associatedContacts[0].isPrimary).to.eql(true);",
											"});",
											"",
											"pm.environment.set(\"tom_individual_contact_id\",jsonData.id);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token_staff}}",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "{{token_super_admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Tom Cruise\",\n\t\"contactType\":\"INDIVIDUAL\",\n\t\"isVendor\": false,\n\t\"isGisPopulated\": false,\n\t\"email\": \"tom@example.com\",\n\t\"workPhone\": \"\",\n\t\"cellPhone\": \"9898989898\",\n\t\"streetAddress\": \"221B Bakers St\",\n    \"city\": \"Minisota\",\n    \"state\": \"Minisota\",\n    \"zip\": \"12214\",\n\t\"note\": \"Some random contact note.\",\n\t\"contactCustomFieldValues\": {},\n\t\"associatedContacts\": [\n\t\t{\n\t\t\t\"isPrimary\": true,\n\t\t\t\"id\": {{monster_legal_entity_contact_id}}\n\t\t}\t\n\t]\n}"
								},
								"url": {
									"raw": "http://{{env}}/contacts",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"contacts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Valid Legal Entity Contact (Vendor) - Associate Individual Contact",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2e084cc7-3d8c-4596-aa9a-96581ee0b852",
										"type": "text/javascript",
										"exec": [
											"var expectedSchema = {",
											"  \"type\": \"object\",",
											"  \"required\": [",
											"    \"id\",",
											"    \"name\",",
											"    \"email\",",
											"    \"contactType\",",
											"    \"isVendor\",",
											"    \"isGisPopulated\",",
											"    \"workPhone\",",
											"    \"cellPhone\",",
											"    \"streetAddress\",",
											"    \"city\",",
											"    \"state\",",
											"    \"zip\",",
											"    \"note\",",
											"    \"associatedContacts\"",
											"  ],",
											"  \"properties\": {",
											"    \"id\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"name\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"email\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"contactType\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"isVendor\": {",
											"      \"type\": \"boolean\"",
											"    },",
											"    \"isGisPopulated\": {",
											"      \"type\": \"boolean\"",
											"    },",
											"    \"workPhone\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"cellPhone\": {",
											"      \"type\": \"null\"",
											"    },",
											"    \"streetAddress\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"city\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"state\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"zip\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"note\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"associatedContacts\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"object\",",
											"        \"required\": [",
											"          \"isPrimary\",",
											"          \"id\"",
											"        ],",
											"        \"properties\": {",
											"          \"isPrimary\": {",
											"            \"type\": \"boolean\"",
											"          },",
											"          \"id\": {",
											"            \"type\": \"integer\"",
											"          }",
											"        }",
											"      }",
											"    }",
											"  }",
											"};",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
											"",
											"});",
											"",
											"pm.test(\"Validate Name\", function () {",
											"    pm.expect(jsonData.name).to.eql(\"Mothers Pet\");",
											"});",
											"",
											"pm.test(\"Validate Email\", function () {",
											"    pm.expect(jsonData.email).to.eql(\"mp@example.com\");",
											"});",
											"",
											"pm.test(\"Validate Contact Type\", function () {",
											"    pm.expect(jsonData.contactType).to.eql(\"LEGAL_ENTITY\");",
											"});",
											"",
											"pm.test(\"Validate if vendor\", function () {",
											"    pm.expect(jsonData.isVendor).to.eql(true);",
											"});",
											"",
											"pm.test(\"Validate if isGisPopulated\", function () {",
											"    pm.expect(jsonData.isGisPopulated).to.eql(true);",
											"});",
											"",
											"pm.test(\"Validate Work Phone\", function () {",
											"    pm.expect(jsonData.workPhone).to.eql(\"8989898998\");",
											"});",
											"",
											"pm.test(\"Validate Street Address\", function () {",
											"    pm.expect(jsonData.streetAddress).to.eql(\"Lincoln St\");",
											"});",
											"",
											"pm.test(\"Validate City\", function () {",
											"    pm.expect(jsonData.city).to.eql(\"New York\");",
											"});",
											"",
											"pm.test(\"Validate State\", function () {",
											"    pm.expect(jsonData.state).to.eql(\"New York\");",
											"});",
											"",
											"pm.test(\"Validate Zip\", function () {",
											"    pm.expect(jsonData.zip).to.eql(\"78459\");",
											"});",
											"",
											"pm.test(\"Validate Note\", function () {",
											"    pm.expect(jsonData.note).to.eql(\"Some random contact note.\");",
											"});",
											"",
											"pm.test(\"Validate Contact Association\", function () {",
											"    pm.expect(jsonData.associatedContacts[0].isPrimary).to.eql(true);",
											"});",
											"",
											"pm.environment.set(\"mp_legal_entity_contact_id\",jsonData.id);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token_staff}}",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "{{token_super_admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Mothers Pet\",\n\t\"contactType\":\"LEGAL_ENTITY\",\n\t\"isVendor\": true,\n\t\"isGisPopulated\": true,\n\t\"email\": \"mp@example.com\",\n\t\"workPhone\": \"8989898998\",\n\t\"cellPhone\": \"\",\n\t\"streetAddress\": \"Lincoln St\",\n    \"city\": \"New York\",\n    \"state\": \"New York\",\n    \"zip\": \"78459\",\n\t\"note\": \"Some random contact note.\",\n\t\"contactCustomFieldValues\": {},\n\t\"associatedContacts\": [\n\t\t{\n\t\t\t\"isPrimary\": true,\n\t\t\t\"id\": {{tom_individual_contact_id}}\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "http://{{env}}/contacts",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"contacts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Valid Individual Contact - Vendor",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "86bf0082-0827-47e9-8d41-5eaba304e55b",
										"type": "text/javascript",
										"exec": [
											"var expectedSchema = {",
											"  \"type\": \"object\",",
											"  \"required\": [",
											"    \"id\",",
											"    \"name\",",
											"    \"email\",",
											"    \"contactType\",",
											"    \"isVendor\",",
											"    \"isGisPopulated\",",
											"    \"workPhone\",",
											"    \"cellPhone\",",
											"    \"streetAddress\",",
											"    \"city\",",
											"    \"state\",",
											"    \"zip\",",
											"    \"note\",",
											"    \"associatedContacts\"",
											"  ],",
											"  \"properties\": {",
											"    \"id\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"name\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"email\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"contactType\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"isVendor\": {",
											"      \"type\": \"boolean\"",
											"    },",
											"     \"isGisPopulated\": {",
											"      \"type\": \"boolean\"",
											"    },",
											"    \"workPhone\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"cellPhone\": {",
											"      \"type\": \"null\"",
											"    },",
											"    \"streetAddress\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"city\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"state\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"zip\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"note\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"associatedContacts\": {",
											"      \"type\": \"array\"",
											"    }",
											"  }",
											"};",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
											"",
											"});",
											"",
											"pm.test(\"Validate Name\", function () {",
											"    pm.expect(jsonData.name).to.eql(\"Individual Vendor\");",
											"});",
											"",
											"pm.test(\"Validate Email\", function () {",
											"    pm.expect(jsonData.email).to.eql(\"ivendor@example.com\");",
											"});",
											"",
											"pm.test(\"Validate Contact Type\", function () {",
											"    pm.expect(jsonData.contactType).to.eql(\"INDIVIDUAL\");",
											"});",
											"",
											"pm.test(\"Validate if vendor\", function () {",
											"    pm.expect(jsonData.isVendor).to.eql(true);",
											"});",
											"",
											"pm.test(\"Validate if isGisPopulated\", function () {",
											"    pm.expect(jsonData.isGisPopulated).to.eql(true);",
											"});",
											"",
											"pm.test(\"Validate Work Phone\", function () {",
											"    pm.expect(jsonData.workPhone).to.eql(\"4589785654\");",
											"});",
											"",
											"pm.test(\"Validate Street Address\", function () {",
											"    pm.expect(jsonData.streetAddress).to.eql(\"Killing Monsoon Road\");",
											"});",
											"",
											"pm.test(\"Validate City\", function () {",
											"    pm.expect(jsonData.city).to.eql(\"Ohio\");",
											"});",
											"",
											"pm.test(\"Validate State\", function () {",
											"    pm.expect(jsonData.state).to.eql(\"Ohio\");",
											"});",
											"",
											"pm.test(\"Validate Zip\", function () {",
											"    pm.expect(jsonData.zip).to.eql(\"12214\");",
											"});",
											"",
											"pm.test(\"Validate Note\", function () {",
											"    pm.expect(jsonData.note).to.eql(\"Contact note.\");",
											"});",
											"",
											"pm.environment.set(\"vendor_individual_contact_id\",jsonData.id);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token_staff}}",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "{{token_super_admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Individual Vendor\",\n\t\"contactType\":\"INDIVIDUAL\",\n\t\"isVendor\": true,\n\t\"isGisPopulated\": true,\n\t\"email\": \"ivendor@example.com\",\n\t\"workPhone\": \"4589785654\",\n\t\"cellPhone\": \"\",\n\t\"streetAddress\": \"Killing Monsoon Road\",\n    \"city\": \"Ohio\",\n    \"state\": \"Ohio\",\n    \"zip\": \"12214\",\n\t\"note\": \"Contact note.\",\n\t\"contactCustomFieldValues\": {},\n\t\"associatedContacts\": []\n}"
								},
								"url": {
									"raw": "http://{{env}}/contacts",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"contacts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Duplicate Individual Contact",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dd1e1c65-2e76-4b59-b38a-b5b314d9f74b",
										"type": "text/javascript",
										"exec": [
											"var expectedSchema = {",
											"  \"type\": \"object\",",
											"  \"required\": [",
											"    \"id\",",
											"    \"name\",",
											"    \"email\",",
											"    \"contactType\",",
											"    \"isVendor\",",
											"    \"isGisPopulated\",",
											"    \"workPhone\",",
											"    \"cellPhone\",",
											"    \"streetAddress\",",
											"    \"city\",",
											"    \"state\",",
											"    \"zip\",",
											"    \"note\",",
											"    \"associatedContacts\"",
											"  ],",
											"  \"properties\": {",
											"    \"id\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"name\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"email\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"contactType\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"isVendor\": {",
											"      \"type\": \"boolean\"",
											"    },",
											"    \"isGisPopulated\": {",
											"      \"type\": \"boolean\"",
											"    },",
											"    \"workPhone\": {",
											"      \"type\": \"null\"",
											"    },",
											"    \"cellPhone\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"streetAddress\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"city\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"state\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"zip\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"note\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"associatedContacts\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"object\",",
											"        \"required\": [",
											"          \"isPrimary\",",
											"          \"id\"",
											"        ],",
											"        \"properties\": {",
											"          \"isPrimary\": {",
											"            \"type\": \"boolean\"",
											"          },",
											"          \"id\": {",
											"            \"type\": \"integer\"",
											"          }",
											"        }",
											"      }",
											"    }",
											"  }",
											"};",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
											"",
											"});",
											"",
											"pm.test(\"Validate Name\", function () {",
											"    pm.expect(jsonData.name).to.eql(\"Aurthur Carton\");",
											"});",
											"",
											"pm.test(\"Validate Email\", function () {",
											"    pm.expect(jsonData.email).to.eql(\"aurthur@example.com\");",
											"});",
											"",
											"pm.test(\"Validate Contact Type\", function () {",
											"    pm.expect(jsonData.contactType).to.eql(\"INDIVIDUAL\");",
											"});",
											"",
											"pm.test(\"Validate if vendor\", function () {",
											"    pm.expect(jsonData.isVendor).to.eql(false);",
											"});",
											"",
											"pm.test(\"Validate if isGisPopulated\", function () {",
											"    pm.expect(jsonData.isGisPopulated).to.eql(false);",
											"});",
											"",
											"pm.test(\"Validate Cell Phone\", function () {",
											"    pm.expect(jsonData.cellPhone).to.eql(\"9898989898\");",
											"});",
											"",
											"pm.test(\"Validate Street Address\", function () {",
											"    pm.expect(jsonData.streetAddress).to.eql(\"221B Bakers St\");",
											"});",
											"",
											"pm.test(\"Validate City\", function () {",
											"    pm.expect(jsonData.city).to.eql(\"Minisota\");",
											"});",
											"",
											"pm.test(\"Validate State\", function () {",
											"    pm.expect(jsonData.state).to.eql(\"Minisota\");",
											"});",
											"",
											"pm.test(\"Validate Zip\", function () {",
											"    pm.expect(jsonData.zip).to.eql(\"12214\");",
											"});",
											"",
											"pm.test(\"Validate Note\", function () {",
											"    pm.expect(jsonData.note).to.eql(\"Some random contact note.\");",
											"});",
											"",
											"pm.test(\"Validate Association\", function () {",
											"    pm.expect(jsonData.associatedContacts[0].isPrimary).to.eql(true);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token_staff}}",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "{{token_super_admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Aurthur Carton\",\n\t\"contactType\":\"INDIVIDUAL\",\n\t\"isVendor\": false,\n\t\"isGisPopulated\": false,\n\t\"email\": \"aurthur@example.com\",\n\t\"workPhone\": \"\",\n\t\"cellPhone\": \"9898989898\",\n\t\"streetAddress\": \"221B Bakers St\",\n    \"city\": \"Minisota\",\n    \"state\": \"Minisota\",\n    \"zip\": \"12214\",\n\t\"note\": \"Some random contact note.\",\n\t\"contactCustomFieldValues\": {},\n\t\"associatedContacts\": [\n\t\t{\n\t\t\t\"isPrimary\": true,\n\t\t\t\"id\": {{monster_legal_entity_contact_id}}\n\t\t}\t\n\t]\n}"
								},
								"url": {
									"raw": "http://{{env}}/contacts",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"contacts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Duplicate Legal Entity",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a10c426d-a6b4-4cc2-93ff-c10dcf43caf6",
										"type": "text/javascript",
										"exec": [
											"var expectedSchema = {",
											"  \"type\": \"object\",",
											"  \"required\": [",
											"    \"id\",",
											"    \"name\",",
											"    \"email\",",
											"    \"contactType\",",
											"    \"isVendor\",",
											"    \"isGisPopulated\",",
											"    \"workPhone\",",
											"    \"cellPhone\",",
											"    \"streetAddress\",",
											"    \"city\",",
											"    \"state\",",
											"    \"zip\",",
											"    \"note\",",
											"    \"associatedContacts\"",
											"  ],",
											"  \"properties\": {",
											"    \"id\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"name\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"email\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"contactType\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"isVendor\": {",
											"      \"type\": \"boolean\"",
											"    },",
											"    \"isGisPopulated\": {",
											"      \"type\": \"boolean\"",
											"    },",
											"    \"workPhone\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"cellPhone\": {",
											"      \"type\": \"null\"",
											"    },",
											"    \"streetAddress\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"city\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"state\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"zip\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"note\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"associatedContacts\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"object\",",
											"        \"required\": [",
											"          \"isPrimary\",",
											"          \"id\"",
											"        ],",
											"        \"properties\": {",
											"          \"isPrimary\": {",
											"            \"type\": \"boolean\"",
											"          },",
											"          \"id\": {",
											"            \"type\": \"integer\"",
											"          }",
											"        }",
											"      }",
											"    }",
											"  }",
											"};",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
											"",
											"});",
											"",
											"pm.test(\"Validate Name\", function () {",
											"    pm.expect(jsonData.name).to.eql(\"Monsters Inc\");",
											"});",
											"",
											"pm.test(\"Validate Email\", function () {",
											"    pm.expect(jsonData.email).to.eql(\"monster@example.com\");",
											"});",
											"",
											"pm.test(\"Validate Contact Type\", function () {",
											"    pm.expect(jsonData.contactType).to.eql(\"LEGAL_ENTITY\");",
											"});",
											"",
											"pm.test(\"Validate if vendor\", function () {",
											"    pm.expect(jsonData.isVendor).to.eql(false);",
											"});",
											"",
											"pm.test(\"Validate if isGisPopulated\", function () {",
											"    pm.expect(jsonData.isGisPopulated).to.eql(false);",
											"});",
											"",
											"pm.test(\"Validate Work Phone\", function () {",
											"    pm.expect(jsonData.workPhone).to.eql(\"8989898998\");",
											"});",
											"",
											"pm.test(\"Validate Street Address\", function () {",
											"    pm.expect(jsonData.streetAddress).to.eql(\"Roosewelt St\");",
											"});",
											"",
											"pm.test(\"Validate City\", function () {",
											"    pm.expect(jsonData.city).to.eql(\"New York\");",
											"});",
											"",
											"pm.test(\"Validate State\", function () {",
											"    pm.expect(jsonData.state).to.eql(\"New York\");",
											"});",
											"",
											"pm.test(\"Validate Zip\", function () {",
											"    pm.expect(jsonData.zip).to.eql(\"78459\");",
											"});",
											"",
											"pm.test(\"Validate Note\", function () {",
											"    pm.expect(jsonData.note).to.eql(\"Some random contact note.\");",
											"});",
											"",
											"pm.test(\"Validate Contact Association\", function () {",
											"    pm.expect(jsonData.associatedContacts[0].isPrimary).to.eql(true);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token_staff}}",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "{{token_super_admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Monsters Inc\",\n\t\"contactType\":\"LEGAL_ENTITY\",\n\t\"isVendor\": false,\n\t\"isGisPopulated\": false,\n\t\"email\": \"monster@example.com\",\n\t\"workPhone\": \"8989898998\",\n\t\"cellPhone\": \"\",\n\t\"streetAddress\": \"Roosewelt St\",\n    \"city\": \"New York\",\n    \"state\": \"New York\",\n    \"zip\": \"78459\",\n\t\"note\": \"Some random contact note.\",\n\t\"contactCustomFieldValues\": {},\n\t\"associatedContacts\": [\n\t\t{\n\t\t\t\"isPrimary\": true,\n\t\t\t\"id\": {{tom_individual_contact_id}}\n\t\t}\t\n\t]\n}"
								},
								"url": {
									"raw": "http://{{env}}/contacts",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"contacts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search All Contacts",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c6c8bd37-7f93-48e8-905f-f8de68b9afcd",
										"type": "text/javascript",
										"exec": [
											"var expectedSchema = {",
											"  \"type\": \"object\",",
											"  \"required\": [",
											"    \"individualContacts\",",
											"    \"legalEntityContacts\"",
											"  ],",
											"  \"properties\": {",
											"    \"individualContacts\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"object\",",
											"        \"required\": [",
											"          \"id\",",
											"          \"name\",",
											"          \"email\",",
											"          \"contactType\",",
											"          \"isVendor\",",
											"          \"isGisPopulated\",",
											"          \"streetAddress\",",
											"          \"city\",",
											"          \"state\",",
											"          \"zip\",",
											"          \"note\",",
											"          \"associatedContacts\",",
											"        ],",
											"        \"properties\": {",
											"          \"id\": {",
											"            \"type\": \"integer\"",
											"          },",
											"          \"name\": {",
											"            \"type\": \"string\"",
											"          },",
											"          \"email\": {",
											"            \"type\": \"string\"",
											"          },",
											"          \"contactType\": {",
											"            \"type\": \"string\"",
											"          },",
											"          \"isVendor\": {",
											"            \"type\": \"boolean\"",
											"          },",
											"          \"isGisPopulated\": {",
											"            \"type\": \"boolean\"",
											"          },",
											"          \"streetAddress\": {",
											"            \"type\": \"string\"",
											"          },",
											"          \"city\": {",
											"            \"type\": \"string\"",
											"          },",
											"          \"state\": {",
											"            \"type\": \"string\"",
											"          },",
											"          \"zip\": {",
											"            \"type\": \"string\"",
											"          },",
											"          \"note\": {",
											"            \"type\": \"string\"",
											"          },",
											"          \"associatedContacts\": {",
											"            \"type\": \"array\"",
											"          }",
											"        }",
											"      }",
											"    },",
											"    \"legalEntityContacts\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"object\",",
											"        \"required\": [",
											"          \"id\",",
											"          \"name\",",
											"          \"email\",",
											"          \"contactType\",",
											"          \"isVendor\",",
											"          \"isGisPopulated\",",
											"          \"streetAddress\",",
											"          \"city\",",
											"          \"state\",",
											"          \"zip\",",
											"          \"note\",",
											"          \"associatedContacts\",",
											"        ],",
											"        \"properties\": {",
											"          \"id\": {",
											"            \"type\": \"integer\"",
											"          },",
											"          \"name\": {",
											"            \"type\": \"string\"",
											"          },",
											"          \"email\": {",
											"            \"type\": \"string\"",
											"          },",
											"          \"contactType\": {",
											"            \"type\": \"string\"",
											"          },",
											"          \"isVendor\": {",
											"            \"type\": \"boolean\"",
											"          },",
											"          \"isGisPopulated\": {",
											"            \"type\": \"boolean\"",
											"          },",
											"          \"streetAddress\": {",
											"            \"type\": \"string\"",
											"          },",
											"          \"city\": {",
											"            \"type\": \"string\"",
											"          },",
											"          \"state\": {",
											"            \"type\": \"string\"",
											"          },",
											"          \"zip\": {",
											"            \"type\": \"string\"",
											"          },",
											"          \"note\": {",
											"            \"type\": \"string\"",
											"          },",
											"          \"associatedContacts\": {",
											"            \"type\": \"array\"",
											"          },",
											"        }",
											"      }",
											"    }",
											"  }",
											"};",
											"",
											"var jsonData = pm.response.json();",
											"",
											"console.log(jsonData);",
											"",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
											"});",
											"",
											"var legalEntityContacts = jsonData.legalEntityContacts;",
											"var individualContacts = jsonData.individualContacts;",
											"",
											"pm.test('Legal Entity Contacts Count', function () {",
											"    pm.expect(legalEntityContacts.length).to.eql(3);",
											"});",
											"",
											"pm.test('Individual Contacts Count', function () {",
											"    pm.expect(individualContacts.length).to.eql(4);",
											"});",
											"",
											"pm.test('Validate 1st Individual Contact Name', function() {",
											"    pm.expect(individualContacts[0].name).to.eql('Aurthur Carton');",
											"});",
											"",
											"pm.test('Validate 2nd Individual Contact Association', function() {",
											"    pm.expect(individualContacts[1].associatedContacts.length).to.eql(3);",
											"});",
											"",
											"pm.test('Validate 3rd Legal Entity Contact Name', function() {",
											"    pm.expect(legalEntityContacts[2].name).to.eql('Monsters Inc');",
											"});",
											"",
											"pm.test('Validate 1st Legal Entity Contact Association', function() {",
											"    pm.expect(legalEntityContacts[0].associatedContacts.length).to.eql(2);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token_staff}}",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "{{token_super_admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{env}}/contacts",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"contacts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search All Individual Contacts",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2d4d7ea8-f464-4bcc-855b-f104dabe7e1d",
										"type": "text/javascript",
										"exec": [
											"var expectedSchema = {",
											"  \"type\": \"object\",",
											"  \"required\": [",
											"    \"individualContacts\",",
											"    \"legalEntityContacts\"",
											"  ],",
											"  \"properties\": {",
											"    \"individualContacts\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"object\",",
											"        \"required\": [",
											"          \"id\",",
											"          \"name\",",
											"          \"email\",",
											"          \"contactType\",",
											"          \"isVendor\",",
											"          \"isGisPopulated\",",
											"          \"streetAddress\",",
											"          \"city\",",
											"          \"state\",",
											"          \"zip\",",
											"          \"note\",",
											"          \"associatedContacts\"",
											"        ],",
											"        \"properties\": {",
											"          \"id\": {",
											"            \"type\": \"integer\"",
											"          },",
											"          \"name\": {",
											"            \"type\": \"string\"",
											"          },",
											"          \"email\": {",
											"            \"type\": \"string\"",
											"          },",
											"          \"contactType\": {",
											"            \"type\": \"string\"",
											"          },",
											"          \"isVendor\": {",
											"            \"type\": \"boolean\"",
											"          },",
											"          \"isGisPopulated\": {",
											"            \"type\": \"boolean\"",
											"          },",
											"          \"streetAddress\": {",
											"            \"type\": \"string\"",
											"          },",
											"          \"city\": {",
											"            \"type\": \"string\"",
											"          },",
											"          \"state\": {",
											"            \"type\": \"string\"",
											"          },",
											"          \"zip\": {",
											"            \"type\": \"string\"",
											"          },",
											"          \"note\": {",
											"            \"type\": \"string\"",
											"          },",
											"          \"associatedContacts\": {",
											"            \"type\": \"array\"",
											"          }",
											"        }",
											"      }",
											"    },",
											"    \"legalEntityContacts\": {",
											"      \"type\": \"array\"",
											"    }",
											"  }",
											"};",
											"",
											"var jsonData = pm.response.json();",
											"",
											"console.log(jsonData);",
											"",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
											"});",
											"",
											"var legalEntityContacts = jsonData.legalEntityContacts;",
											"var individualContacts = jsonData.individualContacts;",
											"",
											"pm.test('Legal Entity Contacts Count', function () {",
											"    pm.expect(legalEntityContacts.length).to.eql(0);",
											"});",
											"",
											"pm.test('Individual Contacts Count', function () {",
											"    pm.expect(individualContacts.length).to.eql(4);",
											"});",
											"",
											"pm.test('Validate 2nd Individual Contact Name', function() {",
											"    pm.expect(individualContacts[1].name).to.eql('Tom Cruise');",
											"});",
											"",
											"pm.test('Validate 4th Individual Contact Email', function() {",
											"    pm.expect(individualContacts[3].email).to.eql('aurthur@example.com');",
											"});",
											"",
											"pm.test('Validate 3rd Individual Contact Street Address', function() {",
											"    pm.expect(individualContacts[2].streetAddress).to.eql('Killing Monsoon Road');",
											"});",
											"",
											"pm.test('Validate 1st Individual Contact Association', function() {",
											"    pm.expect(individualContacts[0].associatedContacts.length).to.eql(0);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token_staff}}",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "{{token_super_admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{env}}/contacts?type=INDIVIDUAL",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"contacts"
									],
									"query": [
										{
											"key": "type",
											"value": "INDIVIDUAL"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Search All Legal Entity Contacts",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1cbd5a7c-1dba-4799-b625-25cf77456cb5",
										"type": "text/javascript",
										"exec": [
											"var expectedSchema = {",
											"  \"type\": \"object\",",
											"  \"required\": [",
											"    \"individualContacts\",",
											"    \"legalEntityContacts\"",
											"  ],",
											"  \"properties\": {",
											"    \"individualContacts\": {",
											"      \"type\": \"array\"",
											"    },",
											"    \"legalEntityContacts\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"object\",",
											"        \"required\": [",
											"          \"id\",",
											"          \"name\",",
											"          \"email\",",
											"          \"contactType\",",
											"          \"isVendor\",",
											"          \"isGisPopulated\",",
											"          \"streetAddress\",",
											"          \"city\",",
											"          \"state\",",
											"          \"zip\",",
											"          \"note\",",
											"          \"associatedContacts\"",
											"        ],",
											"        \"properties\": {",
											"          \"id\": {",
											"            \"type\": \"integer\"",
											"          },",
											"          \"name\": {",
											"            \"type\": \"string\"",
											"          },",
											"          \"email\": {",
											"            \"type\": \"string\"",
											"          },",
											"          \"contactType\": {",
											"            \"type\": \"string\"",
											"          },",
											"          \"isVendor\": {",
											"            \"type\": \"boolean\"",
											"          },",
											"           \"isGisPopulated\": {",
											"            \"type\": \"boolean\"",
											"          },",
											"          \"streetAddress\": {",
											"            \"type\": \"string\"",
											"          },",
											"          \"city\": {",
											"            \"type\": \"string\"",
											"          },",
											"          \"state\": {",
											"            \"type\": \"string\"",
											"          },",
											"          \"zip\": {",
											"            \"type\": \"string\"",
											"          },",
											"          \"note\": {",
											"            \"type\": \"string\"",
											"          },",
											"          \"associatedContacts\": {",
											"            \"type\": \"array\"",
											"          }",
											"        }",
											"      }",
											"    }",
											"  }",
											"};",
											"",
											"var jsonData = pm.response.json();",
											"",
											"console.log(jsonData);",
											"",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
											"});",
											"",
											"var legalEntityContacts = jsonData.legalEntityContacts;",
											"var individualContacts = jsonData.individualContacts;",
											"",
											"pm.test('Legal Entity Contacts Count', function () {",
											"    pm.expect(legalEntityContacts.length).to.eql(3);",
											"});",
											"",
											"pm.test('Individual Contacts Count', function () {",
											"    pm.expect(individualContacts.length).to.eql(0);",
											"});",
											"",
											"pm.test('Validate 1st Legal Entity Contact Name', function() {",
											"    pm.expect(legalEntityContacts[0].name).to.eql('Monsters Inc');",
											"});",
											"",
											"pm.test('Validate 2nd Legal Entity Contact Association', function() {",
											"    pm.expect(legalEntityContacts[1].associatedContacts.length).to.eql(1);",
											"});",
											"",
											"pm.test('Validate 3rd Legal Entity Contact Name', function() {",
											"    pm.expect(legalEntityContacts[2].name).to.eql('Monsters Inc');",
											"});",
											"",
											"pm.test('Validate 1st Legal Entity Contact Association', function() {",
											"    pm.expect(legalEntityContacts[0].associatedContacts.length).to.eql(2);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token_staff}}",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "{{token_super_admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{env}}/contacts?type=LEGAL_ENTITY",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"contacts"
									],
									"query": [
										{
											"key": "type",
											"value": "LEGAL_ENTITY"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Search Contacts with keyword & exclude",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "72a6dd1d-605c-4759-a12d-fe975ccf54fa",
										"type": "text/javascript",
										"exec": [
											"var expectedSchema = {",
											"  \"type\": \"object\",",
											"  \"required\": [",
											"    \"individualContacts\",",
											"    \"legalEntityContacts\"",
											"  ],",
											"  \"properties\": {",
											"    \"individualContacts\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"object\",",
											"        \"required\": [",
											"          \"id\",",
											"          \"name\",",
											"          \"email\",",
											"          \"contactType\",",
											"          \"isVendor\",",
											"          \"isGisPopulated\",",
											"          \"streetAddress\",",
											"          \"city\",",
											"          \"state\",",
											"          \"zip\",",
											"          \"note\",",
											"          \"associatedContacts\"",
											"        ],",
											"        \"properties\": {",
											"          \"id\": {",
											"            \"type\": \"integer\"",
											"          },",
											"          \"name\": {",
											"            \"type\": \"string\"",
											"          },",
											"          \"email\": {",
											"            \"type\": \"string\"",
											"          },",
											"          \"contactType\": {",
											"            \"type\": \"string\"",
											"          },",
											"          \"isVendor\": {",
											"            \"type\": \"boolean\"",
											"          },",
											"          \"isGisPopulated\": {",
											"            \"type\": \"boolean\"",
											"          },",
											"          \"streetAddress\": {",
											"            \"type\": \"string\"",
											"          },",
											"          \"city\": {",
											"            \"type\": \"string\"",
											"          },",
											"          \"state\": {",
											"            \"type\": \"string\"",
											"          },",
											"          \"zip\": {",
											"            \"type\": \"string\"",
											"          },",
											"          \"note\": {",
											"            \"type\": \"string\"",
											"          },",
											"          \"associatedContacts\": {",
											"            \"type\": \"array\"",
											"          }",
											"        }",
											"      }",
											"    },",
											"    \"legalEntityContacts\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"object\",",
											"        \"required\": [",
											"          \"id\",",
											"          \"name\",",
											"          \"email\",",
											"          \"contactType\",",
											"          \"isVendor\",",
											"          \"isGisPopulated\",",
											"          \"streetAddress\",",
											"          \"city\",",
											"          \"state\",",
											"          \"zip\",",
											"          \"note\",",
											"          \"associatedContacts\",",
											"        ],",
											"        \"properties\": {",
											"          \"id\": {",
											"            \"type\": \"integer\"",
											"          },",
											"          \"name\": {",
											"            \"type\": \"string\"",
											"          },",
											"          \"email\": {",
											"            \"type\": \"string\"",
											"          },",
											"          \"contactType\": {",
											"            \"type\": \"string\"",
											"          },",
											"          \"isVendor\": {",
											"            \"type\": \"boolean\"",
											"          },",
											"          \"isGisPopulated\": {",
											"            \"type\": \"boolean\"",
											"          },",
											"          \"streetAddress\": {",
											"            \"type\": \"string\"",
											"          },",
											"          \"city\": {",
											"            \"type\": \"string\"",
											"          },",
											"          \"state\": {",
											"            \"type\": \"string\"",
											"          },",
											"          \"zip\": {",
											"            \"type\": \"string\"",
											"          },",
											"          \"note\": {",
											"            \"type\": \"string\"",
											"          },",
											"          \"associatedContacts\": {",
											"            \"type\": \"array\"",
											"          }",
											"        }",
											"      }",
											"    }",
											"  }",
											"};",
											"",
											"var jsonData = pm.response.json();",
											"",
											"console.log(jsonData);",
											"",
											"pm.test('Schema is valid', function() {",
											"  pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
											"});",
											"",
											"var legalEntityContacts = jsonData.legalEntityContacts;",
											"var individualContacts = jsonData.individualContacts;",
											"",
											"pm.test('Legal Entity Contacts Count', function () {",
											"    pm.expect(legalEntityContacts.length).to.eql(3);",
											"});",
											"",
											"pm.test('Individual Contacts Count', function () {",
											"    pm.expect(individualContacts.length).to.eql(2);",
											"});",
											"",
											"pm.test('Validate 1st Individual Contact Name', function() {",
											"    pm.expect(individualContacts[0].name).to.eql('Tom Cruise');",
											"});",
											"",
											"pm.test('Validate 2nd Individual Contact Association', function() {",
											"    pm.expect(individualContacts[1].associatedContacts.length).to.eql(1);",
											"});",
											"",
											"pm.test('Validate 2nd Legal Entity Contact Name', function() {",
											"    pm.expect(legalEntityContacts[1].name).to.eql('Mothers Pet');",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token_staff}}",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "{{token_super_admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{env}}/contacts?q=989&excludeContactIds=[1]",
									"protocol": "http",
									"host": [
										"{{env}}"
									],
									"path": [
										"contacts"
									],
									"query": [
										{
											"key": "q",
											"value": "989"
										},
										{
											"key": "excludeContactIds",
											"value": "[1]"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		}
	]
}